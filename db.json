{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.f6a68c.css","path":"main.f6a68c.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.40e320.js","path":"mobile.40e320.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.f6a68c.js","path":"main.f6a68c.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1493216011647},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1493216011647},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1493216011647},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1493216011648},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1493216011649},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1493216011648},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1493216011648},{"_id":"themes/yilia/_config.yml","hash":"07b71f4fdfbd7daf9ed4f302f59f18af5b34b8cd","modified":1498366141804},{"_id":"themes/yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1493216011665},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1493216011691},{"_id":"source/_posts/SoftwareTesting.md","hash":"a8c148ed7c768a72e904a19b6de09f54fc0180da","modified":1498365868311},{"_id":"source/_posts/Javascript-data-structure.md","hash":"f66a2e1062b144dc61e824782ec982c4a6339d78","modified":1498366593089},{"_id":"source/_posts/hello-world.md","hash":"1c2b6b1791235caa4079e8d984c0a2c81f9ea24c","modified":1498365898211},{"_id":"source/_posts/interestingCSS.md","hash":"3e829496ad686e416909a1fb26fa5535d2964d58","modified":1498365884797},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1493216011632},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1493216011638},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1493215662281},{"_id":"themes/yilia/.git/index","hash":"aa88779335e3a79782e19deb66e575117bd1f260","modified":1495078496523},{"_id":"themes/yilia/.git/packed-refs","hash":"f2c7824806e24eef83ae2f410b72a12d3ed2a00d","modified":1493216011627},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1493216011650},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1493216011650},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1493216011650},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1493216011651},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1493216011651},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1493216011652},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1493216011652},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1493216011662},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1493216011662},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1493216011663},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1493216011663},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493216011663},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1493216011664},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1493216011664},{"_id":"themes/yilia/source/main.f6a68c.css","hash":"116e8d4922fc5c677b6a6970285f6258b20fe34d","modified":1493216011689},{"_id":"themes/yilia/source/mobile.40e320.js","hash":"cddc2fb9b2df3eee0c0e9d0cb937f9e54429970d","modified":1493216011690},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1493216011691},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1493216011665},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1493216011683},{"_id":"themes/yilia/source/main.f6a68c.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1493216011690},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1493215662282},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1493215662282},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1493215662282},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1493215662283},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1493215662283},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1493215662284},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1493215662284},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1493215662284},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1493215662285},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1493215662285},{"_id":"themes/yilia/.git/logs/HEAD","hash":"9dde5ba0720b3d7f5c304cde4636ce93020e0ea3","modified":1493216011635},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1493215662285},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1493216011653},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1493216011653},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1493216011653},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8bbf5db9e4d3c1037bbeaa16f9d7ea0dc281d23c","modified":1493216011654},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1493216011654},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"fe8e368f5be6b8e0724c602380e787f88a360074","modified":1493216011654},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1493216011656},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1493216011657},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1493216011656},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1493216011656},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1493216011658},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1493216011657},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1493216011657},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"1c0680ad7a6750bb19effae183b58755256fe241","modified":1493216011661},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1493216011661},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1493216011662},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1493216011684},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1493216011685},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1493216011685},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1493216011685},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1493216011686},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1493216011686},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1493216011688},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1493216011687},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1493216011688},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1493216011666},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1493216011666},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1493216011666},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1493216011666},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1493216011667},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1493216011667},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"2d1c70bb606c0d87e4f68ec2e600e08b27f32b99","modified":1493216011668},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1493216011667},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"768e77b775923c53f974a15fe9ab04d0e05198a5","modified":1493216011670},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1493216011672},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1493216011673},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1493216011673},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1493216011673},{"_id":"themes/yilia/source-src/css/main.scss","hash":"1bc3240d693f190f86bf5e258cc5846e09be9ec1","modified":1493216011675},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1493216011675},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1493216011675},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1493216011676},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"7c24ea86d95c86b82337177559d78ce56d8912e0","modified":1493216011675},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1493216011676},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1493216011676},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1493216011677},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1493216011677},{"_id":"themes/yilia/source-src/css/social.scss","hash":"7c4c54bcc4cd0bd69162745ae2a2357dcc54f5cd","modified":1493216011677},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1493216011677},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"6932c642bf8191768d7090982a91c8c1f1c4ed1e","modified":1493216011678},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1493216011678},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1493216011679},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1493216011680},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1493216011680},{"_id":"themes/yilia/source-src/js/fix.js","hash":"0b434b658abad220459b1e3ee962ebfa4f8f88ca","modified":1493216011681},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1493216011681},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1493216011681},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1493216011682},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1493216011682},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1493216011683},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1493216011683},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1493216011683},{"_id":"themes/yilia/.git/objects/pack/pack-112ec025bb463b4e9b4ff0e5d7b4ecf8e93bfbc2.idx","hash":"3d4c719f4d60212cc00c28fdbf4c717906cf5001","modified":1493216011548},{"_id":"themes/yilia/.git/refs/heads/master","hash":"f25c7071eabad44abcb3a813a2b8d9d56fbee9cf","modified":1493216011634},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1493216011658},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1493216011659},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"0a3c55e2660a5c4c83a161fae21a4c0b7e6e5f72","modified":1493216011659},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1493216011659},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1493216011660},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1493216011659},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1493216011660},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1493216011660},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"68d48a415ac4e675e73f660ee27bbaa8a06b1c11","modified":1493216011661},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1493216011668},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1493216011669},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1493216011669},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1493216011670},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1493216011669},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1493216011671},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1493216011671},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1493216011672},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1493216011672},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1493216011674},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1493216011674},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1493216011674},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"9dde5ba0720b3d7f5c304cde4636ce93020e0ea3","modified":1493216011635},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1493216011631},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"9dde5ba0720b3d7f5c304cde4636ce93020e0ea3","modified":1493216011631},{"_id":"source/_posts/interestingCSS/demo3.gif","hash":"5272b4ebaab2e81080d962821efc5ad7dd98464b","modified":1498363961911},{"_id":"source/_posts/interestingCSS/demo1.gif","hash":"baf127a84161d51657bb51a27af5fdb923686045","modified":1498363961906},{"_id":"themes/yilia/.git/objects/pack/pack-112ec025bb463b4e9b4ff0e5d7b4ecf8e93bfbc2.pack","hash":"44f5cc6c8824d86c893d25c5100904675e7ebbd9","modified":1493216011549}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"SoftwareTesting","year":2017,"month":4,"day":1,"_content":"### 行业内的主要知识点\n#### 软件危机\n#### 软件测试的分类\n- 按测试阶段划分\n\n软件测试 = 程序 + 文档 + 数据\n程序主流方向 B/S架构和手机app\n\n<!-- more -->\n\n#### 软件项目流程\n- 可行性分析\n- 立项\n- 需求\n- 原型设计\n- 概要设计\n- 详细设计\n- 开发\n- 验收\n- 维护\n#### 接口测试\n- 后台和前台的数据\n- 后台和前台可以交互\n### 文档\n- 需求文档\n- 设计文档\n- 开发文档\n- 测试文档\n- 验收文档\n- 用户文档\n### 软件测试\n- 测试计划\n- 测试用例\n- 测试方案\n- 测试报告\n- 测试方案\n- 测试报告（总结）\n\n### 软件测试就是保证\n### 软件测试的分类\n- 通用软件产品\n- 电信行业\n- 金融证券行业\n- 游戏测试\n- 嵌入式软件测试\n- 电子商务软件测试\n\n### 岗位分类\n- 软件测试工程师\n- 硬件测试工程师\n- 自动化工程师\n- 性能测试工程师\n- 安全测试工程师\n\n### 软件测试人员的职责\n- 了解项目需求内容\n- 编写合理的测试计划\n- \n\n作业：\n1. 你对目前软件测试行业现状怎么看？\n2. 你觉得现在的测试人员能力水平如何？\n3. 你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？\n\n### 软件缺陷管理\n\n#### 软件缺陷的定义\n- IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：\n&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。\n- 因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。\n\n#### 软件缺陷的表现\n- 功能、我没有实现或部分实现。\n- 设计不合理，功能我和明确，逻辑不清楚或存在矛盾。\n- 产品实际结果和所期望的结果不一样。\n- 没有达到需求规格说明书所规定的性能指标等。\n- 运行出错，包括运行中断、系统崩溃、界面混乱等。\n- 数据不正确、精度不够、不完整或格式不统一。\n- 用户不能接受的其他问题，如存取时间过长、界面不美观。\n- 硬件或系统软件上存在的其他问题。\n\n#### 软件缺陷示例\n- 计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。\n&emsp;&emsp;软件未达到软件需求规格说明书表明的功能\n- 若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。\n&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围\n- 若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。\n&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标\n- 假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。\n&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误\n- 测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。\n&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好\n\n#### 软件缺陷产生的原因\n&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：\n- 需求解释或者记录错误\n- 用户需求定义错误 \n- 设计说明存在错误 \n- 编码说明、程序代码有误\n- 硬件或者软件系统上存在错误\n- 其他，如文档错误、内容不正确\n\n#### 软件缺陷的根源\n- 交流不充分\n&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等\n- 软件的复杂性\n&emsp;&emsp;功能复杂、开发复杂、测试复杂\n- 开发人员的错误\n&emsp;&emsp;对需求的理解、开发压力、功能与经验\n- 需求的变化\n&emsp;&emsp;需求说明书、设计文档、程序的变更\n- 进度压力\n&emsp;&emsp;项目周期比较紧\n\n#### 缺陷发现的手段\n&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：\n- 评审\n- QA\n- 客户\n\n#### 软件缺陷修的费用\n\n需求规格说明书、设计、编码、测试、发布，费用越来越高\n\n#### 软件缺陷的信息\n\n- 缺陷ID\n- 缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况\n- 缺陷标题*\n- 缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低\n- 缺陷的优先级*\n- 缺陷所属模块*\n- 缺陷记录者\n- 缺陷提交时间\n- 缺陷处理人\n- 处理结果描述\n- 缺陷处理时间\n- 缺陷验证人\n- 缺陷结果描述\n- 缺陷详细描述*\n- 缺陷环境说明\n- 必要的附件\n\n作业：\n1。 \nBUG标题： 一句话描述BUG\nBUG的等级： 致命错误、严重错误、一般、较小、\n测试建议\n提交时间\n软件版本\n软件环境：win7/Android7\n产生概率： 100%\n产生模块\n处理人\n产生步骤： 1。。。2。。。3。。。\n期待结果\n\n#### 软件缺陷分类————BUG类型\n\n- 系统缺陷\n1.由于程序所引起的死机，异常退出\n2.程序死循环\n3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足\n- 数据缺陷\n1.数据计算错误\n2.数据约束错误\n3.数据输入、输出错误\n- 数据库缺陷\n1. 数据库发生死锁\n2. 数据库的表、缺省值未加约束条件\n3. 数据库连接错误\n4. 数据库中的表有过多的空字段\n- 接口缺陷\n1.数据通信错误\n2.程序接口错误\n- 功能缺陷\n1.功能无法实现\n2.功能实现错误\n- 安全性缺陷\n1.用户权限无法实现\n2.超时限制错误\n3.访问控制错误\n4.加密错误\n- 兼容性缺陷\n1.与需求文档配置兼容性不符合\n- 性能缺陷\n1.未达到预期的性能目标\n2.性能测试中出错，导致无法继续进行测试\n- 界面缺陷\n1.操作界面错误\n2.打印内容、格式错误\n3.删除操作未给出提示\n4.长时间操作未给出提示\n5.界面不规范\n- 建议\n1.功能建议\n2.操作建议","source":"_posts/SoftwareTesting.md","raw":"---\ntitle: SoftwareTesting\nyear: 2017\nmonth: 4\nday: 1\n---\n### 行业内的主要知识点\n#### 软件危机\n#### 软件测试的分类\n- 按测试阶段划分\n\n软件测试 = 程序 + 文档 + 数据\n程序主流方向 B/S架构和手机app\n\n<!-- more -->\n\n#### 软件项目流程\n- 可行性分析\n- 立项\n- 需求\n- 原型设计\n- 概要设计\n- 详细设计\n- 开发\n- 验收\n- 维护\n#### 接口测试\n- 后台和前台的数据\n- 后台和前台可以交互\n### 文档\n- 需求文档\n- 设计文档\n- 开发文档\n- 测试文档\n- 验收文档\n- 用户文档\n### 软件测试\n- 测试计划\n- 测试用例\n- 测试方案\n- 测试报告\n- 测试方案\n- 测试报告（总结）\n\n### 软件测试就是保证\n### 软件测试的分类\n- 通用软件产品\n- 电信行业\n- 金融证券行业\n- 游戏测试\n- 嵌入式软件测试\n- 电子商务软件测试\n\n### 岗位分类\n- 软件测试工程师\n- 硬件测试工程师\n- 自动化工程师\n- 性能测试工程师\n- 安全测试工程师\n\n### 软件测试人员的职责\n- 了解项目需求内容\n- 编写合理的测试计划\n- \n\n作业：\n1. 你对目前软件测试行业现状怎么看？\n2. 你觉得现在的测试人员能力水平如何？\n3. 你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？\n\n### 软件缺陷管理\n\n#### 软件缺陷的定义\n- IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：\n&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。\n- 因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。\n\n#### 软件缺陷的表现\n- 功能、我没有实现或部分实现。\n- 设计不合理，功能我和明确，逻辑不清楚或存在矛盾。\n- 产品实际结果和所期望的结果不一样。\n- 没有达到需求规格说明书所规定的性能指标等。\n- 运行出错，包括运行中断、系统崩溃、界面混乱等。\n- 数据不正确、精度不够、不完整或格式不统一。\n- 用户不能接受的其他问题，如存取时间过长、界面不美观。\n- 硬件或系统软件上存在的其他问题。\n\n#### 软件缺陷示例\n- 计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。\n&emsp;&emsp;软件未达到软件需求规格说明书表明的功能\n- 若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。\n&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围\n- 若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。\n&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标\n- 假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。\n&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误\n- 测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。\n&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好\n\n#### 软件缺陷产生的原因\n&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：\n- 需求解释或者记录错误\n- 用户需求定义错误 \n- 设计说明存在错误 \n- 编码说明、程序代码有误\n- 硬件或者软件系统上存在错误\n- 其他，如文档错误、内容不正确\n\n#### 软件缺陷的根源\n- 交流不充分\n&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等\n- 软件的复杂性\n&emsp;&emsp;功能复杂、开发复杂、测试复杂\n- 开发人员的错误\n&emsp;&emsp;对需求的理解、开发压力、功能与经验\n- 需求的变化\n&emsp;&emsp;需求说明书、设计文档、程序的变更\n- 进度压力\n&emsp;&emsp;项目周期比较紧\n\n#### 缺陷发现的手段\n&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：\n- 评审\n- QA\n- 客户\n\n#### 软件缺陷修的费用\n\n需求规格说明书、设计、编码、测试、发布，费用越来越高\n\n#### 软件缺陷的信息\n\n- 缺陷ID\n- 缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况\n- 缺陷标题*\n- 缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低\n- 缺陷的优先级*\n- 缺陷所属模块*\n- 缺陷记录者\n- 缺陷提交时间\n- 缺陷处理人\n- 处理结果描述\n- 缺陷处理时间\n- 缺陷验证人\n- 缺陷结果描述\n- 缺陷详细描述*\n- 缺陷环境说明\n- 必要的附件\n\n作业：\n1。 \nBUG标题： 一句话描述BUG\nBUG的等级： 致命错误、严重错误、一般、较小、\n测试建议\n提交时间\n软件版本\n软件环境：win7/Android7\n产生概率： 100%\n产生模块\n处理人\n产生步骤： 1。。。2。。。3。。。\n期待结果\n\n#### 软件缺陷分类————BUG类型\n\n- 系统缺陷\n1.由于程序所引起的死机，异常退出\n2.程序死循环\n3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足\n- 数据缺陷\n1.数据计算错误\n2.数据约束错误\n3.数据输入、输出错误\n- 数据库缺陷\n1. 数据库发生死锁\n2. 数据库的表、缺省值未加约束条件\n3. 数据库连接错误\n4. 数据库中的表有过多的空字段\n- 接口缺陷\n1.数据通信错误\n2.程序接口错误\n- 功能缺陷\n1.功能无法实现\n2.功能实现错误\n- 安全性缺陷\n1.用户权限无法实现\n2.超时限制错误\n3.访问控制错误\n4.加密错误\n- 兼容性缺陷\n1.与需求文档配置兼容性不符合\n- 性能缺陷\n1.未达到预期的性能目标\n2.性能测试中出错，导致无法继续进行测试\n- 界面缺陷\n1.操作界面错误\n2.打印内容、格式错误\n3.删除操作未给出提示\n4.长时间操作未给出提示\n5.界面不规范\n- 建议\n1.功能建议\n2.操作建议","slug":"SoftwareTesting","published":1,"date":"2017-06-25T04:12:41.895Z","updated":"2017-06-25T04:44:28.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4c8ssrw00009clii00chx2q","content":"<h3 id=\"行业内的主要知识点\"><a href=\"#行业内的主要知识点\" class=\"headerlink\" title=\"行业内的主要知识点\"></a>行业内的主要知识点</h3><h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h4 id=\"软件测试的分类\"><a href=\"#软件测试的分类\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h4><ul>\n<li>按测试阶段划分</li>\n</ul>\n<p>软件测试 = 程序 + 文档 + 数据<br>程序主流方向 B/S架构和手机app</p>\n<a id=\"more\"></a>\n<h4 id=\"软件项目流程\"><a href=\"#软件项目流程\" class=\"headerlink\" title=\"软件项目流程\"></a>软件项目流程</h4><ul>\n<li>可行性分析</li>\n<li>立项</li>\n<li>需求</li>\n<li>原型设计</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>开发</li>\n<li>验收</li>\n<li>维护<h4 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h4></li>\n<li>后台和前台的数据</li>\n<li>后台和前台可以交互<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3></li>\n<li>需求文档</li>\n<li>设计文档</li>\n<li>开发文档</li>\n<li>测试文档</li>\n<li>验收文档</li>\n<li>用户文档<h3 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h3></li>\n<li>测试计划</li>\n<li>测试用例</li>\n<li>测试方案</li>\n<li>测试报告</li>\n<li>测试方案</li>\n<li>测试报告（总结）</li>\n</ul>\n<h3 id=\"软件测试就是保证\"><a href=\"#软件测试就是保证\" class=\"headerlink\" title=\"软件测试就是保证\"></a>软件测试就是保证</h3><h3 id=\"软件测试的分类-1\"><a href=\"#软件测试的分类-1\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h3><ul>\n<li>通用软件产品</li>\n<li>电信行业</li>\n<li>金融证券行业</li>\n<li>游戏测试</li>\n<li>嵌入式软件测试</li>\n<li>电子商务软件测试</li>\n</ul>\n<h3 id=\"岗位分类\"><a href=\"#岗位分类\" class=\"headerlink\" title=\"岗位分类\"></a>岗位分类</h3><ul>\n<li>软件测试工程师</li>\n<li>硬件测试工程师</li>\n<li>自动化工程师</li>\n<li>性能测试工程师</li>\n<li>安全测试工程师</li>\n</ul>\n<h3 id=\"软件测试人员的职责\"><a href=\"#软件测试人员的职责\" class=\"headerlink\" title=\"软件测试人员的职责\"></a>软件测试人员的职责</h3><ul>\n<li>了解项目需求内容</li>\n<li>编写合理的测试计划</li>\n<li></li>\n</ul>\n<p>作业：</p>\n<ol>\n<li>你对目前软件测试行业现状怎么看？</li>\n<li>你觉得现在的测试人员能力水平如何？</li>\n<li>你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？</li>\n</ol>\n<h3 id=\"软件缺陷管理\"><a href=\"#软件缺陷管理\" class=\"headerlink\" title=\"软件缺陷管理\"></a>软件缺陷管理</h3><h4 id=\"软件缺陷的定义\"><a href=\"#软件缺陷的定义\" class=\"headerlink\" title=\"软件缺陷的定义\"></a>软件缺陷的定义</h4><ul>\n<li>IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：<br>&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。</li>\n<li>因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。</li>\n</ul>\n<h4 id=\"软件缺陷的表现\"><a href=\"#软件缺陷的表现\" class=\"headerlink\" title=\"软件缺陷的表现\"></a>软件缺陷的表现</h4><ul>\n<li>功能、我没有实现或部分实现。</li>\n<li>设计不合理，功能我和明确，逻辑不清楚或存在矛盾。</li>\n<li>产品实际结果和所期望的结果不一样。</li>\n<li>没有达到需求规格说明书所规定的性能指标等。</li>\n<li>运行出错，包括运行中断、系统崩溃、界面混乱等。</li>\n<li>数据不正确、精度不够、不完整或格式不统一。</li>\n<li>用户不能接受的其他问题，如存取时间过长、界面不美观。</li>\n<li>硬件或系统软件上存在的其他问题。</li>\n</ul>\n<h4 id=\"软件缺陷示例\"><a href=\"#软件缺陷示例\" class=\"headerlink\" title=\"软件缺陷示例\"></a>软件缺陷示例</h4><ul>\n<li>计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。<br>&emsp;&emsp;软件未达到软件需求规格说明书表明的功能</li>\n<li>若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。<br>&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围</li>\n<li>若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。<br>&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标</li>\n<li>假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。<br>&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误</li>\n<li>测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。<br>&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好</li>\n</ul>\n<h4 id=\"软件缺陷产生的原因\"><a href=\"#软件缺陷产生的原因\" class=\"headerlink\" title=\"软件缺陷产生的原因\"></a>软件缺陷产生的原因</h4><p>&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：</p>\n<ul>\n<li>需求解释或者记录错误</li>\n<li>用户需求定义错误 </li>\n<li>设计说明存在错误 </li>\n<li>编码说明、程序代码有误</li>\n<li>硬件或者软件系统上存在错误</li>\n<li>其他，如文档错误、内容不正确</li>\n</ul>\n<h4 id=\"软件缺陷的根源\"><a href=\"#软件缺陷的根源\" class=\"headerlink\" title=\"软件缺陷的根源\"></a>软件缺陷的根源</h4><ul>\n<li>交流不充分<br>&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等</li>\n<li>软件的复杂性<br>&emsp;&emsp;功能复杂、开发复杂、测试复杂</li>\n<li>开发人员的错误<br>&emsp;&emsp;对需求的理解、开发压力、功能与经验</li>\n<li>需求的变化<br>&emsp;&emsp;需求说明书、设计文档、程序的变更</li>\n<li>进度压力<br>&emsp;&emsp;项目周期比较紧</li>\n</ul>\n<h4 id=\"缺陷发现的手段\"><a href=\"#缺陷发现的手段\" class=\"headerlink\" title=\"缺陷发现的手段\"></a>缺陷发现的手段</h4><p>&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：</p>\n<ul>\n<li>评审</li>\n<li>QA</li>\n<li>客户</li>\n</ul>\n<h4 id=\"软件缺陷修的费用\"><a href=\"#软件缺陷修的费用\" class=\"headerlink\" title=\"软件缺陷修的费用\"></a>软件缺陷修的费用</h4><p>需求规格说明书、设计、编码、测试、发布，费用越来越高</p>\n<h4 id=\"软件缺陷的信息\"><a href=\"#软件缺陷的信息\" class=\"headerlink\" title=\"软件缺陷的信息\"></a>软件缺陷的信息</h4><ul>\n<li>缺陷ID</li>\n<li>缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况</li>\n<li>缺陷标题*</li>\n<li>缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低</li>\n<li>缺陷的优先级*</li>\n<li>缺陷所属模块*</li>\n<li>缺陷记录者</li>\n<li>缺陷提交时间</li>\n<li>缺陷处理人</li>\n<li>处理结果描述</li>\n<li>缺陷处理时间</li>\n<li>缺陷验证人</li>\n<li>缺陷结果描述</li>\n<li>缺陷详细描述*</li>\n<li>缺陷环境说明</li>\n<li>必要的附件</li>\n</ul>\n<p>作业：<br>1。<br>BUG标题： 一句话描述BUG<br>BUG的等级： 致命错误、严重错误、一般、较小、<br>测试建议<br>提交时间<br>软件版本<br>软件环境：win7/Android7<br>产生概率： 100%<br>产生模块<br>处理人<br>产生步骤： 1。。。2。。。3。。。<br>期待结果</p>\n<h4 id=\"软件缺陷分类————BUG类型\"><a href=\"#软件缺陷分类————BUG类型\" class=\"headerlink\" title=\"软件缺陷分类————BUG类型\"></a>软件缺陷分类————BUG类型</h4><ul>\n<li>系统缺陷<br>1.由于程序所引起的死机，异常退出<br>2.程序死循环<br>3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足</li>\n<li>数据缺陷<br>1.数据计算错误<br>2.数据约束错误<br>3.数据输入、输出错误</li>\n<li>数据库缺陷</li>\n</ul>\n<ol>\n<li>数据库发生死锁</li>\n<li>数据库的表、缺省值未加约束条件</li>\n<li>数据库连接错误</li>\n<li>数据库中的表有过多的空字段</li>\n</ol>\n<ul>\n<li>接口缺陷<br>1.数据通信错误<br>2.程序接口错误</li>\n<li>功能缺陷<br>1.功能无法实现<br>2.功能实现错误</li>\n<li>安全性缺陷<br>1.用户权限无法实现<br>2.超时限制错误<br>3.访问控制错误<br>4.加密错误</li>\n<li>兼容性缺陷<br>1.与需求文档配置兼容性不符合</li>\n<li>性能缺陷<br>1.未达到预期的性能目标<br>2.性能测试中出错，导致无法继续进行测试</li>\n<li>界面缺陷<br>1.操作界面错误<br>2.打印内容、格式错误<br>3.删除操作未给出提示<br>4.长时间操作未给出提示<br>5.界面不规范</li>\n<li>建议<br>1.功能建议<br>2.操作建议</li>\n</ul>\n","excerpt":"<h3 id=\"行业内的主要知识点\"><a href=\"#行业内的主要知识点\" class=\"headerlink\" title=\"行业内的主要知识点\"></a>行业内的主要知识点</h3><h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h4 id=\"软件测试的分类\"><a href=\"#软件测试的分类\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h4><ul>\n<li>按测试阶段划分</li>\n</ul>\n<p>软件测试 = 程序 + 文档 + 数据<br>程序主流方向 B/S架构和手机app</p>","more":"<h4 id=\"软件项目流程\"><a href=\"#软件项目流程\" class=\"headerlink\" title=\"软件项目流程\"></a>软件项目流程</h4><ul>\n<li>可行性分析</li>\n<li>立项</li>\n<li>需求</li>\n<li>原型设计</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>开发</li>\n<li>验收</li>\n<li>维护<h4 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h4></li>\n<li>后台和前台的数据</li>\n<li>后台和前台可以交互<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3></li>\n<li>需求文档</li>\n<li>设计文档</li>\n<li>开发文档</li>\n<li>测试文档</li>\n<li>验收文档</li>\n<li>用户文档<h3 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h3></li>\n<li>测试计划</li>\n<li>测试用例</li>\n<li>测试方案</li>\n<li>测试报告</li>\n<li>测试方案</li>\n<li>测试报告（总结）</li>\n</ul>\n<h3 id=\"软件测试就是保证\"><a href=\"#软件测试就是保证\" class=\"headerlink\" title=\"软件测试就是保证\"></a>软件测试就是保证</h3><h3 id=\"软件测试的分类-1\"><a href=\"#软件测试的分类-1\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h3><ul>\n<li>通用软件产品</li>\n<li>电信行业</li>\n<li>金融证券行业</li>\n<li>游戏测试</li>\n<li>嵌入式软件测试</li>\n<li>电子商务软件测试</li>\n</ul>\n<h3 id=\"岗位分类\"><a href=\"#岗位分类\" class=\"headerlink\" title=\"岗位分类\"></a>岗位分类</h3><ul>\n<li>软件测试工程师</li>\n<li>硬件测试工程师</li>\n<li>自动化工程师</li>\n<li>性能测试工程师</li>\n<li>安全测试工程师</li>\n</ul>\n<h3 id=\"软件测试人员的职责\"><a href=\"#软件测试人员的职责\" class=\"headerlink\" title=\"软件测试人员的职责\"></a>软件测试人员的职责</h3><ul>\n<li>了解项目需求内容</li>\n<li>编写合理的测试计划</li>\n<li></li>\n</ul>\n<p>作业：</p>\n<ol>\n<li>你对目前软件测试行业现状怎么看？</li>\n<li>你觉得现在的测试人员能力水平如何？</li>\n<li>你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？</li>\n</ol>\n<h3 id=\"软件缺陷管理\"><a href=\"#软件缺陷管理\" class=\"headerlink\" title=\"软件缺陷管理\"></a>软件缺陷管理</h3><h4 id=\"软件缺陷的定义\"><a href=\"#软件缺陷的定义\" class=\"headerlink\" title=\"软件缺陷的定义\"></a>软件缺陷的定义</h4><ul>\n<li>IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：<br>&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。</li>\n<li>因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。</li>\n</ul>\n<h4 id=\"软件缺陷的表现\"><a href=\"#软件缺陷的表现\" class=\"headerlink\" title=\"软件缺陷的表现\"></a>软件缺陷的表现</h4><ul>\n<li>功能、我没有实现或部分实现。</li>\n<li>设计不合理，功能我和明确，逻辑不清楚或存在矛盾。</li>\n<li>产品实际结果和所期望的结果不一样。</li>\n<li>没有达到需求规格说明书所规定的性能指标等。</li>\n<li>运行出错，包括运行中断、系统崩溃、界面混乱等。</li>\n<li>数据不正确、精度不够、不完整或格式不统一。</li>\n<li>用户不能接受的其他问题，如存取时间过长、界面不美观。</li>\n<li>硬件或系统软件上存在的其他问题。</li>\n</ul>\n<h4 id=\"软件缺陷示例\"><a href=\"#软件缺陷示例\" class=\"headerlink\" title=\"软件缺陷示例\"></a>软件缺陷示例</h4><ul>\n<li>计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。<br>&emsp;&emsp;软件未达到软件需求规格说明书表明的功能</li>\n<li>若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。<br>&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围</li>\n<li>若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。<br>&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标</li>\n<li>假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。<br>&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误</li>\n<li>测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。<br>&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好</li>\n</ul>\n<h4 id=\"软件缺陷产生的原因\"><a href=\"#软件缺陷产生的原因\" class=\"headerlink\" title=\"软件缺陷产生的原因\"></a>软件缺陷产生的原因</h4><p>&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：</p>\n<ul>\n<li>需求解释或者记录错误</li>\n<li>用户需求定义错误 </li>\n<li>设计说明存在错误 </li>\n<li>编码说明、程序代码有误</li>\n<li>硬件或者软件系统上存在错误</li>\n<li>其他，如文档错误、内容不正确</li>\n</ul>\n<h4 id=\"软件缺陷的根源\"><a href=\"#软件缺陷的根源\" class=\"headerlink\" title=\"软件缺陷的根源\"></a>软件缺陷的根源</h4><ul>\n<li>交流不充分<br>&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等</li>\n<li>软件的复杂性<br>&emsp;&emsp;功能复杂、开发复杂、测试复杂</li>\n<li>开发人员的错误<br>&emsp;&emsp;对需求的理解、开发压力、功能与经验</li>\n<li>需求的变化<br>&emsp;&emsp;需求说明书、设计文档、程序的变更</li>\n<li>进度压力<br>&emsp;&emsp;项目周期比较紧</li>\n</ul>\n<h4 id=\"缺陷发现的手段\"><a href=\"#缺陷发现的手段\" class=\"headerlink\" title=\"缺陷发现的手段\"></a>缺陷发现的手段</h4><p>&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：</p>\n<ul>\n<li>评审</li>\n<li>QA</li>\n<li>客户</li>\n</ul>\n<h4 id=\"软件缺陷修的费用\"><a href=\"#软件缺陷修的费用\" class=\"headerlink\" title=\"软件缺陷修的费用\"></a>软件缺陷修的费用</h4><p>需求规格说明书、设计、编码、测试、发布，费用越来越高</p>\n<h4 id=\"软件缺陷的信息\"><a href=\"#软件缺陷的信息\" class=\"headerlink\" title=\"软件缺陷的信息\"></a>软件缺陷的信息</h4><ul>\n<li>缺陷ID</li>\n<li>缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况</li>\n<li>缺陷标题*</li>\n<li>缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低</li>\n<li>缺陷的优先级*</li>\n<li>缺陷所属模块*</li>\n<li>缺陷记录者</li>\n<li>缺陷提交时间</li>\n<li>缺陷处理人</li>\n<li>处理结果描述</li>\n<li>缺陷处理时间</li>\n<li>缺陷验证人</li>\n<li>缺陷结果描述</li>\n<li>缺陷详细描述*</li>\n<li>缺陷环境说明</li>\n<li>必要的附件</li>\n</ul>\n<p>作业：<br>1。<br>BUG标题： 一句话描述BUG<br>BUG的等级： 致命错误、严重错误、一般、较小、<br>测试建议<br>提交时间<br>软件版本<br>软件环境：win7/Android7<br>产生概率： 100%<br>产生模块<br>处理人<br>产生步骤： 1。。。2。。。3。。。<br>期待结果</p>\n<h4 id=\"软件缺陷分类————BUG类型\"><a href=\"#软件缺陷分类————BUG类型\" class=\"headerlink\" title=\"软件缺陷分类————BUG类型\"></a>软件缺陷分类————BUG类型</h4><ul>\n<li>系统缺陷<br>1.由于程序所引起的死机，异常退出<br>2.程序死循环<br>3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足</li>\n<li>数据缺陷<br>1.数据计算错误<br>2.数据约束错误<br>3.数据输入、输出错误</li>\n<li>数据库缺陷</li>\n</ul>\n<ol>\n<li>数据库发生死锁</li>\n<li>数据库的表、缺省值未加约束条件</li>\n<li>数据库连接错误</li>\n<li>数据库中的表有过多的空字段</li>\n</ol>\n<ul>\n<li>接口缺陷<br>1.数据通信错误<br>2.程序接口错误</li>\n<li>功能缺陷<br>1.功能无法实现<br>2.功能实现错误</li>\n<li>安全性缺陷<br>1.用户权限无法实现<br>2.超时限制错误<br>3.访问控制错误<br>4.加密错误</li>\n<li>兼容性缺陷<br>1.与需求文档配置兼容性不符合</li>\n<li>性能缺陷<br>1.未达到预期的性能目标<br>2.性能测试中出错，导致无法继续进行测试</li>\n<li>界面缺陷<br>1.操作界面错误<br>2.打印内容、格式错误<br>3.删除操作未给出提示<br>4.长时间操作未给出提示<br>5.界面不规范</li>\n<li>建议<br>1.功能建议<br>2.操作建议</li>\n</ul>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-04-01T12:36:17.411Z","updated":"2017-06-25T04:44:58.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4c8sss000019clis6ykkt2j","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"Javascript_data_structure","date":"2017-06-25T04:55:30.000Z","_content":"\n## Javascript 数据类型\n\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n---\n\n<!-- more -->\n\n#####typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==\n\n---\n\n#####Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==\n\n---\n\n#####Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==\n\n---\n\n#####Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n######2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n######3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n######4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n######5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同","source":"_posts/Javascript-data-structure.md","raw":"---\ntitle: Javascript_data_structure\ndate: 2017-06-25 12:55:30\ntags:\n---\n\n## Javascript 数据类型\n\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n---\n\n<!-- more -->\n\n#####typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==\n\n---\n\n#####Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==\n\n---\n\n#####Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==\n\n---\n\n#####Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n######2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n######3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n######4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n######5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同","slug":"Javascript-data-structure","published":1,"updated":"2017-06-25T04:56:33.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4c8sss400029cliqzowng9i","content":"<h2 id=\"Javascript-数据类型\"><a href=\"#Javascript-数据类型\" class=\"headerlink\" title=\"Javascript 数据类型\"></a>Javascript 数据类型</h2><p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<hr>\n<a id=\"more\"></a>\n<p>#####typeof 操作符</p>\n<p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p>==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==</p>\n<hr>\n<p>#####Undefined类型</p>\n<p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==</p>\n<hr>\n<p>#####Null 类型</p>\n<p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==</p>\n<hr>\n<p>#####Number类型</p>\n<h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<p>######2. 其它进制转换为十进制</p>\n<p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>######3. 浮点数值</p>\n<p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p>==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>######4. NaN (Not a Number)</p>\n<ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<p>######5. 数值转换</p>\n<ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>\n","excerpt":"<h2 id=\"Javascript-数据类型\"><a href=\"#Javascript-数据类型\" class=\"headerlink\" title=\"Javascript 数据类型\"></a>Javascript 数据类型</h2><p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<hr>","more":"<p>#####typeof 操作符</p>\n<p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p>==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==</p>\n<hr>\n<p>#####Undefined类型</p>\n<p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==</p>\n<hr>\n<p>#####Null 类型</p>\n<p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==</p>\n<hr>\n<p>#####Number类型</p>\n<h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<p>######2. 其它进制转换为十进制</p>\n<p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>######3. 浮点数值</p>\n<p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p>==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>######4. NaN (Not a Number)</p>\n<ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<p>######5. 数值转换</p>\n<ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>"},{"title":"interestingCSS","date":"2017-04-26T16:07:09.000Z","_content":"\n今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。\n\n### 需求说明：\n\n这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：\n\n<!-- more -->\n\n```HTML\n<!-- demo1 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        width: 200px;\n        height: 100px;\n        float: left;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        height: 130px;\n        background-color: #19bd8e;\n        margin-left: 220px;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"right-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n然后做成的事例大概就是这个样子：\n\n![demo1](demo1.gif)\n\n上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。\n\n**注意：左卡片要浮动，右卡片不要设置宽度！！**\n\n不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？\n\n粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：\n\n```html\n<!-- demo2.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        height: 100px;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        width: 200px;\n        float: right;\n        height: 130px;\n        background-color: #19bd8e;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：\n\n```html\n<!-- demo3.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .container{\n        position: relative;\n    }\n    .left-panel{\n        height: 130px;\n        background: #d20e67;\n        margin-right: 200px;\n    }\n    .right-panel{\n        width: 200px;\n        height: 110px;\n        background-color: #19bd8e;\n        position: absolute;\n        right: 0;\n        top: 0;\n        padding-top: 20px;\n        text-align: center;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n    </div>\n</body>\n</html>\n```\n\n效果如下图：\n\n![demo3](demo3.gif)\n\n*[此案例在线demo地址：](http://lenkuntang.cn/blogDemo/interestingCSS/index.html)*","source":"_posts/interestingCSS.md","raw":"---\ntitle: interestingCSS\ndate: 2017-04-27 00:07:09\ntags:\n---\n\n今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。\n\n### 需求说明：\n\n这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：\n\n<!-- more -->\n\n```HTML\n<!-- demo1 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        width: 200px;\n        height: 100px;\n        float: left;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        height: 130px;\n        background-color: #19bd8e;\n        margin-left: 220px;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"right-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n然后做成的事例大概就是这个样子：\n\n![demo1](demo1.gif)\n\n上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。\n\n**注意：左卡片要浮动，右卡片不要设置宽度！！**\n\n不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？\n\n粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：\n\n```html\n<!-- demo2.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        height: 100px;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        width: 200px;\n        float: right;\n        height: 130px;\n        background-color: #19bd8e;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：\n\n```html\n<!-- demo3.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .container{\n        position: relative;\n    }\n    .left-panel{\n        height: 130px;\n        background: #d20e67;\n        margin-right: 200px;\n    }\n    .right-panel{\n        width: 200px;\n        height: 110px;\n        background-color: #19bd8e;\n        position: absolute;\n        right: 0;\n        top: 0;\n        padding-top: 20px;\n        text-align: center;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n    </div>\n</body>\n</html>\n```\n\n效果如下图：\n\n![demo3](demo3.gif)\n\n*[此案例在线demo地址：](http://lenkuntang.cn/blogDemo/interestingCSS/index.html)*","slug":"interestingCSS","published":1,"updated":"2017-06-25T04:44:44.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4c8sss900039cligtsfiv7b","content":"<p>今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。</p>\n<h3 id=\"需求说明：\"><a href=\"#需求说明：\" class=\"headerlink\" title=\"需求说明：\"></a>需求说明：</h3><p>这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo1 --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    .contaner&#123;</div><div class=\"line\">        width: 600px;</div><div class=\"line\">        height: 800px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .left-panel&#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">        height: 100px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background: #d20e67;</div><div class=\"line\">        text-align: center;</div><div class=\"line\">        padding-top: 30px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .right-panel&#123;</div><div class=\"line\">        height: 130px;</div><div class=\"line\">        background-color: #19bd8e;</div><div class=\"line\">        margin-left: 220px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box&#123;</div><div class=\"line\">        width: 50px;</div><div class=\"line\">        height: 50px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background-color: red;</div><div class=\"line\">        margin: 10px 10px 0 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后做成的事例大概就是这个样子：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo1.gif\" alt=\"demo1\"></p>\n<p>上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。</p>\n<p><strong>注意：左卡片要浮动，右卡片不要设置宽度！！</strong></p>\n<p>不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？</p>\n<p>粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo2.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    .contaner&#123;</div><div class=\"line\">        width: 600px;</div><div class=\"line\">        height: 800px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .left-panel&#123;</div><div class=\"line\">        height: 100px;</div><div class=\"line\">        background: #d20e67;</div><div class=\"line\">        text-align: center;</div><div class=\"line\">        padding-top: 30px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .right-panel&#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">        float: right;</div><div class=\"line\">        height: 130px;</div><div class=\"line\">        background-color: #19bd8e;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box&#123;</div><div class=\"line\">        width: 50px;</div><div class=\"line\">        height: 50px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background-color: red;</div><div class=\"line\">        margin: 10px 10px 0 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo3.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    .container&#123;</div><div class=\"line\">        position: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .left-panel&#123;</div><div class=\"line\">        height: 130px;</div><div class=\"line\">        background: #d20e67;</div><div class=\"line\">        margin-right: 200px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .right-panel&#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">        height: 110px;</div><div class=\"line\">        background-color: #19bd8e;</div><div class=\"line\">        position: absolute;</div><div class=\"line\">        right: 0;</div><div class=\"line\">        top: 0;</div><div class=\"line\">        padding-top: 20px;</div><div class=\"line\">        text-align: center;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box&#123;</div><div class=\"line\">        width: 50px;</div><div class=\"line\">        height: 50px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background-color: red;</div><div class=\"line\">        margin: 10px 10px 0 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo3.gif\" alt=\"demo3\"></p>\n<p><em><a href=\"http://lenkuntang.cn/blogDemo/interestingCSS/index.html\" target=\"_blank\" rel=\"external\">此案例在线demo地址：</a></em></p>\n","excerpt":"<p>今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。</p>\n<h3 id=\"需求说明：\"><a href=\"#需求说明：\" class=\"headerlink\" title=\"需求说明：\"></a>需求说明：</h3><p>这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo1 --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    .contaner&#123;</div><div class=\"line\">        width: 600px;</div><div class=\"line\">        height: 800px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .left-panel&#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">        height: 100px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background: #d20e67;</div><div class=\"line\">        text-align: center;</div><div class=\"line\">        padding-top: 30px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .right-panel&#123;</div><div class=\"line\">        height: 130px;</div><div class=\"line\">        background-color: #19bd8e;</div><div class=\"line\">        margin-left: 220px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box&#123;</div><div class=\"line\">        width: 50px;</div><div class=\"line\">        height: 50px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background-color: red;</div><div class=\"line\">        margin: 10px 10px 0 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后做成的事例大概就是这个样子：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo1.gif\" alt=\"demo1\"></p>\n<p>上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。</p>\n<p><strong>注意：左卡片要浮动，右卡片不要设置宽度！！</strong></p>\n<p>不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？</p>\n<p>粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo2.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    .contaner&#123;</div><div class=\"line\">        width: 600px;</div><div class=\"line\">        height: 800px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .left-panel&#123;</div><div class=\"line\">        height: 100px;</div><div class=\"line\">        background: #d20e67;</div><div class=\"line\">        text-align: center;</div><div class=\"line\">        padding-top: 30px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .right-panel&#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">        float: right;</div><div class=\"line\">        height: 130px;</div><div class=\"line\">        background-color: #19bd8e;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box&#123;</div><div class=\"line\">        width: 50px;</div><div class=\"line\">        height: 50px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background-color: red;</div><div class=\"line\">        margin: 10px 10px 0 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo3.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">    .container&#123;</div><div class=\"line\">        position: relative;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .left-panel&#123;</div><div class=\"line\">        height: 130px;</div><div class=\"line\">        background: #d20e67;</div><div class=\"line\">        margin-right: 200px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .right-panel&#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">        height: 110px;</div><div class=\"line\">        background-color: #19bd8e;</div><div class=\"line\">        position: absolute;</div><div class=\"line\">        right: 0;</div><div class=\"line\">        top: 0;</div><div class=\"line\">        padding-top: 20px;</div><div class=\"line\">        text-align: center;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .box&#123;</div><div class=\"line\">        width: 50px;</div><div class=\"line\">        height: 50px;</div><div class=\"line\">        float: left;</div><div class=\"line\">        background-color: red;</div><div class=\"line\">        margin: 10px 10px 0 10px;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo3.gif\" alt=\"demo3\"></p>\n<p><em><a href=\"http://lenkuntang.cn/blogDemo/interestingCSS/index.html\">此案例在线demo地址：</a></em></p>"}],"PostAsset":[{"_id":"source/_posts/interestingCSS/demo1.gif","slug":"demo1.gif","post":"cj4c8sss900039cligtsfiv7b","modified":1,"renderable":0},{"_id":"source/_posts/interestingCSS/demo3.gif","slug":"demo3.gif","post":"cj4c8sss900039cligtsfiv7b","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}