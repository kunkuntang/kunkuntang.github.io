{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b09c9df3e0a8dba665cfa9e191f74a886ab8e598","modified":1533122129000},{"_id":"themes/anatole/.gitignore","hash":"9fcbb05b158b5d3ba1ee60d38889e05e8b0f3f2a","modified":1494448682000},{"_id":"themes/anatole/.DS_Store","hash":"73394ea9d6b63ea52c2ce6a9ba35679e32db2e38","modified":1512818910000},{"_id":"themes/anatole/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1494448682000},{"_id":"themes/anatole/README.md","hash":"75a3829b8a316249ec0b4fd8eae2d371de879494","modified":1494448682000},{"_id":"themes/anatole/_config.sample.yml","hash":"0163bdeed600bb1911f894927a71ab842bcfc7dd","modified":1512818835000},{"_id":"themes/anatole/_config.yml","hash":"a8bee01ff3c1be08c05ff72b3f3f84cfaddc67d9","modified":1512847376000},{"_id":"themes/anatole/package.json","hash":"cf731a3ebf3913747fccb6c4c6615eba7d7e88a4","modified":1494448682000},{"_id":"source/_posts/.DS_Store","hash":"60815765c5ec93f8bf434683f2dbda0f99f82d87","modified":1512898970000},{"_id":"source/_posts/0to1-build-vue-project.md","hash":"52f74923477d49190f8b7dec96440126895d0526","modified":1533123157000},{"_id":"source/_posts/JavaScript-Design-Patterns-and-Development-Practice.md","hash":"1be8f3036e48797eb288c91c7d0c7c40bbf64651","modified":1509987401000},{"_id":"source/_posts/Javascript-data-structure.md","hash":"1525ebe8f83b43131caf820c28428e53455ce238","modified":1512846736000},{"_id":"source/_posts/JavascriptDataType.md","hash":"910e11444d395fe5e3af5e8c9e5641fe2d70737f","modified":1512846010000},{"_id":"source/_posts/SoftwareTesting.md","hash":"e38c24b38d23cf2ae0c127abd3f22b6708e3281c","modified":1512846812000},{"_id":"source/_posts/The-problem-of-mobile-web-developing.md","hash":"faaf6990147b4b834aa6f09d3459ac084a30f816","modified":1512847194000},{"_id":"source/_posts/interestingCSS.md","hash":"98a7b3bfe18762c7107f1db1643e52d864e7a1bc","modified":1512846518000},{"_id":"source/_posts/manage-Node-js-version-via-mvn.md","hash":"cc7d252ae94a8413adcc8c73d7c5e9cb8408adb3","modified":1541956541056},{"_id":"source/_posts/mediaMatch.md","hash":"52fb01d1028287b387c88b8eca547aa54d69eed5","modified":1512909329000},{"_id":"source/_posts/nginx-commmand-record.md","hash":"284e812cfdf42588f96f405045e8bfae3dcef929","modified":1563210682787},{"_id":"source/_posts/mongodb-command.md","hash":"fcb71974d76f22aa64c5f2e036a4498e8b65118a","modified":1512846295000},{"_id":"source/_posts/processing-medium-effect.md","hash":"a2554f0812bbd492ee5ab3bdb2998b597f91ea43","modified":1512845933000},{"_id":"source/_posts/wechat-share-and-single-page-summary.md","hash":"b2d44bcee17f71b31f2ca8284f718d4f8d450fee","modified":1533123152000},{"_id":"source/about/.DS_Store","hash":"20c869a09bdee533be756e567eb41ed428a55b4e","modified":1512824665000},{"_id":"source/about/index.md","hash":"648821e10cb9432a03dec7e4611b48495038d3f1","modified":1512824846000},{"_id":"source/links/.DS_Store","hash":"05607fca403ffb763fbbc3fa6aae0814c36efe2b","modified":1531025140000},{"_id":"source/links/index.md","hash":"85684cb36ce99a65eb113782d242072c56b78198","modified":1512830890000},{"_id":"source/tags/index.html","hash":"974ce27416e5d19ce35a31e935daf2c52daae97c","modified":1541956593686},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1494448682000},{"_id":"themes/anatole/layout/archive.jade","hash":"1a161404966000b25a84762f08da3ca60af146bc","modified":1494448682000},{"_id":"themes/anatole/layout/category.jade","hash":"ae894ef4baee4a0c7c8e66641166061e789f1fa7","modified":1494448682000},{"_id":"themes/anatole/layout/index.jade","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1494448682000},{"_id":"themes/anatole/layout/mixins.jade","hash":"4273d1badbe0bcc25540f5703a286fe53e7cd566","modified":1512846197000},{"_id":"themes/anatole/layout/page.jade","hash":"1a07c4556bf0db2831b338ffbc5b87eeeb1512c7","modified":1541956704880},{"_id":"themes/anatole/layout/post.jade","hash":"2f2b91b98d8f72d105211cdbf312d44ea3b1b145","modified":1494448682000},{"_id":"themes/anatole/layout/tag.jade","hash":"7017a8bae4f4a412dafb556772bdcf2cfddeb79f","modified":1494448682000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/.DS_Store","hash":"010c831aa5b4002f512a5fff44341ce774dc14db","modified":1512845805000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic1.png","hash":"0c416e6f0a1aa48c6104152a71cf8f54d58f1e6c","modified":1512832003000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic2.png","hash":"0731b5925237aea7ce27a0e952f4c2bc8ee79a94","modified":1512815994000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic3.png","hash":"8b0bdbf27dd7495464ba86b6c41b4c16d420b8aa","modified":1512832466000},{"_id":"source/_posts/processing-medium-effect/.DS_Store","hash":"3e98fb80cf1b989d1934b270a6d1a99496411a60","modified":1505434887000},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"97bde3f00234c3daa6f5832e15a68e6203fde25f","modified":1512845090000},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"772f03a2dd9fa4fed422c4eb4d5d1ace84c65580","modified":1494448682000},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1494448682000},{"_id":"themes/anatole/layout/partial/head.jade","hash":"3d6126d0b53a889a46ad61eb8cc0ab1b35446c49","modified":1494448682000},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1494448682000},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"b96b789d47e5a1553c6835d66b82759e1a6678eb","modified":1512826396000},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"4e5fdc2cd8f5029aec601e5f7146274150f86655","modified":1512824480000},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1494448682000},{"_id":"themes/anatole/source/css/style.css","hash":"e5466503fa0235084c37ad566acf7fcb5f9fb27a","modified":1512846462000},{"_id":"themes/anatole/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1494448682000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1494448682000},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1494448682000},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1494448682000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1494448682000},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1494448682000},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1494448682000},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1494448682000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1494448682000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic4.png","hash":"0ee043d7b403a0ffa07283ef2618883243d4245a","modified":1512832660000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic5.png","hash":"3e5c49f032b80a0a55cca22b11235b54f64bf0cf","modified":1512832685000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic6.jpg","hash":"ad9ef3d29d77c3c7d5d03561e2ec0e83ee9ba53b","modified":1512841970000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1494448682000},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1494448682000},{"_id":"source/_posts/interestingCSS/demo3.gif","hash":"5272b4ebaab2e81080d962821efc5ad7dd98464b","modified":1502032210000},{"_id":"source/_posts/interestingCSS/demo1.gif","hash":"baf127a84161d51657bb51a27af5fdb923686045","modified":1502032210000},{"_id":"source/_posts/processing-medium-effect/processing_image.gif","hash":"acbe7ad57dad9e05c39707a193d6a37fe156d399","modified":1505434529000},{"_id":"public/content.json","hash":"1149da2dbf1218bd6e4538d74a29cd132248334b","modified":1563210719596},{"_id":"public/about/index.html","hash":"a502267cc146eaa87df299b8cbe8d0f515e039ca","modified":1563210719605},{"_id":"public/links/index.html","hash":"e274aa0d91612ad408cd657be391edfe9c395214","modified":1563210719605},{"_id":"public/tags/index.html","hash":"38dbe38143fe38be7d502a4847c4ecc8874fea62","modified":1563210719605},{"_id":"public/2018/11/12/manage-Node-js-version-via-mvn/index.html","hash":"19e3adea149bd2b2bea05fe8f1fe2b6004e56d49","modified":1563210719606},{"_id":"public/2017/12/10/mediaMatch/index.html","hash":"8b860b2f0e51247af8357aa9e78cc20c9bb8b68b","modified":1563210719606},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/index.html","hash":"d2650de7f671fe14c5cc5ae6d1074629a4c4adf3","modified":1563210719606},{"_id":"public/2017/11/30/mongodb-command/index.html","hash":"c7847c07b49ce72eb14456c88285d67d86f4e78c","modified":1563210719606},{"_id":"public/2017/09/11/processing-medium-effect/index.html","hash":"0066813c48559c144a04983e6d749869dc38219a","modified":1563210719606},{"_id":"public/2017/08/06/SoftwareTesting/index.html","hash":"c03c1c66cd9d2e6746e682bec9e6effd848d3f9b","modified":1563210719606},{"_id":"public/archives/index.html","hash":"ad90f05248e8c9eac7b71b7f425853b8abd55281","modified":1563210719606},{"_id":"public/index.html","hash":"e7147867d72d42a475dd4fbb4c384d0855a52ef6","modified":1563210719606},{"_id":"public/page/2/index.html","hash":"3b033cf81f4ab57e8b46581c8d97239adccc2ab0","modified":1563210719606},{"_id":"public/tags/读书笔记/index.html","hash":"faafa4a2aa8b979e7236b606113f7b788b66bd59","modified":1563210719606},{"_id":"public/tags/课本摘抄/index.html","hash":"add7e16a0ccc0a7e3b0226c2cd06bb6987ed7f77","modified":1563210719606},{"_id":"public/tags/个人总结/index.html","hash":"4a1df42b50f5f6c8a8f3215c1a56e38cb8513583","modified":1563210719606},{"_id":"public/tags/每周一练/index.html","hash":"4e468a6029bf62c8af881b3bcfcc5edc8fd70bb7","modified":1563210719606},{"_id":"public/tags/转载/index.html","hash":"9f460f7f1a1f8d66f15a28b9cf57e75fb1aef18a","modified":1563210719607},{"_id":"public/tags/记录/index.html","hash":"59ee689f6d5cc6595eb455f27f617d0b274c78cc","modified":1563210719607},{"_id":"public/2019/07/15/nginx-commmand-record/index.html","hash":"1b4ee74cd587b117e000a335d12160fd66f77afe","modified":1563210719607},{"_id":"public/2018/08/01/wechat-share-and-single-page-summary/index.html","hash":"e290e0928ccb5c455237d3e34cee0526ae706a6b","modified":1563210719607},{"_id":"public/2018/07/08/0to1-build-vue-project/index.html","hash":"bbef26cc0b30e920efe2e1515284e5cdfdb406f8","modified":1563210719607},{"_id":"public/2017/08/09/JavaScript-Design-Patterns-and-Development-Practice/index.html","hash":"eb69b99b61abdd81567e25e3e5d252cad1eff13c","modified":1563210719607},{"_id":"public/2017/08/06/JavascriptDataType/index.html","hash":"8aac72861e614ee2d918f26c9bd894cf9240c152","modified":1563210719607},{"_id":"public/2017/06/25/Javascript-data-structure/index.html","hash":"8e3b12923b87501520aa4436c0b50a2617b4bf08","modified":1563210719607},{"_id":"public/2017/04/27/interestingCSS/index.html","hash":"2adf52e5f9d463382b1907d97942fc575b324c48","modified":1563210719607},{"_id":"public/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1563210719612},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1563210719612},{"_id":"public/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1563210719613},{"_id":"public/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1563210719613},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1563210719613},{"_id":"public/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1563210719613},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic1.png","hash":"0c416e6f0a1aa48c6104152a71cf8f54d58f1e6c","modified":1563210719613},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic2.png","hash":"0731b5925237aea7ce27a0e952f4c2bc8ee79a94","modified":1563210719613},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic3.png","hash":"8b0bdbf27dd7495464ba86b6c41b4c16d420b8aa","modified":1563210719613},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1563210719618},{"_id":"public/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1563210719632},{"_id":"public/css/style.css","hash":"e5466503fa0235084c37ad566acf7fcb5f9fb27a","modified":1563210719632},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1563210719632},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1563210719632},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1563210719632},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1563210719633},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic4.png","hash":"0ee043d7b403a0ffa07283ef2618883243d4245a","modified":1563210719633},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic5.png","hash":"3e5c49f032b80a0a55cca22b11235b54f64bf0cf","modified":1563210719633},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic6.jpg","hash":"ad9ef3d29d77c3c7d5d03561e2ec0e83ee9ba53b","modified":1563210719633},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1563210719663},{"_id":"public/2017/04/27/interestingCSS/demo3.gif","hash":"5272b4ebaab2e81080d962821efc5ad7dd98464b","modified":1563210719716},{"_id":"public/2017/04/27/interestingCSS/demo1.gif","hash":"baf127a84161d51657bb51a27af5fdb923686045","modified":1563210719785},{"_id":"public/2017/09/11/processing-medium-effect/processing_image.gif","hash":"acbe7ad57dad9e05c39707a193d6a37fe156d399","modified":1563210719811}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-12-09T13:02:58.000Z","_content":"\n# 我是一个","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-12-09 21:02:58\n---\n\n# 我是一个","updated":"2017-12-09T13:07:26.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjy4nau550001ts2hav54yeqf","content":"<h1 id=\"我是一个\"><a href=\"#我是一个\" class=\"headerlink\" title=\"我是一个\"></a>我是一个</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我是一个\"><a href=\"#我是一个\" class=\"headerlink\" title=\"我是一个\"></a>我是一个</h1>"},{"title":"links","date":"2017-12-09T14:48:10.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: \n---\n","updated":"2017-12-09T14:48:10.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjy4nau570003ts2hdvgic8l5","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/转载/\" title=\"转载\">转载</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>","source":"tags/index.html","raw":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/转载/\" title=\"转载\">转载</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>","date":"2018-11-11T17:16:33.686Z","updated":"2018-11-11T17:16:33.686Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cjy4nau5a0005ts2hhgu3hf6r","content":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/转载/\" title=\"转载\">转载</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>","site":{"data":{}},"excerpt":"","more":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/转载/\" title=\"转载\">转载</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>"}],"Post":[{"layout":"[post]","title":"从零到一搭建Vue项目工程（Vue全家桶、Vue测试、持续集成）","date":"2018-07-08T04:49:49.000Z","_content":"\n## 开篇前记\n入门前端有一段时间了，从大学就开始学习前端，到现在刚好毕业就整整4年，其中学习了不少东西，也新出不了少东西，前段的发展总是很快的，一不小心之前所学的技术就开始落后了。以前刚开始学的时候还在学html,css,js三件套，当然还会有JQuery，现在有些人入门都开始直接学Vue框架了。踩过很多坑。但是坑还要一个一个地爬出来，未知的东西还是要一个一个地探索，所以才有了冲动来写这篇文章，第一是为了总结我之前学过的知识和经验，比如Vue全家桶，wepback构建Vue环境等。其次是在我没有实践过的领域进行探索的同时记录下来拿，以后有需要的时候再看回这篇文章。\n\n## 摘要\n我把这篇文章的内容拆成几个版块，作为一个连载的文章。首先列一下主要章节内容：\n\n- 搭建一个运行Vue的webpack环境\n- 加入Vue全家桶\n- 编写项目工程代码\n- 总结Vue测试\n- 关于项目的持续集成\n- 项目总结\n\n因为在编写项目的时候总会附上对应的测试代码，但这样有时候需要看关于Vue测试的内容时会过于零散，所以在写完项目之后专门给了一个小节来写关于Vue的测试内容。当然如果你是从头往下看的话可以跳过这一小节。最后项目 弄好了按照国际惯例总是要总结一下经验的。\n\n## 搭建运行Vue的webpack环境\n\n### 工程目录\n\n```\n|____.gitignore\n|____index.html\n|____LICENSE\n|____package-lock.json\n|____package.json\n|____README.md\n|____src\n| |____App.vue\n| |____assets\n| |____components\n| |____main.js\n| |____view\n|____static\n|____test\n|____webpack.config.js\n```\n\n### webpack配置\n\n这是我摸索了几个钟弄出来的配置（不得不说webpack的配置是真的麻烦），以前都是懒所以直接使用vue-cli初始化出来的项目，webpack配置什么的都已经帮我配好了，这次自己动刀搭了一下才发现这么费劲，期间不断地报错，再加上由于用了4.0版本，也出现了一些坑，这里一并也记录一下，以后再遇到的时候好回头翻翻。\n\n 首先是最基础的webpack框架，不清楚的可以去到[webpack官网](https://www.webpackjs.com/configuration/#%E9%80%89%E9%A1%B9)上找（现在都已经有翻译很好的中文网啦，哪像以前那么苦还要去啃英文 (T^T) ）。当然我们也只会用到其中的几个属性。\n\n```\nconst path = require('path')\nmodule.exports = {\n  entry: '',\n  output: {},\n  module: {\n  \trules: []\n  },\n  plugins: []\n}\n```\n\nOK,这就完成了webpack最基本的框架，接下来我们要分别搭建不同方式启动webpack的方案。（其实这两者在实现原理上本没有什么区别，而对于我们使用者来说区别最大的大概就是工程目录的划分和关于wepback-dev-server的配置）\n\n### 基于webpack-dev-server插件来启动webpack\n\n基于`webpack-dev-server`这种方式启动webpack，我们首先把之前的webpack的配置文件命名为`webpack.config.js`并放在项目的根目录下。然后在`package.json`里的`script`对象添加一个`dev`属性，并在后面添加脚本`webpack-dev-server --inline --hot`再保存。例如：\n\n```\n// package.json\n\n{\n  ...\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  ...\n}\n```\n\n然后我们在webpack.config.js文件里添加devServer配置：\n\n```\n// webpack.config.js\n\nconst path = require('path')\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  module: {\n    rules: []\n  },\n  plugins: [],\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    // 确保 publicPath 总是以斜杠(/)开头和结尾。\n    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值\n    // publicPath: \"/\",\n    historyApiFallback: true,\n    compress: true,\n    proxy: { // proxy URLs to backend development server\n      // '/api': 'http://localhost:3000',\n      // '/api': {\n      //   target: 'http://localhost:3000',\n      //   pathRewrite: {'^/api' : ''}\n      // }\n    },\n    hot: true,\n    inline: true\n  },\n  devtool: '#eval-source-map'\n}\n```\n\n这样就可以把webpack-dev-server启动起来啦~~\n\n### 基于node + express 方式来启动webpack\n\n### 基本可以运行Vue项目的webpack配置\n\n完成了上面的步骤之后，接下来就是配置vue相关的东西了，先回想在使用vue开发的时候，我们会新建一个vue后缀的文件，所以我们就需要一个loader来解析和读取.vue文件的内容。先安装：\n\n```\nnpm install --save-dev vue-loader vue-template-compiler\n```\n\n然后我们再在wepback配置中的module.rules中使用：\n\n```\n// webpack.config.js/webpack.base.conf.js\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {}\n      }\n    ]\n  },\n  ...\n```\n\n至于这里为什么要安装`vue-template-compiler`，是因为单纯使用`vue-loader`启动的时候会报错，提示在没有`vue-template-compiler`的情况下使用`vue-loader`，我在网上查了一下也有人写了[blog](https://blog.csdn.net/cominglately/article/details/80555210)说明了这一情况，意思大概是升级到webpack 4.0之后会出现的问题。为了解决这个问题我们要在webpack配置上使用一下。\n\n```\n// webpack.config.js/webpack.base.conf.js\n\nconst path = require('path')\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {}\n      }\n    ]\n  },\n  plugins: [\n    new VueLoaderPlugin()\n  ],\n  ...\n```\n现在就可以读vue文件了，接下来就是对vue文件里的css、非标准的js、图片分别配置，也让webpack可以有能力解析。\n\n解析css（css-loader是解析css的，style-loader是把css以<style></style>内嵌的方式注入到html中）:\n```\nnpm install --save-dev style-loader css-loader\n```\n\n解析非标准的js（[使用babel](https://www.babeljs.cn/docs/setup/#installation)）:\n```\nnpm install --save-dev babel-loader babel-preset-env\n```\n\n解析img:\n```\nnpm install --save-dev file-loader\n```\n\n然后再分别写到rules里面，就完成了。整个配置如下：\n\n```\n// webpack.config.js/webpack.base.conf.js\n\nconst path = require('path')\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  module: {\n    rules: [{\n        test: /\\.css$/,\n        use: [\n          'vue-style-loader',\n          'css-loader'\n        ]\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {}\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new VueLoaderPlugin()\n  ],\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    // 确保 publicPath 总是以斜杠(/)开头和结尾。\n    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值\n    // publicPath: \"/\",\n    historyApiFallback: true,\n    compress: true,\n    proxy: { // proxy URLs to backend development server\n      // '/api': 'http://localhost:3000',\n      // '/api': {\n      //   target: 'http://localhost:3000',\n      //   pathRewrite: {'^/api' : ''}\n      // }\n    },\n    hot: true,\n    inline: true\n  },\n  devtool: '#eval-source-map'\n}\n```\n\n### 项目优化\n\n按照刚刚的步骤进行操作的话，会发现当项目运行起来的时候webpack会报如下错误，现在慢慢地按照提示来对项目进行优化。\n\n[![qqEhK.png](https://s1.ax2x.com/2018/07/19/qqEhK.png)](https://simimg.com/i/qqEhK)\n\n#### WARNING in configuration\n\n```\nThe 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.\nYou can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/\n```\n翻译成中文的意思大概是：`mode`这个选项没有被设置，webpack将会默认设置为`production`。你可以把`mode`选项设置为`development`或者`production`，以让webpack以指定的环境启动。你也可以设置为`none`以禁用任何的默认行为。[了解更多：https://webpack.js.org/concepts/mode/](https://webpack.js.org/concepts/mode/)。\n\n这个问题主要是告诉我们要让webpack知道现是要按什么环境去构建应用，通常我们会通过一个配置文件来记录所有会用到的环境，然后在调用的时候通过传入参数的形式来指定使用哪一个环境。\n\n我们新建一个目录`config`，在目录里面再分别建立不同环境的配置，如：\n\n```\n├── config\n│   ├── dev.js\n│   ├── index.js\n│   ├── prod.js\n│   └── test.js\n```\n\n我们分别区别了开发环境、生产环境、和测试环境，然后再通过一个index.js来判断当前使用哪一个环境：\n\n```\n// index.js\nconst prod = require('./prod')\nconst dev = require('./dev')\nconst test = require('./test')\n\nlet env = prod;\n\nswitch (process.env.NODE_ENV) {\n  case 'development':\n    env = dev;\n    break;\n    // case 'test':\n    //   env = test;\n    //   break;\n  default:\n    env = prod;\n}\n\nmodule.exports = env\n```\n\n这里的`process.env`是node.js的一个环境变量对象，挂载到这个对象上的属性可以在node的全局运行环境中访问到，而`NODE_ENV`是node社区约定作为当前运行环境的属性（当然你也可以用其它属性代替）。\n\n为了我们在启动的时候可以为node指定当前运行环境，我们新加入一个依赖包叫[cross-env](https://www.npmjs.com/package/cross-env)，然后修改`package.json`文件里的运行脚本命令，添加`cross-env NODE_ENV=[prototype]`在命令前面即可，如：\n\n```\n// package.json\n\n...\n\"scripts\": {\n  \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --inline --hot\",\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n...\n```\n\n#### WARNING in asset size limit\n\n```\nThe following asset(s) exceed the recommended size limit (244 KiB).\nThis can impact web performance.\nAssets:\n  build.js (2.13 MiB)\n```\n\n#### WARNING in entrypoint size limit\n\n```\nThe following entrypoint(s) combined asset size exceeds the recommended limit (244 KiB). This can impact web performance.\nEntrypoints:\n  main (2.13 MiB)\n      build.js\n      0.9256098444c5c2f2e51c.hot-update.js\n```\n\n#### WARNING in webpack performance recommendations\n\n```\nYou can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.\nFor more info visit https://webpack.js.org/guides/code-splitting/\n```\n\n","source":"_posts/0to1-build-vue-project.md","raw":"---\nlayout: '[post]'\ntitle: 从零到一搭建Vue项目工程（Vue全家桶、Vue测试、持续集成）\ndate: 2018-07-08 12:49:49\ntags:\n---\n\n## 开篇前记\n入门前端有一段时间了，从大学就开始学习前端，到现在刚好毕业就整整4年，其中学习了不少东西，也新出不了少东西，前段的发展总是很快的，一不小心之前所学的技术就开始落后了。以前刚开始学的时候还在学html,css,js三件套，当然还会有JQuery，现在有些人入门都开始直接学Vue框架了。踩过很多坑。但是坑还要一个一个地爬出来，未知的东西还是要一个一个地探索，所以才有了冲动来写这篇文章，第一是为了总结我之前学过的知识和经验，比如Vue全家桶，wepback构建Vue环境等。其次是在我没有实践过的领域进行探索的同时记录下来拿，以后有需要的时候再看回这篇文章。\n\n## 摘要\n我把这篇文章的内容拆成几个版块，作为一个连载的文章。首先列一下主要章节内容：\n\n- 搭建一个运行Vue的webpack环境\n- 加入Vue全家桶\n- 编写项目工程代码\n- 总结Vue测试\n- 关于项目的持续集成\n- 项目总结\n\n因为在编写项目的时候总会附上对应的测试代码，但这样有时候需要看关于Vue测试的内容时会过于零散，所以在写完项目之后专门给了一个小节来写关于Vue的测试内容。当然如果你是从头往下看的话可以跳过这一小节。最后项目 弄好了按照国际惯例总是要总结一下经验的。\n\n## 搭建运行Vue的webpack环境\n\n### 工程目录\n\n```\n|____.gitignore\n|____index.html\n|____LICENSE\n|____package-lock.json\n|____package.json\n|____README.md\n|____src\n| |____App.vue\n| |____assets\n| |____components\n| |____main.js\n| |____view\n|____static\n|____test\n|____webpack.config.js\n```\n\n### webpack配置\n\n这是我摸索了几个钟弄出来的配置（不得不说webpack的配置是真的麻烦），以前都是懒所以直接使用vue-cli初始化出来的项目，webpack配置什么的都已经帮我配好了，这次自己动刀搭了一下才发现这么费劲，期间不断地报错，再加上由于用了4.0版本，也出现了一些坑，这里一并也记录一下，以后再遇到的时候好回头翻翻。\n\n 首先是最基础的webpack框架，不清楚的可以去到[webpack官网](https://www.webpackjs.com/configuration/#%E9%80%89%E9%A1%B9)上找（现在都已经有翻译很好的中文网啦，哪像以前那么苦还要去啃英文 (T^T) ）。当然我们也只会用到其中的几个属性。\n\n```\nconst path = require('path')\nmodule.exports = {\n  entry: '',\n  output: {},\n  module: {\n  \trules: []\n  },\n  plugins: []\n}\n```\n\nOK,这就完成了webpack最基本的框架，接下来我们要分别搭建不同方式启动webpack的方案。（其实这两者在实现原理上本没有什么区别，而对于我们使用者来说区别最大的大概就是工程目录的划分和关于wepback-dev-server的配置）\n\n### 基于webpack-dev-server插件来启动webpack\n\n基于`webpack-dev-server`这种方式启动webpack，我们首先把之前的webpack的配置文件命名为`webpack.config.js`并放在项目的根目录下。然后在`package.json`里的`script`对象添加一个`dev`属性，并在后面添加脚本`webpack-dev-server --inline --hot`再保存。例如：\n\n```\n// package.json\n\n{\n  ...\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  ...\n}\n```\n\n然后我们在webpack.config.js文件里添加devServer配置：\n\n```\n// webpack.config.js\n\nconst path = require('path')\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  module: {\n    rules: []\n  },\n  plugins: [],\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    // 确保 publicPath 总是以斜杠(/)开头和结尾。\n    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值\n    // publicPath: \"/\",\n    historyApiFallback: true,\n    compress: true,\n    proxy: { // proxy URLs to backend development server\n      // '/api': 'http://localhost:3000',\n      // '/api': {\n      //   target: 'http://localhost:3000',\n      //   pathRewrite: {'^/api' : ''}\n      // }\n    },\n    hot: true,\n    inline: true\n  },\n  devtool: '#eval-source-map'\n}\n```\n\n这样就可以把webpack-dev-server启动起来啦~~\n\n### 基于node + express 方式来启动webpack\n\n### 基本可以运行Vue项目的webpack配置\n\n完成了上面的步骤之后，接下来就是配置vue相关的东西了，先回想在使用vue开发的时候，我们会新建一个vue后缀的文件，所以我们就需要一个loader来解析和读取.vue文件的内容。先安装：\n\n```\nnpm install --save-dev vue-loader vue-template-compiler\n```\n\n然后我们再在wepback配置中的module.rules中使用：\n\n```\n// webpack.config.js/webpack.base.conf.js\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {}\n      }\n    ]\n  },\n  ...\n```\n\n至于这里为什么要安装`vue-template-compiler`，是因为单纯使用`vue-loader`启动的时候会报错，提示在没有`vue-template-compiler`的情况下使用`vue-loader`，我在网上查了一下也有人写了[blog](https://blog.csdn.net/cominglately/article/details/80555210)说明了这一情况，意思大概是升级到webpack 4.0之后会出现的问题。为了解决这个问题我们要在webpack配置上使用一下。\n\n```\n// webpack.config.js/webpack.base.conf.js\n\nconst path = require('path')\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {}\n      }\n    ]\n  },\n  plugins: [\n    new VueLoaderPlugin()\n  ],\n  ...\n```\n现在就可以读vue文件了，接下来就是对vue文件里的css、非标准的js、图片分别配置，也让webpack可以有能力解析。\n\n解析css（css-loader是解析css的，style-loader是把css以<style></style>内嵌的方式注入到html中）:\n```\nnpm install --save-dev style-loader css-loader\n```\n\n解析非标准的js（[使用babel](https://www.babeljs.cn/docs/setup/#installation)）:\n```\nnpm install --save-dev babel-loader babel-preset-env\n```\n\n解析img:\n```\nnpm install --save-dev file-loader\n```\n\n然后再分别写到rules里面，就完成了。整个配置如下：\n\n```\n// webpack.config.js/webpack.base.conf.js\n\nconst path = require('path')\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\nmodule.exports = {\n  entry: './src/main.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    publicPath: '/dist/',\n    filename: 'build.js'\n  },\n  module: {\n    rules: [{\n        test: /\\.css$/,\n        use: [\n          'vue-style-loader',\n          'css-loader'\n        ]\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {}\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  plugins: [\n    new VueLoaderPlugin()\n  ],\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    // 确保 publicPath 总是以斜杠(/)开头和结尾。\n    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值\n    // publicPath: \"/\",\n    historyApiFallback: true,\n    compress: true,\n    proxy: { // proxy URLs to backend development server\n      // '/api': 'http://localhost:3000',\n      // '/api': {\n      //   target: 'http://localhost:3000',\n      //   pathRewrite: {'^/api' : ''}\n      // }\n    },\n    hot: true,\n    inline: true\n  },\n  devtool: '#eval-source-map'\n}\n```\n\n### 项目优化\n\n按照刚刚的步骤进行操作的话，会发现当项目运行起来的时候webpack会报如下错误，现在慢慢地按照提示来对项目进行优化。\n\n[![qqEhK.png](https://s1.ax2x.com/2018/07/19/qqEhK.png)](https://simimg.com/i/qqEhK)\n\n#### WARNING in configuration\n\n```\nThe 'mode' option has not been set, webpack will fallback to 'production' for this value. Set 'mode' option to 'development' or 'production' to enable defaults for each environment.\nYou can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/\n```\n翻译成中文的意思大概是：`mode`这个选项没有被设置，webpack将会默认设置为`production`。你可以把`mode`选项设置为`development`或者`production`，以让webpack以指定的环境启动。你也可以设置为`none`以禁用任何的默认行为。[了解更多：https://webpack.js.org/concepts/mode/](https://webpack.js.org/concepts/mode/)。\n\n这个问题主要是告诉我们要让webpack知道现是要按什么环境去构建应用，通常我们会通过一个配置文件来记录所有会用到的环境，然后在调用的时候通过传入参数的形式来指定使用哪一个环境。\n\n我们新建一个目录`config`，在目录里面再分别建立不同环境的配置，如：\n\n```\n├── config\n│   ├── dev.js\n│   ├── index.js\n│   ├── prod.js\n│   └── test.js\n```\n\n我们分别区别了开发环境、生产环境、和测试环境，然后再通过一个index.js来判断当前使用哪一个环境：\n\n```\n// index.js\nconst prod = require('./prod')\nconst dev = require('./dev')\nconst test = require('./test')\n\nlet env = prod;\n\nswitch (process.env.NODE_ENV) {\n  case 'development':\n    env = dev;\n    break;\n    // case 'test':\n    //   env = test;\n    //   break;\n  default:\n    env = prod;\n}\n\nmodule.exports = env\n```\n\n这里的`process.env`是node.js的一个环境变量对象，挂载到这个对象上的属性可以在node的全局运行环境中访问到，而`NODE_ENV`是node社区约定作为当前运行环境的属性（当然你也可以用其它属性代替）。\n\n为了我们在启动的时候可以为node指定当前运行环境，我们新加入一个依赖包叫[cross-env](https://www.npmjs.com/package/cross-env)，然后修改`package.json`文件里的运行脚本命令，添加`cross-env NODE_ENV=[prototype]`在命令前面即可，如：\n\n```\n// package.json\n\n...\n\"scripts\": {\n  \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --inline --hot\",\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n...\n```\n\n#### WARNING in asset size limit\n\n```\nThe following asset(s) exceed the recommended size limit (244 KiB).\nThis can impact web performance.\nAssets:\n  build.js (2.13 MiB)\n```\n\n#### WARNING in entrypoint size limit\n\n```\nThe following entrypoint(s) combined asset size exceeds the recommended limit (244 KiB). This can impact web performance.\nEntrypoints:\n  main (2.13 MiB)\n      build.js\n      0.9256098444c5c2f2e51c.hot-update.js\n```\n\n#### WARNING in webpack performance recommendations\n\n```\nYou can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.\nFor more info visit https://webpack.js.org/guides/code-splitting/\n```\n\n","slug":"0to1-build-vue-project","published":1,"updated":"2018-08-01T11:32:37.000Z","comments":1,"photos":[],"link":"","_id":"cjy4nau510000ts2hqewc7m5z","content":"<h2 id=\"开篇前记\"><a href=\"#开篇前记\" class=\"headerlink\" title=\"开篇前记\"></a>开篇前记</h2><p>入门前端有一段时间了，从大学就开始学习前端，到现在刚好毕业就整整4年，其中学习了不少东西，也新出不了少东西，前段的发展总是很快的，一不小心之前所学的技术就开始落后了。以前刚开始学的时候还在学html,css,js三件套，当然还会有JQuery，现在有些人入门都开始直接学Vue框架了。踩过很多坑。但是坑还要一个一个地爬出来，未知的东西还是要一个一个地探索，所以才有了冲动来写这篇文章，第一是为了总结我之前学过的知识和经验，比如Vue全家桶，wepback构建Vue环境等。其次是在我没有实践过的领域进行探索的同时记录下来拿，以后有需要的时候再看回这篇文章。</p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>我把这篇文章的内容拆成几个版块，作为一个连载的文章。首先列一下主要章节内容：</p>\n<ul>\n<li>搭建一个运行Vue的webpack环境</li>\n<li>加入Vue全家桶</li>\n<li>编写项目工程代码</li>\n<li>总结Vue测试</li>\n<li>关于项目的持续集成</li>\n<li>项目总结</li>\n</ul>\n<p>因为在编写项目的时候总会附上对应的测试代码，但这样有时候需要看关于Vue测试的内容时会过于零散，所以在写完项目之后专门给了一个小节来写关于Vue的测试内容。当然如果你是从头往下看的话可以跳过这一小节。最后项目 弄好了按照国际惯例总是要总结一下经验的。</p>\n<h2 id=\"搭建运行Vue的webpack环境\"><a href=\"#搭建运行Vue的webpack环境\" class=\"headerlink\" title=\"搭建运行Vue的webpack环境\"></a>搭建运行Vue的webpack环境</h2><h3 id=\"工程目录\"><a href=\"#工程目录\" class=\"headerlink\" title=\"工程目录\"></a>工程目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">|____.gitignore</div><div class=\"line\">|____index.html</div><div class=\"line\">|____LICENSE</div><div class=\"line\">|____package-lock.json</div><div class=\"line\">|____package.json</div><div class=\"line\">|____README.md</div><div class=\"line\">|____src</div><div class=\"line\">| |____App.vue</div><div class=\"line\">| |____assets</div><div class=\"line\">| |____components</div><div class=\"line\">| |____main.js</div><div class=\"line\">| |____view</div><div class=\"line\">|____static</div><div class=\"line\">|____test</div><div class=\"line\">|____webpack.config.js</div></pre></td></tr></table></figure>\n<h3 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h3><p>这是我摸索了几个钟弄出来的配置（不得不说webpack的配置是真的麻烦），以前都是懒所以直接使用vue-cli初始化出来的项目，webpack配置什么的都已经帮我配好了，这次自己动刀搭了一下才发现这么费劲，期间不断地报错，再加上由于用了4.0版本，也出现了一些坑，这里一并也记录一下，以后再遇到的时候好回头翻翻。</p>\n<p> 首先是最基础的webpack框架，不清楚的可以去到<a href=\"https://www.webpackjs.com/configuration/#%E9%80%89%E9%A1%B9\" target=\"_blank\" rel=\"external\">webpack官网</a>上找（现在都已经有翻译很好的中文网啦，哪像以前那么苦还要去啃英文 (T^T) ）。当然我们也只会用到其中的几个属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;&apos;,</div><div class=\"line\">  output: &#123;&#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">  \trules: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: []</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>OK,这就完成了webpack最基本的框架，接下来我们要分别搭建不同方式启动webpack的方案。（其实这两者在实现原理上本没有什么区别，而对于我们使用者来说区别最大的大概就是工程目录的划分和关于wepback-dev-server的配置）</p>\n<h3 id=\"基于webpack-dev-server插件来启动webpack\"><a href=\"#基于webpack-dev-server插件来启动webpack\" class=\"headerlink\" title=\"基于webpack-dev-server插件来启动webpack\"></a>基于webpack-dev-server插件来启动webpack</h3><p>基于<code>webpack-dev-server</code>这种方式启动webpack，我们首先把之前的webpack的配置文件命名为<code>webpack.config.js</code>并放在项目的根目录下。然后在<code>package.json</code>里的<code>script</code>对象添加一个<code>dev</code>属性，并在后面添加脚本<code>webpack-dev-server --inline --hot</code>再保存。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;dev&quot;: &quot;webpack-dev-server --inline --hot&quot;,</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们在webpack.config.js文件里添加devServer配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\"></div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;./src/main.js&apos;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class=\"line\">    publicPath: &apos;/dist/&apos;,</div><div class=\"line\">    filename: &apos;build.js&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [],</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    // contentBase: path.join(__dirname, &quot;dist&quot;),</div><div class=\"line\">    // 确保 publicPath 总是以斜杠(/)开头和结尾。</div><div class=\"line\">    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值</div><div class=\"line\">    // publicPath: &quot;/&quot;,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    compress: true,</div><div class=\"line\">    proxy: &#123; // proxy URLs to backend development server</div><div class=\"line\">      // &apos;/api&apos;: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      // &apos;/api&apos;: &#123;</div><div class=\"line\">      //   target: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      //   pathRewrite: &#123;&apos;^/api&apos; : &apos;&apos;&#125;</div><div class=\"line\">      // &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    hot: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devtool: &apos;#eval-source-map&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就可以把webpack-dev-server启动起来啦~~</p>\n<h3 id=\"基于node-express-方式来启动webpack\"><a href=\"#基于node-express-方式来启动webpack\" class=\"headerlink\" title=\"基于node + express 方式来启动webpack\"></a>基于node + express 方式来启动webpack</h3><h3 id=\"基本可以运行Vue项目的webpack配置\"><a href=\"#基本可以运行Vue项目的webpack配置\" class=\"headerlink\" title=\"基本可以运行Vue项目的webpack配置\"></a>基本可以运行Vue项目的webpack配置</h3><p>完成了上面的步骤之后，接下来就是配置vue相关的东西了，先回想在使用vue开发的时候，我们会新建一个vue后缀的文件，所以我们就需要一个loader来解析和读取.vue文件的内容。先安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev vue-loader vue-template-compiler</div></pre></td></tr></table></figure>\n<p>然后我们再在wepback配置中的module.rules中使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js/webpack.base.conf.js</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue-loader&apos;,</div><div class=\"line\">        options: &#123;&#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div></pre></td></tr></table></figure>\n<p>至于这里为什么要安装<code>vue-template-compiler</code>，是因为单纯使用<code>vue-loader</code>启动的时候会报错，提示在没有<code>vue-template-compiler</code>的情况下使用<code>vue-loader</code>，我在网上查了一下也有人写了<a href=\"https://blog.csdn.net/cominglately/article/details/80555210\" target=\"_blank\" rel=\"external\">blog</a>说明了这一情况，意思大概是升级到webpack 4.0之后会出现的问题。为了解决这个问题我们要在webpack配置上使用一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js/webpack.base.conf.js</div><div class=\"line\"></div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue-loader&apos;,</div><div class=\"line\">        options: &#123;&#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [</div><div class=\"line\">    new VueLoaderPlugin()</div><div class=\"line\">  ],</div><div class=\"line\">  ...</div></pre></td></tr></table></figure>\n<p>现在就可以读vue文件了，接下来就是对vue文件里的css、非标准的js、图片分别配置，也让webpack可以有能力解析。</p>\n<p>解析css（css-loader是解析css的，style-loader是把css以<style></style>内嵌的方式注入到html中）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure></p>\n<p>解析非标准的js（<a href=\"https://www.babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"external\">使用babel</a>）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-loader babel-preset-env</div></pre></td></tr></table></figure></p>\n<p>解析img:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev file-loader</div></pre></td></tr></table></figure></p>\n<p>然后再分别写到rules里面，就完成了。整个配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js/webpack.base.conf.js</div><div class=\"line\"></div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;./src/main.js&apos;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class=\"line\">    publicPath: &apos;/dist/&apos;,</div><div class=\"line\">    filename: &apos;build.js&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: [&#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        use: [</div><div class=\"line\">          &apos;vue-style-loader&apos;,</div><div class=\"line\">          &apos;css-loader&apos;</div><div class=\"line\">        ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        loader: &apos;babel-loader&apos;,</div><div class=\"line\">        exclude: /node_modules/</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue-loader&apos;,</div><div class=\"line\">        options: &#123;&#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.(png|jpg|gif|svg)$/,</div><div class=\"line\">        loader: &apos;file-loader&apos;,</div><div class=\"line\">        options: &#123;</div><div class=\"line\">          name: &apos;[name].[ext]?[hash]&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [</div><div class=\"line\">    new VueLoaderPlugin()</div><div class=\"line\">  ],</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    // contentBase: path.join(__dirname, &quot;dist&quot;),</div><div class=\"line\">    // 确保 publicPath 总是以斜杠(/)开头和结尾。</div><div class=\"line\">    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值</div><div class=\"line\">    // publicPath: &quot;/&quot;,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    compress: true,</div><div class=\"line\">    proxy: &#123; // proxy URLs to backend development server</div><div class=\"line\">      // &apos;/api&apos;: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      // &apos;/api&apos;: &#123;</div><div class=\"line\">      //   target: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      //   pathRewrite: &#123;&apos;^/api&apos; : &apos;&apos;&#125;</div><div class=\"line\">      // &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    hot: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devtool: &apos;#eval-source-map&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"项目优化\"><a href=\"#项目优化\" class=\"headerlink\" title=\"项目优化\"></a>项目优化</h3><p>按照刚刚的步骤进行操作的话，会发现当项目运行起来的时候webpack会报如下错误，现在慢慢地按照提示来对项目进行优化。</p>\n<p><a href=\"https://simimg.com/i/qqEhK\" target=\"_blank\" rel=\"external\"><img src=\"https://s1.ax2x.com/2018/07/19/qqEhK.png\" alt=\"qqEhK.png\"></a></p>\n<h4 id=\"WARNING-in-configuration\"><a href=\"#WARNING-in-configuration\" class=\"headerlink\" title=\"WARNING in configuration\"></a>WARNING in configuration</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The &apos;mode&apos; option has not been set, webpack will fallback to &apos;production&apos; for this value. Set &apos;mode&apos; option to &apos;development&apos; or &apos;production&apos; to enable defaults for each environment.</div><div class=\"line\">You can also set it to &apos;none&apos; to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/</div></pre></td></tr></table></figure>\n<p>翻译成中文的意思大概是：<code>mode</code>这个选项没有被设置，webpack将会默认设置为<code>production</code>。你可以把<code>mode</code>选项设置为<code>development</code>或者<code>production</code>，以让webpack以指定的环境启动。你也可以设置为<code>none</code>以禁用任何的默认行为。<a href=\"https://webpack.js.org/concepts/mode/\" target=\"_blank\" rel=\"external\">了解更多：https://webpack.js.org/concepts/mode/</a>。</p>\n<p>这个问题主要是告诉我们要让webpack知道现是要按什么环境去构建应用，通常我们会通过一个配置文件来记录所有会用到的环境，然后在调用的时候通过传入参数的形式来指定使用哪一个环境。</p>\n<p>我们新建一个目录<code>config</code>，在目录里面再分别建立不同环境的配置，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── config</div><div class=\"line\">│   ├── dev.js</div><div class=\"line\">│   ├── index.js</div><div class=\"line\">│   ├── prod.js</div><div class=\"line\">│   └── test.js</div></pre></td></tr></table></figure>\n<p>我们分别区别了开发环境、生产环境、和测试环境，然后再通过一个index.js来判断当前使用哪一个环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// index.js</div><div class=\"line\">const prod = require(&apos;./prod&apos;)</div><div class=\"line\">const dev = require(&apos;./dev&apos;)</div><div class=\"line\">const test = require(&apos;./test&apos;)</div><div class=\"line\"></div><div class=\"line\">let env = prod;</div><div class=\"line\"></div><div class=\"line\">switch (process.env.NODE_ENV) &#123;</div><div class=\"line\">  case &apos;development&apos;:</div><div class=\"line\">    env = dev;</div><div class=\"line\">    break;</div><div class=\"line\">    // case &apos;test&apos;:</div><div class=\"line\">    //   env = test;</div><div class=\"line\">    //   break;</div><div class=\"line\">  default:</div><div class=\"line\">    env = prod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = env</div></pre></td></tr></table></figure>\n<p>这里的<code>process.env</code>是node.js的一个环境变量对象，挂载到这个对象上的属性可以在node的全局运行环境中访问到，而<code>NODE_ENV</code>是node社区约定作为当前运行环境的属性（当然你也可以用其它属性代替）。</p>\n<p>为了我们在启动的时候可以为node指定当前运行环境，我们新加入一个依赖包叫<a href=\"https://www.npmjs.com/package/cross-env\" target=\"_blank\" rel=\"external\">cross-env</a>，然后修改<code>package.json</code>文件里的运行脚本命令，添加<code>cross-env NODE_ENV=[prototype]</code>在命令前面即可，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --inline --hot&quot;,</div><div class=\"line\">  &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">&#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"WARNING-in-asset-size-limit\"><a href=\"#WARNING-in-asset-size-limit\" class=\"headerlink\" title=\"WARNING in asset size limit\"></a>WARNING in asset size limit</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">The following asset(s) exceed the recommended size limit (244 KiB).</div><div class=\"line\">This can impact web performance.</div><div class=\"line\">Assets:</div><div class=\"line\">  build.js (2.13 MiB)</div></pre></td></tr></table></figure>\n<h4 id=\"WARNING-in-entrypoint-size-limit\"><a href=\"#WARNING-in-entrypoint-size-limit\" class=\"headerlink\" title=\"WARNING in entrypoint size limit\"></a>WARNING in entrypoint size limit</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">The following entrypoint(s) combined asset size exceeds the recommended limit (244 KiB). This can impact web performance.</div><div class=\"line\">Entrypoints:</div><div class=\"line\">  main (2.13 MiB)</div><div class=\"line\">      build.js</div><div class=\"line\">      0.9256098444c5c2f2e51c.hot-update.js</div></pre></td></tr></table></figure>\n<h4 id=\"WARNING-in-webpack-performance-recommendations\"><a href=\"#WARNING-in-webpack-performance-recommendations\" class=\"headerlink\" title=\"WARNING in webpack performance recommendations\"></a>WARNING in webpack performance recommendations</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">You can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.</div><div class=\"line\">For more info visit https://webpack.js.org/guides/code-splitting/</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开篇前记\"><a href=\"#开篇前记\" class=\"headerlink\" title=\"开篇前记\"></a>开篇前记</h2><p>入门前端有一段时间了，从大学就开始学习前端，到现在刚好毕业就整整4年，其中学习了不少东西，也新出不了少东西，前段的发展总是很快的，一不小心之前所学的技术就开始落后了。以前刚开始学的时候还在学html,css,js三件套，当然还会有JQuery，现在有些人入门都开始直接学Vue框架了。踩过很多坑。但是坑还要一个一个地爬出来，未知的东西还是要一个一个地探索，所以才有了冲动来写这篇文章，第一是为了总结我之前学过的知识和经验，比如Vue全家桶，wepback构建Vue环境等。其次是在我没有实践过的领域进行探索的同时记录下来拿，以后有需要的时候再看回这篇文章。</p>\n<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>我把这篇文章的内容拆成几个版块，作为一个连载的文章。首先列一下主要章节内容：</p>\n<ul>\n<li>搭建一个运行Vue的webpack环境</li>\n<li>加入Vue全家桶</li>\n<li>编写项目工程代码</li>\n<li>总结Vue测试</li>\n<li>关于项目的持续集成</li>\n<li>项目总结</li>\n</ul>\n<p>因为在编写项目的时候总会附上对应的测试代码，但这样有时候需要看关于Vue测试的内容时会过于零散，所以在写完项目之后专门给了一个小节来写关于Vue的测试内容。当然如果你是从头往下看的话可以跳过这一小节。最后项目 弄好了按照国际惯例总是要总结一下经验的。</p>\n<h2 id=\"搭建运行Vue的webpack环境\"><a href=\"#搭建运行Vue的webpack环境\" class=\"headerlink\" title=\"搭建运行Vue的webpack环境\"></a>搭建运行Vue的webpack环境</h2><h3 id=\"工程目录\"><a href=\"#工程目录\" class=\"headerlink\" title=\"工程目录\"></a>工程目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">|____.gitignore</div><div class=\"line\">|____index.html</div><div class=\"line\">|____LICENSE</div><div class=\"line\">|____package-lock.json</div><div class=\"line\">|____package.json</div><div class=\"line\">|____README.md</div><div class=\"line\">|____src</div><div class=\"line\">| |____App.vue</div><div class=\"line\">| |____assets</div><div class=\"line\">| |____components</div><div class=\"line\">| |____main.js</div><div class=\"line\">| |____view</div><div class=\"line\">|____static</div><div class=\"line\">|____test</div><div class=\"line\">|____webpack.config.js</div></pre></td></tr></table></figure>\n<h3 id=\"webpack配置\"><a href=\"#webpack配置\" class=\"headerlink\" title=\"webpack配置\"></a>webpack配置</h3><p>这是我摸索了几个钟弄出来的配置（不得不说webpack的配置是真的麻烦），以前都是懒所以直接使用vue-cli初始化出来的项目，webpack配置什么的都已经帮我配好了，这次自己动刀搭了一下才发现这么费劲，期间不断地报错，再加上由于用了4.0版本，也出现了一些坑，这里一并也记录一下，以后再遇到的时候好回头翻翻。</p>\n<p> 首先是最基础的webpack框架，不清楚的可以去到<a href=\"https://www.webpackjs.com/configuration/#%E9%80%89%E9%A1%B9\" target=\"_blank\" rel=\"external\">webpack官网</a>上找（现在都已经有翻译很好的中文网啦，哪像以前那么苦还要去啃英文 (T^T) ）。当然我们也只会用到其中的几个属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;&apos;,</div><div class=\"line\">  output: &#123;&#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">  \trules: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: []</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>OK,这就完成了webpack最基本的框架，接下来我们要分别搭建不同方式启动webpack的方案。（其实这两者在实现原理上本没有什么区别，而对于我们使用者来说区别最大的大概就是工程目录的划分和关于wepback-dev-server的配置）</p>\n<h3 id=\"基于webpack-dev-server插件来启动webpack\"><a href=\"#基于webpack-dev-server插件来启动webpack\" class=\"headerlink\" title=\"基于webpack-dev-server插件来启动webpack\"></a>基于webpack-dev-server插件来启动webpack</h3><p>基于<code>webpack-dev-server</code>这种方式启动webpack，我们首先把之前的webpack的配置文件命名为<code>webpack.config.js</code>并放在项目的根目录下。然后在<code>package.json</code>里的<code>script</code>对象添加一个<code>dev</code>属性，并在后面添加脚本<code>webpack-dev-server --inline --hot</code>再保存。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;dev&quot;: &quot;webpack-dev-server --inline --hot&quot;,</div><div class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们在webpack.config.js文件里添加devServer配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\"></div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;./src/main.js&apos;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class=\"line\">    publicPath: &apos;/dist/&apos;,</div><div class=\"line\">    filename: &apos;build.js&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: []</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [],</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    // contentBase: path.join(__dirname, &quot;dist&quot;),</div><div class=\"line\">    // 确保 publicPath 总是以斜杠(/)开头和结尾。</div><div class=\"line\">    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值</div><div class=\"line\">    // publicPath: &quot;/&quot;,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    compress: true,</div><div class=\"line\">    proxy: &#123; // proxy URLs to backend development server</div><div class=\"line\">      // &apos;/api&apos;: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      // &apos;/api&apos;: &#123;</div><div class=\"line\">      //   target: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      //   pathRewrite: &#123;&apos;^/api&apos; : &apos;&apos;&#125;</div><div class=\"line\">      // &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    hot: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devtool: &apos;#eval-source-map&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就可以把webpack-dev-server启动起来啦~~</p>\n<h3 id=\"基于node-express-方式来启动webpack\"><a href=\"#基于node-express-方式来启动webpack\" class=\"headerlink\" title=\"基于node + express 方式来启动webpack\"></a>基于node + express 方式来启动webpack</h3><h3 id=\"基本可以运行Vue项目的webpack配置\"><a href=\"#基本可以运行Vue项目的webpack配置\" class=\"headerlink\" title=\"基本可以运行Vue项目的webpack配置\"></a>基本可以运行Vue项目的webpack配置</h3><p>完成了上面的步骤之后，接下来就是配置vue相关的东西了，先回想在使用vue开发的时候，我们会新建一个vue后缀的文件，所以我们就需要一个loader来解析和读取.vue文件的内容。先安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev vue-loader vue-template-compiler</div></pre></td></tr></table></figure>\n<p>然后我们再在wepback配置中的module.rules中使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js/webpack.base.conf.js</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue-loader&apos;,</div><div class=\"line\">        options: &#123;&#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  ...</div></pre></td></tr></table></figure>\n<p>至于这里为什么要安装<code>vue-template-compiler</code>，是因为单纯使用<code>vue-loader</code>启动的时候会报错，提示在没有<code>vue-template-compiler</code>的情况下使用<code>vue-loader</code>，我在网上查了一下也有人写了<a href=\"https://blog.csdn.net/cominglately/article/details/80555210\" target=\"_blank\" rel=\"external\">blog</a>说明了这一情况，意思大概是升级到webpack 4.0之后会出现的问题。为了解决这个问题我们要在webpack配置上使用一下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js/webpack.base.conf.js</div><div class=\"line\"></div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue-loader&apos;,</div><div class=\"line\">        options: &#123;&#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [</div><div class=\"line\">    new VueLoaderPlugin()</div><div class=\"line\">  ],</div><div class=\"line\">  ...</div></pre></td></tr></table></figure>\n<p>现在就可以读vue文件了，接下来就是对vue文件里的css、非标准的js、图片分别配置，也让webpack可以有能力解析。</p>\n<p>解析css（css-loader是解析css的，style-loader是把css以<style></style>内嵌的方式注入到html中）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure></p>\n<p>解析非标准的js（<a href=\"https://www.babeljs.cn/docs/setup/#installation\" target=\"_blank\" rel=\"external\">使用babel</a>）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-loader babel-preset-env</div></pre></td></tr></table></figure></p>\n<p>解析img:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev file-loader</div></pre></td></tr></table></figure></p>\n<p>然后再分别写到rules里面，就完成了。整个配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js/webpack.base.conf.js</div><div class=\"line\"></div><div class=\"line\">const path = require(&apos;path&apos;)</div><div class=\"line\">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry: &apos;./src/main.js&apos;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class=\"line\">    publicPath: &apos;/dist/&apos;,</div><div class=\"line\">    filename: &apos;build.js&apos;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  module: &#123;</div><div class=\"line\">    rules: [&#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        use: [</div><div class=\"line\">          &apos;vue-style-loader&apos;,</div><div class=\"line\">          &apos;css-loader&apos;</div><div class=\"line\">        ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        loader: &apos;babel-loader&apos;,</div><div class=\"line\">        exclude: /node_modules/</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.vue$/,</div><div class=\"line\">        loader: &apos;vue-loader&apos;,</div><div class=\"line\">        options: &#123;&#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.(png|jpg|gif|svg)$/,</div><div class=\"line\">        loader: &apos;file-loader&apos;,</div><div class=\"line\">        options: &#123;</div><div class=\"line\">          name: &apos;[name].[ext]?[hash]&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  plugins: [</div><div class=\"line\">    new VueLoaderPlugin()</div><div class=\"line\">  ],</div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    // contentBase: path.join(__dirname, &quot;dist&quot;),</div><div class=\"line\">    // 确保 publicPath 总是以斜杠(/)开头和结尾。</div><div class=\"line\">    // 默认会取output.path的值，设置之后会覆盖使用devServer.publicPath的值</div><div class=\"line\">    // publicPath: &quot;/&quot;,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    compress: true,</div><div class=\"line\">    proxy: &#123; // proxy URLs to backend development server</div><div class=\"line\">      // &apos;/api&apos;: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      // &apos;/api&apos;: &#123;</div><div class=\"line\">      //   target: &apos;http://localhost:3000&apos;,</div><div class=\"line\">      //   pathRewrite: &#123;&apos;^/api&apos; : &apos;&apos;&#125;</div><div class=\"line\">      // &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    hot: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;,</div><div class=\"line\">  devtool: &apos;#eval-source-map&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"项目优化\"><a href=\"#项目优化\" class=\"headerlink\" title=\"项目优化\"></a>项目优化</h3><p>按照刚刚的步骤进行操作的话，会发现当项目运行起来的时候webpack会报如下错误，现在慢慢地按照提示来对项目进行优化。</p>\n<p><a href=\"https://simimg.com/i/qqEhK\" target=\"_blank\" rel=\"external\"><img src=\"https://s1.ax2x.com/2018/07/19/qqEhK.png\" alt=\"qqEhK.png\"></a></p>\n<h4 id=\"WARNING-in-configuration\"><a href=\"#WARNING-in-configuration\" class=\"headerlink\" title=\"WARNING in configuration\"></a>WARNING in configuration</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">The &apos;mode&apos; option has not been set, webpack will fallback to &apos;production&apos; for this value. Set &apos;mode&apos; option to &apos;development&apos; or &apos;production&apos; to enable defaults for each environment.</div><div class=\"line\">You can also set it to &apos;none&apos; to disable any default behavior. Learn more: https://webpack.js.org/concepts/mode/</div></pre></td></tr></table></figure>\n<p>翻译成中文的意思大概是：<code>mode</code>这个选项没有被设置，webpack将会默认设置为<code>production</code>。你可以把<code>mode</code>选项设置为<code>development</code>或者<code>production</code>，以让webpack以指定的环境启动。你也可以设置为<code>none</code>以禁用任何的默认行为。<a href=\"https://webpack.js.org/concepts/mode/\" target=\"_blank\" rel=\"external\">了解更多：https://webpack.js.org/concepts/mode/</a>。</p>\n<p>这个问题主要是告诉我们要让webpack知道现是要按什么环境去构建应用，通常我们会通过一个配置文件来记录所有会用到的环境，然后在调用的时候通过传入参数的形式来指定使用哪一个环境。</p>\n<p>我们新建一个目录<code>config</code>，在目录里面再分别建立不同环境的配置，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── config</div><div class=\"line\">│   ├── dev.js</div><div class=\"line\">│   ├── index.js</div><div class=\"line\">│   ├── prod.js</div><div class=\"line\">│   └── test.js</div></pre></td></tr></table></figure>\n<p>我们分别区别了开发环境、生产环境、和测试环境，然后再通过一个index.js来判断当前使用哪一个环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// index.js</div><div class=\"line\">const prod = require(&apos;./prod&apos;)</div><div class=\"line\">const dev = require(&apos;./dev&apos;)</div><div class=\"line\">const test = require(&apos;./test&apos;)</div><div class=\"line\"></div><div class=\"line\">let env = prod;</div><div class=\"line\"></div><div class=\"line\">switch (process.env.NODE_ENV) &#123;</div><div class=\"line\">  case &apos;development&apos;:</div><div class=\"line\">    env = dev;</div><div class=\"line\">    break;</div><div class=\"line\">    // case &apos;test&apos;:</div><div class=\"line\">    //   env = test;</div><div class=\"line\">    //   break;</div><div class=\"line\">  default:</div><div class=\"line\">    env = prod;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">module.exports = env</div></pre></td></tr></table></figure>\n<p>这里的<code>process.env</code>是node.js的一个环境变量对象，挂载到这个对象上的属性可以在node的全局运行环境中访问到，而<code>NODE_ENV</code>是node社区约定作为当前运行环境的属性（当然你也可以用其它属性代替）。</p>\n<p>为了我们在启动的时候可以为node指定当前运行环境，我们新加入一个依赖包叫<a href=\"https://www.npmjs.com/package/cross-env\" target=\"_blank\" rel=\"external\">cross-env</a>，然后修改<code>package.json</code>文件里的运行脚本命令，添加<code>cross-env NODE_ENV=[prototype]</code>在命令前面即可，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\">&quot;scripts&quot;: &#123;</div><div class=\"line\">  &quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --inline --hot&quot;,</div><div class=\"line\">  &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</div><div class=\"line\">&#125;,</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"WARNING-in-asset-size-limit\"><a href=\"#WARNING-in-asset-size-limit\" class=\"headerlink\" title=\"WARNING in asset size limit\"></a>WARNING in asset size limit</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">The following asset(s) exceed the recommended size limit (244 KiB).</div><div class=\"line\">This can impact web performance.</div><div class=\"line\">Assets:</div><div class=\"line\">  build.js (2.13 MiB)</div></pre></td></tr></table></figure>\n<h4 id=\"WARNING-in-entrypoint-size-limit\"><a href=\"#WARNING-in-entrypoint-size-limit\" class=\"headerlink\" title=\"WARNING in entrypoint size limit\"></a>WARNING in entrypoint size limit</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">The following entrypoint(s) combined asset size exceeds the recommended limit (244 KiB). This can impact web performance.</div><div class=\"line\">Entrypoints:</div><div class=\"line\">  main (2.13 MiB)</div><div class=\"line\">      build.js</div><div class=\"line\">      0.9256098444c5c2f2e51c.hot-update.js</div></pre></td></tr></table></figure>\n<h4 id=\"WARNING-in-webpack-performance-recommendations\"><a href=\"#WARNING-in-webpack-performance-recommendations\" class=\"headerlink\" title=\"WARNING in webpack performance recommendations\"></a>WARNING in webpack performance recommendations</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">You can limit the size of your bundles by using import() or require.ensure to lazy load some parts of your application.</div><div class=\"line\">For more info visit https://webpack.js.org/guides/code-splitting/</div></pre></td></tr></table></figure>\n"},{"title":"JavaScript 设计模式与开发实践","date":"2017-08-09T11:51:22.000Z","_content":"\n## 基础知识\n\n### 一、this、call 和 apply\n\n#### this的指向\n\n除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：\n\n- 作为对象的方法调用。\n- 作为普通函数调用。\n- 构造器调用。\n- Function.prototype.call或Function.prototype.apply调用。\n\n<!-- more -->\n\n1. 作为对象的方法调用\n\n当函数作为对象的方法被调用时，this指向该对象：\n\n```\nvar obj = {\n\ta: 1，\n    getA: function() {\n    \talert( this === obj );\n        alert( this.a );\n    }\n}\n\nobj.getA();\n// output: true\n// output: 1\n```\n2. 作为普通函数调用\n\n当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。\n\n```\nwindow.name = 'golbalName';\n\nvar getName = function() {\n\treturn this.name;\n};\n\nvar anotherGetName = function() {\n\tconsole.log(getName())\n}\n\nconsole.log( getName()) ;\n// output: globalName\n\nanotherGetName();\n// output: globalName\n```\n\n或者\n\n```\nwindow.name = 'globalName';\n\nvar myObject = {\n\tname: 'sven',\n    getName: function(){\n    \treturn this.name;\n    };\n};\n\nvar getName = myObject.getName;\ncosnole.log( getName() );\n// output: globalName\n\n```\n\n3. 有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            alert( this.id ); // output: div1\n            var callback =function() {\n                alert( this.id ); // output: window\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n此时有一种简单的解决方案，可以用一个变量保存div节点的引用：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            var that = this\n            var callback =function() {\n                alert( that.id ); // output: div1\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:\n\n\n```\nfunction func() {\n\t“use strict\"\n    alert( this ) // output: undefined\n}\n```\n\n### 二、闭包和高阶函数\n\n#### 闭包\n\n## 设计模式\n\n### 订阅模式\n\n订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。\n\n例： \n\n```\nvar event = {\n    // 存放订阅事件的数组队列\n    clientList: [],\n    // 添加订阅事件的方法\n    listen: function( key, fn ) {\n        // key 是订阅事件的代号标志，比如login表示登录订阅事件，\n        // loadFail表示读取失败订阅事件\n        // fn 是要订阅事件触发时执行的函数\n        if (!this.clientList[ key ]) {\n            this.clientList[ key ] = []\n        }\n        // 把订阅消息添加到缓存列表\n        this.clientList[ key ].push( fn );\n    },\n    trigger: function() {\n        var key = Array.prototype.shift.call( arguments )\n            fns = this.clientList[ key ]\n        \n            if ( !fns || fns.length === 0 ) { // 如果没有绑定对应的消息\n                return false\n            }\n        \n            for ( var i = 0, fn; fn = fns[ i++ ];) {\n                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数\n            }\n    }\n}\n```\n\n我们来测试一下上面的代码：\n首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）\n\n```\nvar installEvent = function( obj ) {\n    for ( var i in event ) {\n        obj[ i ] = event[ i ];\n    }\n}\n```\n\n假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。\n\n```\n// 先给老师添加发布订阅功能\nvar teacher = {}\ninstallEvent( teacher )\n\n// 老师备课时先定义好将要布置的作业\nfunction doMath() {\n\tconsole.log( 'do Math homework' )\n}\n\nfunction doMathTest() {\n\tconsole.log( 'do Math test homework' )\n}\n\nfunction doEnglish() {\n\tconsole.log( 'do Englisth homework' )\n}\n\n// 在课堂上老师发布作业\nteacher.listen( 'Math', function() {\n    doMath();\n})\n\nteacher.listen( 'Math', function() {\n\tdoMathTest()\n})\n\nteacher.listen( 'English', function() {\n    do English()\n})\n\n// 做作业的时间到了，学生做老师发布的作业\n// 用if来假设条件成立，可以去掉\nif ( new Date().now === 8888 ) {\n\tteacher.trigger( 'Math' )\n\tteacher.trigger( 'English' )\n}\n\n```\n\n发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。\n\n### 中介者模式\n\n中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。\n\n中介者模式一般有两种实现方式：\n\n- 利用发布-订阅模式。\n- 中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。\n\n考虑一个现实的一个例子：\n这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。\n\n假设有这几种规格的手机：\n\n```\nvar goods = {\n\t\"red\": 3,\n\t\"blue: 6\n}\n```\n\n粗略地把上面分成以下几种情况：\n\n1. 选择红色手机，买4个，显示库存不足，购买按钮不可点\n2. 选择蓝色手机，买5个，显示库存充足，购买按钮可点\n3. 不有选择颜色或者数量的时候，购买按钮不可点\n\n以下进行编码：\n\n页面HTML代码：\n\n```\n选择颜色： \n<select name=\"\" id=\"colorSelect\">\n    <option value=\"\">请选择</option>\n    <option value=\"red\">红色</option>\n    <option value=\"blue\">蓝色</option>\n</select>\n输入购买数量：\n<input type=\"text\" id=\"numberInput\">\n您选择了颜色：\n<div id=\"colorInfo\"></div><br/>\n您输入了数量：\n<div id=\"nubmerInfo\"></div>\n您输入了容量：\n<div id=\"momeryInfo\"></div>\n```\n\n先定义商品规格：\n\n```\nvar goods = {\n    \"red|32G\": 3,\n    \"red|64G\": 0,\n    \"blue|32G\": 1,\n    \"blue|16G\": 6\n}\n```\n\n定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。\n\n```\nvar mediator = (function(){\n    var colorSelect = document.getElementById('colorSelect')\n    var memorySelect = document.getElementById('memorySelect')\n    var numberInput = document.getElementById('numberInput')\n    var colorInfo = document.getElementById('colorInfo')\n    var memoryInfo = document.getElementById('memoryInfo')\n    var numberInfo = document.getElementById('numberInfo')\n    var nextBtn = document.getElementById('nextBtn')\n\n    return {\n        changed: function(obj){\n            var color = colorSelect.value,  // 颜色\n                memory = memorySelect.value, // 内存\n                number = numberSelect.value, // 数量\n                stock = goods[ color + '|' + memory ];  // 颜色和内存对应的手机库存数量\n            \n            if ( obj === colorSelect ) {\n                colorInfo.innerHTML = color\n            } else if ( obj === memorySelect ) {\n                memoryInfo.innerHTML = memory\n            } else if ( obj === numberInput ) {\n                numberInfo.innerHTML = number\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择手机颜色'\n                return\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择内存大小'\n                return\n            }\n\n            if ( Number.isInteger ( number - 0 ) && number > 0 ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请输入正确的购买数量'\n                return\n            }\n\n            nextBtn.disabled = false\n            nextBtn.innerHTML = '放入购物车'\n        }\n    }\n})()\n```\n\n当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。\n\n```\ncolorSelect.onchange = function() {\n    mediator.changed( this )\n}\n\nmemorySelect.onchange = function() {\n    mediator.changed( this )\n}\n\nnumberInput.onchange = function() {\n    mediator.changed( this )\n}\n```\n\n","source":"_posts/JavaScript-Design-Patterns-and-Development-Practice.md","raw":"---\ntitle: JavaScript 设计模式与开发实践\ndate: 2017-08-09 19:51:22\ntags: 读书笔记\n---\n\n## 基础知识\n\n### 一、this、call 和 apply\n\n#### this的指向\n\n除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：\n\n- 作为对象的方法调用。\n- 作为普通函数调用。\n- 构造器调用。\n- Function.prototype.call或Function.prototype.apply调用。\n\n<!-- more -->\n\n1. 作为对象的方法调用\n\n当函数作为对象的方法被调用时，this指向该对象：\n\n```\nvar obj = {\n\ta: 1，\n    getA: function() {\n    \talert( this === obj );\n        alert( this.a );\n    }\n}\n\nobj.getA();\n// output: true\n// output: 1\n```\n2. 作为普通函数调用\n\n当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。\n\n```\nwindow.name = 'golbalName';\n\nvar getName = function() {\n\treturn this.name;\n};\n\nvar anotherGetName = function() {\n\tconsole.log(getName())\n}\n\nconsole.log( getName()) ;\n// output: globalName\n\nanotherGetName();\n// output: globalName\n```\n\n或者\n\n```\nwindow.name = 'globalName';\n\nvar myObject = {\n\tname: 'sven',\n    getName: function(){\n    \treturn this.name;\n    };\n};\n\nvar getName = myObject.getName;\ncosnole.log( getName() );\n// output: globalName\n\n```\n\n3. 有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            alert( this.id ); // output: div1\n            var callback =function() {\n                alert( this.id ); // output: window\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n此时有一种简单的解决方案，可以用一个变量保存div节点的引用：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            var that = this\n            var callback =function() {\n                alert( that.id ); // output: div1\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:\n\n\n```\nfunction func() {\n\t“use strict\"\n    alert( this ) // output: undefined\n}\n```\n\n### 二、闭包和高阶函数\n\n#### 闭包\n\n## 设计模式\n\n### 订阅模式\n\n订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。\n\n例： \n\n```\nvar event = {\n    // 存放订阅事件的数组队列\n    clientList: [],\n    // 添加订阅事件的方法\n    listen: function( key, fn ) {\n        // key 是订阅事件的代号标志，比如login表示登录订阅事件，\n        // loadFail表示读取失败订阅事件\n        // fn 是要订阅事件触发时执行的函数\n        if (!this.clientList[ key ]) {\n            this.clientList[ key ] = []\n        }\n        // 把订阅消息添加到缓存列表\n        this.clientList[ key ].push( fn );\n    },\n    trigger: function() {\n        var key = Array.prototype.shift.call( arguments )\n            fns = this.clientList[ key ]\n        \n            if ( !fns || fns.length === 0 ) { // 如果没有绑定对应的消息\n                return false\n            }\n        \n            for ( var i = 0, fn; fn = fns[ i++ ];) {\n                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数\n            }\n    }\n}\n```\n\n我们来测试一下上面的代码：\n首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）\n\n```\nvar installEvent = function( obj ) {\n    for ( var i in event ) {\n        obj[ i ] = event[ i ];\n    }\n}\n```\n\n假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。\n\n```\n// 先给老师添加发布订阅功能\nvar teacher = {}\ninstallEvent( teacher )\n\n// 老师备课时先定义好将要布置的作业\nfunction doMath() {\n\tconsole.log( 'do Math homework' )\n}\n\nfunction doMathTest() {\n\tconsole.log( 'do Math test homework' )\n}\n\nfunction doEnglish() {\n\tconsole.log( 'do Englisth homework' )\n}\n\n// 在课堂上老师发布作业\nteacher.listen( 'Math', function() {\n    doMath();\n})\n\nteacher.listen( 'Math', function() {\n\tdoMathTest()\n})\n\nteacher.listen( 'English', function() {\n    do English()\n})\n\n// 做作业的时间到了，学生做老师发布的作业\n// 用if来假设条件成立，可以去掉\nif ( new Date().now === 8888 ) {\n\tteacher.trigger( 'Math' )\n\tteacher.trigger( 'English' )\n}\n\n```\n\n发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。\n\n### 中介者模式\n\n中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。\n\n中介者模式一般有两种实现方式：\n\n- 利用发布-订阅模式。\n- 中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。\n\n考虑一个现实的一个例子：\n这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。\n\n假设有这几种规格的手机：\n\n```\nvar goods = {\n\t\"red\": 3,\n\t\"blue: 6\n}\n```\n\n粗略地把上面分成以下几种情况：\n\n1. 选择红色手机，买4个，显示库存不足，购买按钮不可点\n2. 选择蓝色手机，买5个，显示库存充足，购买按钮可点\n3. 不有选择颜色或者数量的时候，购买按钮不可点\n\n以下进行编码：\n\n页面HTML代码：\n\n```\n选择颜色： \n<select name=\"\" id=\"colorSelect\">\n    <option value=\"\">请选择</option>\n    <option value=\"red\">红色</option>\n    <option value=\"blue\">蓝色</option>\n</select>\n输入购买数量：\n<input type=\"text\" id=\"numberInput\">\n您选择了颜色：\n<div id=\"colorInfo\"></div><br/>\n您输入了数量：\n<div id=\"nubmerInfo\"></div>\n您输入了容量：\n<div id=\"momeryInfo\"></div>\n```\n\n先定义商品规格：\n\n```\nvar goods = {\n    \"red|32G\": 3,\n    \"red|64G\": 0,\n    \"blue|32G\": 1,\n    \"blue|16G\": 6\n}\n```\n\n定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。\n\n```\nvar mediator = (function(){\n    var colorSelect = document.getElementById('colorSelect')\n    var memorySelect = document.getElementById('memorySelect')\n    var numberInput = document.getElementById('numberInput')\n    var colorInfo = document.getElementById('colorInfo')\n    var memoryInfo = document.getElementById('memoryInfo')\n    var numberInfo = document.getElementById('numberInfo')\n    var nextBtn = document.getElementById('nextBtn')\n\n    return {\n        changed: function(obj){\n            var color = colorSelect.value,  // 颜色\n                memory = memorySelect.value, // 内存\n                number = numberSelect.value, // 数量\n                stock = goods[ color + '|' + memory ];  // 颜色和内存对应的手机库存数量\n            \n            if ( obj === colorSelect ) {\n                colorInfo.innerHTML = color\n            } else if ( obj === memorySelect ) {\n                memoryInfo.innerHTML = memory\n            } else if ( obj === numberInput ) {\n                numberInfo.innerHTML = number\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择手机颜色'\n                return\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择内存大小'\n                return\n            }\n\n            if ( Number.isInteger ( number - 0 ) && number > 0 ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请输入正确的购买数量'\n                return\n            }\n\n            nextBtn.disabled = false\n            nextBtn.innerHTML = '放入购物车'\n        }\n    }\n})()\n```\n\n当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。\n\n```\ncolorSelect.onchange = function() {\n    mediator.changed( this )\n}\n\nmemorySelect.onchange = function() {\n    mediator.changed( this )\n}\n\nnumberInput.onchange = function() {\n    mediator.changed( this )\n}\n```\n\n","slug":"JavaScript-Design-Patterns-and-Development-Practice","published":1,"updated":"2017-11-06T16:56:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4nau560002ts2htfccnyni","content":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"一、this、call-和-apply\"><a href=\"#一、this、call-和-apply\" class=\"headerlink\" title=\"一、this、call 和 apply\"></a>一、this、call 和 apply</h3><h4 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h4><p>除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：</p>\n<ul>\n<li>作为对象的方法调用。</li>\n<li>作为普通函数调用。</li>\n<li>构造器调用。</li>\n<li>Function.prototype.call或Function.prototype.apply调用。</li>\n</ul>\n<a id=\"more\"></a>\n<ol>\n<li>作为对象的方法调用</li>\n</ol>\n<p>当函数作为对象的方法被调用时，this指向该对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">\ta: 1，</div><div class=\"line\">    getA: function() &#123;</div><div class=\"line\">    \talert( this === obj );</div><div class=\"line\">        alert( this.a );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getA();</div><div class=\"line\">// output: true</div><div class=\"line\">// output: 1</div></pre></td></tr></table></figure>\n<ol>\n<li>作为普通函数调用</li>\n</ol>\n<p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;golbalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var getName = function() &#123;</div><div class=\"line\">\treturn this.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var anotherGetName = function() &#123;</div><div class=\"line\">\tconsole.log(getName())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log( getName()) ;</div><div class=\"line\">// output: globalName</div><div class=\"line\"></div><div class=\"line\">anotherGetName();</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;globalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var myObject = &#123;</div><div class=\"line\">\tname: &apos;sven&apos;,</div><div class=\"line\">    getName: function()&#123;</div><div class=\"line\">    \treturn this.name;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getName = myObject.getName;</div><div class=\"line\">cosnole.log( getName() );</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<ol>\n<li>有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            alert( this.id ); // output: div1</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( this.id ); // output: window</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>此时有一种简单的解决方案，可以用一个变量保存div节点的引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            var that = this</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( that.id ); // output: div1</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function func() &#123;</div><div class=\"line\">\t“use strict&quot;</div><div class=\"line\">    alert( this ) // output: undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、闭包和高阶函数\"><a href=\"#二、闭包和高阶函数\" class=\"headerlink\" title=\"二、闭包和高阶函数\"></a>二、闭包和高阶函数</h3><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h3 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h3><p>订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。</p>\n<p>例： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = &#123;</div><div class=\"line\">    // 存放订阅事件的数组队列</div><div class=\"line\">    clientList: [],</div><div class=\"line\">    // 添加订阅事件的方法</div><div class=\"line\">    listen: function( key, fn ) &#123;</div><div class=\"line\">        // key 是订阅事件的代号标志，比如login表示登录订阅事件，</div><div class=\"line\">        // loadFail表示读取失败订阅事件</div><div class=\"line\">        // fn 是要订阅事件触发时执行的函数</div><div class=\"line\">        if (!this.clientList[ key ]) &#123;</div><div class=\"line\">            this.clientList[ key ] = []</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 把订阅消息添加到缓存列表</div><div class=\"line\">        this.clientList[ key ].push( fn );</div><div class=\"line\">    &#125;,</div><div class=\"line\">    trigger: function() &#123;</div><div class=\"line\">        var key = Array.prototype.shift.call( arguments )</div><div class=\"line\">            fns = this.clientList[ key ]</div><div class=\"line\">        </div><div class=\"line\">            if ( !fns || fns.length === 0 ) &#123; // 如果没有绑定对应的消息</div><div class=\"line\">                return false</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            for ( var i = 0, fn; fn = fns[ i++ ];) &#123;</div><div class=\"line\">                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来测试一下上面的代码：<br>首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var installEvent = function( obj ) &#123;</div><div class=\"line\">    for ( var i in event ) &#123;</div><div class=\"line\">        obj[ i ] = event[ i ];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 先给老师添加发布订阅功能</div><div class=\"line\">var teacher = &#123;&#125;</div><div class=\"line\">installEvent( teacher )</div><div class=\"line\"></div><div class=\"line\">// 老师备课时先定义好将要布置的作业</div><div class=\"line\">function doMath() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doMathTest() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math test homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doEnglish() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Englisth homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 在课堂上老师发布作业</div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">    doMath();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">\tdoMathTest()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;English&apos;, function() &#123;</div><div class=\"line\">    do English()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 做作业的时间到了，学生做老师发布的作业</div><div class=\"line\">// 用if来假设条件成立，可以去掉</div><div class=\"line\">if ( new Date().now === 8888 ) &#123;</div><div class=\"line\">\tteacher.trigger( &apos;Math&apos; )</div><div class=\"line\">\tteacher.trigger( &apos;English&apos; )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。</p>\n<p>中介者模式一般有两种实现方式：</p>\n<ul>\n<li>利用发布-订阅模式。</li>\n<li>中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。</li>\n</ul>\n<p>考虑一个现实的一个例子：<br>这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。</p>\n<p>假设有这几种规格的手机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">\t&quot;red&quot;: 3,</div><div class=\"line\">\t&quot;blue: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>粗略地把上面分成以下几种情况：</p>\n<ol>\n<li>选择红色手机，买4个，显示库存不足，购买按钮不可点</li>\n<li>选择蓝色手机，买5个，显示库存充足，购买按钮可点</li>\n<li>不有选择颜色或者数量的时候，购买按钮不可点</li>\n</ol>\n<p>以下进行编码：</p>\n<p>页面HTML代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">选择颜色： </div><div class=\"line\">&lt;select name=&quot;&quot; id=&quot;colorSelect&quot;&gt;</div><div class=\"line\">    &lt;option value=&quot;&quot;&gt;请选择&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;red&quot;&gt;红色&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;blue&quot;&gt;蓝色&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">输入购买数量：</div><div class=\"line\">&lt;input type=&quot;text&quot; id=&quot;numberInput&quot;&gt;</div><div class=\"line\">您选择了颜色：</div><div class=\"line\">&lt;div id=&quot;colorInfo&quot;&gt;&lt;/div&gt;&lt;br/&gt;</div><div class=\"line\">您输入了数量：</div><div class=\"line\">&lt;div id=&quot;nubmerInfo&quot;&gt;&lt;/div&gt;</div><div class=\"line\">您输入了容量：</div><div class=\"line\">&lt;div id=&quot;momeryInfo&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>先定义商品规格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">    &quot;red|32G&quot;: 3,</div><div class=\"line\">    &quot;red|64G&quot;: 0,</div><div class=\"line\">    &quot;blue|32G&quot;: 1,</div><div class=\"line\">    &quot;blue|16G&quot;: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mediator = (function()&#123;</div><div class=\"line\">    var colorSelect = document.getElementById(&apos;colorSelect&apos;)</div><div class=\"line\">    var memorySelect = document.getElementById(&apos;memorySelect&apos;)</div><div class=\"line\">    var numberInput = document.getElementById(&apos;numberInput&apos;)</div><div class=\"line\">    var colorInfo = document.getElementById(&apos;colorInfo&apos;)</div><div class=\"line\">    var memoryInfo = document.getElementById(&apos;memoryInfo&apos;)</div><div class=\"line\">    var numberInfo = document.getElementById(&apos;numberInfo&apos;)</div><div class=\"line\">    var nextBtn = document.getElementById(&apos;nextBtn&apos;)</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">        changed: function(obj)&#123;</div><div class=\"line\">            var color = colorSelect.value,  // 颜色</div><div class=\"line\">                memory = memorySelect.value, // 内存</div><div class=\"line\">                number = numberSelect.value, // 数量</div><div class=\"line\">                stock = goods[ color + &apos;|&apos; + memory ];  // 颜色和内存对应的手机库存数量</div><div class=\"line\">            </div><div class=\"line\">            if ( obj === colorSelect ) &#123;</div><div class=\"line\">                colorInfo.innerHTML = color</div><div class=\"line\">            &#125; else if ( obj === memorySelect ) &#123;</div><div class=\"line\">                memoryInfo.innerHTML = memory</div><div class=\"line\">            &#125; else if ( obj === numberInput ) &#123;</div><div class=\"line\">                numberInfo.innerHTML = number</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择手机颜色&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择内存大小&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( Number.isInteger ( number - 0 ) &amp;&amp; number &gt; 0 ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请输入正确的购买数量&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nextBtn.disabled = false</div><div class=\"line\">            nextBtn.innerHTML = &apos;放入购物车&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">colorSelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">memorySelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">numberInput.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"一、this、call-和-apply\"><a href=\"#一、this、call-和-apply\" class=\"headerlink\" title=\"一、this、call 和 apply\"></a>一、this、call 和 apply</h3><h4 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h4><p>除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：</p>\n<ul>\n<li>作为对象的方法调用。</li>\n<li>作为普通函数调用。</li>\n<li>构造器调用。</li>\n<li>Function.prototype.call或Function.prototype.apply调用。</li>\n</ul>","more":"<ol>\n<li>作为对象的方法调用</li>\n</ol>\n<p>当函数作为对象的方法被调用时，this指向该对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">\ta: 1，</div><div class=\"line\">    getA: function() &#123;</div><div class=\"line\">    \talert( this === obj );</div><div class=\"line\">        alert( this.a );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getA();</div><div class=\"line\">// output: true</div><div class=\"line\">// output: 1</div></pre></td></tr></table></figure>\n<ol>\n<li>作为普通函数调用</li>\n</ol>\n<p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;golbalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var getName = function() &#123;</div><div class=\"line\">\treturn this.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var anotherGetName = function() &#123;</div><div class=\"line\">\tconsole.log(getName())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log( getName()) ;</div><div class=\"line\">// output: globalName</div><div class=\"line\"></div><div class=\"line\">anotherGetName();</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;globalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var myObject = &#123;</div><div class=\"line\">\tname: &apos;sven&apos;,</div><div class=\"line\">    getName: function()&#123;</div><div class=\"line\">    \treturn this.name;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getName = myObject.getName;</div><div class=\"line\">cosnole.log( getName() );</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<ol>\n<li>有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            alert( this.id ); // output: div1</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( this.id ); // output: window</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>此时有一种简单的解决方案，可以用一个变量保存div节点的引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            var that = this</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( that.id ); // output: div1</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function func() &#123;</div><div class=\"line\">\t“use strict&quot;</div><div class=\"line\">    alert( this ) // output: undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、闭包和高阶函数\"><a href=\"#二、闭包和高阶函数\" class=\"headerlink\" title=\"二、闭包和高阶函数\"></a>二、闭包和高阶函数</h3><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h3 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h3><p>订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。</p>\n<p>例： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = &#123;</div><div class=\"line\">    // 存放订阅事件的数组队列</div><div class=\"line\">    clientList: [],</div><div class=\"line\">    // 添加订阅事件的方法</div><div class=\"line\">    listen: function( key, fn ) &#123;</div><div class=\"line\">        // key 是订阅事件的代号标志，比如login表示登录订阅事件，</div><div class=\"line\">        // loadFail表示读取失败订阅事件</div><div class=\"line\">        // fn 是要订阅事件触发时执行的函数</div><div class=\"line\">        if (!this.clientList[ key ]) &#123;</div><div class=\"line\">            this.clientList[ key ] = []</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 把订阅消息添加到缓存列表</div><div class=\"line\">        this.clientList[ key ].push( fn );</div><div class=\"line\">    &#125;,</div><div class=\"line\">    trigger: function() &#123;</div><div class=\"line\">        var key = Array.prototype.shift.call( arguments )</div><div class=\"line\">            fns = this.clientList[ key ]</div><div class=\"line\">        </div><div class=\"line\">            if ( !fns || fns.length === 0 ) &#123; // 如果没有绑定对应的消息</div><div class=\"line\">                return false</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            for ( var i = 0, fn; fn = fns[ i++ ];) &#123;</div><div class=\"line\">                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来测试一下上面的代码：<br>首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var installEvent = function( obj ) &#123;</div><div class=\"line\">    for ( var i in event ) &#123;</div><div class=\"line\">        obj[ i ] = event[ i ];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 先给老师添加发布订阅功能</div><div class=\"line\">var teacher = &#123;&#125;</div><div class=\"line\">installEvent( teacher )</div><div class=\"line\"></div><div class=\"line\">// 老师备课时先定义好将要布置的作业</div><div class=\"line\">function doMath() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doMathTest() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math test homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doEnglish() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Englisth homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 在课堂上老师发布作业</div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">    doMath();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">\tdoMathTest()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;English&apos;, function() &#123;</div><div class=\"line\">    do English()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 做作业的时间到了，学生做老师发布的作业</div><div class=\"line\">// 用if来假设条件成立，可以去掉</div><div class=\"line\">if ( new Date().now === 8888 ) &#123;</div><div class=\"line\">\tteacher.trigger( &apos;Math&apos; )</div><div class=\"line\">\tteacher.trigger( &apos;English&apos; )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。</p>\n<p>中介者模式一般有两种实现方式：</p>\n<ul>\n<li>利用发布-订阅模式。</li>\n<li>中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。</li>\n</ul>\n<p>考虑一个现实的一个例子：<br>这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。</p>\n<p>假设有这几种规格的手机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">\t&quot;red&quot;: 3,</div><div class=\"line\">\t&quot;blue: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>粗略地把上面分成以下几种情况：</p>\n<ol>\n<li>选择红色手机，买4个，显示库存不足，购买按钮不可点</li>\n<li>选择蓝色手机，买5个，显示库存充足，购买按钮可点</li>\n<li>不有选择颜色或者数量的时候，购买按钮不可点</li>\n</ol>\n<p>以下进行编码：</p>\n<p>页面HTML代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">选择颜色： </div><div class=\"line\">&lt;select name=&quot;&quot; id=&quot;colorSelect&quot;&gt;</div><div class=\"line\">    &lt;option value=&quot;&quot;&gt;请选择&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;red&quot;&gt;红色&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;blue&quot;&gt;蓝色&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">输入购买数量：</div><div class=\"line\">&lt;input type=&quot;text&quot; id=&quot;numberInput&quot;&gt;</div><div class=\"line\">您选择了颜色：</div><div class=\"line\">&lt;div id=&quot;colorInfo&quot;&gt;&lt;/div&gt;&lt;br/&gt;</div><div class=\"line\">您输入了数量：</div><div class=\"line\">&lt;div id=&quot;nubmerInfo&quot;&gt;&lt;/div&gt;</div><div class=\"line\">您输入了容量：</div><div class=\"line\">&lt;div id=&quot;momeryInfo&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>先定义商品规格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">    &quot;red|32G&quot;: 3,</div><div class=\"line\">    &quot;red|64G&quot;: 0,</div><div class=\"line\">    &quot;blue|32G&quot;: 1,</div><div class=\"line\">    &quot;blue|16G&quot;: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mediator = (function()&#123;</div><div class=\"line\">    var colorSelect = document.getElementById(&apos;colorSelect&apos;)</div><div class=\"line\">    var memorySelect = document.getElementById(&apos;memorySelect&apos;)</div><div class=\"line\">    var numberInput = document.getElementById(&apos;numberInput&apos;)</div><div class=\"line\">    var colorInfo = document.getElementById(&apos;colorInfo&apos;)</div><div class=\"line\">    var memoryInfo = document.getElementById(&apos;memoryInfo&apos;)</div><div class=\"line\">    var numberInfo = document.getElementById(&apos;numberInfo&apos;)</div><div class=\"line\">    var nextBtn = document.getElementById(&apos;nextBtn&apos;)</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">        changed: function(obj)&#123;</div><div class=\"line\">            var color = colorSelect.value,  // 颜色</div><div class=\"line\">                memory = memorySelect.value, // 内存</div><div class=\"line\">                number = numberSelect.value, // 数量</div><div class=\"line\">                stock = goods[ color + &apos;|&apos; + memory ];  // 颜色和内存对应的手机库存数量</div><div class=\"line\">            </div><div class=\"line\">            if ( obj === colorSelect ) &#123;</div><div class=\"line\">                colorInfo.innerHTML = color</div><div class=\"line\">            &#125; else if ( obj === memorySelect ) &#123;</div><div class=\"line\">                memoryInfo.innerHTML = memory</div><div class=\"line\">            &#125; else if ( obj === numberInput ) &#123;</div><div class=\"line\">                numberInfo.innerHTML = number</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择手机颜色&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择内存大小&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( Number.isInteger ( number - 0 ) &amp;&amp; number &gt; 0 ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请输入正确的购买数量&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nextBtn.disabled = false</div><div class=\"line\">            nextBtn.innerHTML = &apos;放入购物车&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">colorSelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">memorySelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">numberInput.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Javascript 数据类型","date":"2017-06-25T04:55:30.000Z","_content":"\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n---\n\n<!-- more -->\n\n##### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n**注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数**\n\n---\n\n##### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n**注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱**\n\n---\n\n##### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n**如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值**\n\n---\n\n##### Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n###### 2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n###### 3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n**注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：**\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n###### 4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n###### 5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同","source":"_posts/Javascript-data-structure.md","raw":"---\ntitle: Javascript 数据类型\ndate: 2017-06-25 12:55:30\ntags: 读书笔记\n---\n\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n---\n\n<!-- more -->\n\n##### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n**注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数**\n\n---\n\n##### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n**注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱**\n\n---\n\n##### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n**如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值**\n\n---\n\n##### Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n###### 2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n###### 3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n**注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：**\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n###### 4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n###### 5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同","slug":"Javascript-data-structure","published":1,"updated":"2017-12-09T19:12:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4nau590004ts2hfg9ya9sa","content":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<hr>\n<a id=\"more\"></a>\n<h5 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h5><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数</strong></p>\n<hr>\n<h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p><strong>注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱</strong></p>\n<hr>\n<h5 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h5><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p><strong>如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值</strong></p>\n<hr>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"2-其它进制转换为十进制\"><a href=\"#2-其它进制转换为十进制\" class=\"headerlink\" title=\"2. 其它进制转换为十进制\"></a>2. 其它进制转换为十进制</h6><p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"3-浮点数值\"><a href=\"#3-浮点数值\" class=\"headerlink\" title=\"3. 浮点数值\"></a>3. 浮点数值</h6><p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"4-NaN-Not-a-Number\"><a href=\"#4-NaN-Not-a-Number\" class=\"headerlink\" title=\"4. NaN (Not a Number)\"></a>4. NaN (Not a Number)</h6><ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<h6 id=\"5-数值转换\"><a href=\"#5-数值转换\" class=\"headerlink\" title=\"5. 数值转换\"></a>5. 数值转换</h6><ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<hr>","more":"<h5 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h5><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数</strong></p>\n<hr>\n<h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p><strong>注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱</strong></p>\n<hr>\n<h5 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h5><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p><strong>如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值</strong></p>\n<hr>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"2-其它进制转换为十进制\"><a href=\"#2-其它进制转换为十进制\" class=\"headerlink\" title=\"2. 其它进制转换为十进制\"></a>2. 其它进制转换为十进制</h6><p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"3-浮点数值\"><a href=\"#3-浮点数值\" class=\"headerlink\" title=\"3. 浮点数值\"></a>3. 浮点数值</h6><p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"4-NaN-Not-a-Number\"><a href=\"#4-NaN-Not-a-Number\" class=\"headerlink\" title=\"4. NaN (Not a Number)\"></a>4. NaN (Not a Number)</h6><ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<h6 id=\"5-数值转换\"><a href=\"#5-数值转换\" class=\"headerlink\" title=\"5. 数值转换\"></a>5. 数值转换</h6><ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>"},{"title":"Javascript 数据类型","date":"2017-08-06T15:14:13.000Z","_content":"\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n<!-- more  -->\n\n---\n\n#### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==\n\n---\n\n#### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==\n\n---\n\n#### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==\n\n---\n\n#####Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n######2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n######3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n######4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n######5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同\n","source":"_posts/JavascriptDataType.md","raw":"---\ntitle: Javascript 数据类型\ndate: 2017-08-06 23:14:13\ntags: 读书笔记\n---\n\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n<!-- more  -->\n\n---\n\n#### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==\n\n---\n\n#### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==\n\n---\n\n#### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==\n\n---\n\n#####Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n######2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n######3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n######4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n######5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同\n","slug":"JavascriptDataType","published":1,"updated":"2017-12-09T19:00:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4nau5l0007ts2h034q0h2p","content":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h4><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p>==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==</p>\n<hr>\n<h4 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h4><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==</p>\n<hr>\n<h4 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h4><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==</p>\n<hr>\n<p>#####Number类型</p>\n<h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<p>######2. 其它进制转换为十进制</p>\n<p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>######3. 浮点数值</p>\n<p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p>==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>######4. NaN (Not a Number)</p>\n<ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<p>######5. 数值转换</p>\n<ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>","more":"<hr>\n<h4 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h4><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p>==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==</p>\n<hr>\n<h4 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h4><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==</p>\n<hr>\n<h4 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h4><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==</p>\n<hr>\n<p>#####Number类型</p>\n<h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<p>######2. 其它进制转换为十进制</p>\n<p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>######3. 浮点数值</p>\n<p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p>==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>######4. NaN (Not a Number)</p>\n<ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<p>######5. 数值转换</p>\n<ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>"},{"title":"软件测试","year":2017,"month":4,"day":1,"_content":"### 行业内的主要知识点\n#### 软件危机\n#### 软件测试的分类\n- 按测试阶段划分\n\n软件测试 = 程序 + 文档 + 数据\n程序主流方向 B/S架构和手机app\n\n<!-- more -->\n\n#### 软件项目流程\n- 可行性分析\n- 立项\n- 需求\n- 原型设计\n- 概要设计\n- 详细设计\n- 开发\n- 验收\n- 维护\n#### 接口测试\n- 后台和前台的数据\n- 后台和前台可以交互\n### 文档\n- 需求文档\n- 设计文档\n- 开发文档\n- 测试文档\n- 验收文档\n- 用户文档\n### 软件测试\n- 测试计划\n- 测试用例\n- 测试方案\n- 测试报告\n- 测试方案\n- 测试报告（总结）\n\n### 软件测试就是保证\n### 软件测试的分类\n- 通用软件产品\n- 电信行业\n- 金融证券行业\n- 游戏测试\n- 嵌入式软件测试\n- 电子商务软件测试\n\n### 岗位分类\n- 软件测试工程师\n- 硬件测试工程师\n- 自动化工程师\n- 性能测试工程师\n- 安全测试工程师\n\n### 软件测试人员的职责\n- 了解项目需求内容\n- 编写合理的测试计划\n- \n\n作业：\n1. 你对目前软件测试行业现状怎么看？\n2. 你觉得现在的测试人员能力水平如何？\n3. 你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？\n\n### 软件缺陷管理\n\n#### 软件缺陷的定义\n- IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：\n&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。\n- 因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。\n\n#### 软件缺陷的表现\n- 功能、我没有实现或部分实现。\n- 设计不合理，功能我和明确，逻辑不清楚或存在矛盾。\n- 产品实际结果和所期望的结果不一样。\n- 没有达到需求规格说明书所规定的性能指标等。\n- 运行出错，包括运行中断、系统崩溃、界面混乱等。\n- 数据不正确、精度不够、不完整或格式不统一。\n- 用户不能接受的其他问题，如存取时间过长、界面不美观。\n- 硬件或系统软件上存在的其他问题。\n\n#### 软件缺陷示例\n- 计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。\n&emsp;&emsp;软件未达到软件需求规格说明书表明的功能\n- 若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。\n&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围\n- 若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。\n&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标\n- 假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。\n&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误\n- 测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。\n&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好\n\n#### 软件缺陷产生的原因\n&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：\n- 需求解释或者记录错误\n- 用户需求定义错误 \n- 设计说明存在错误 \n- 编码说明、程序代码有误\n- 硬件或者软件系统上存在错误\n- 其他，如文档错误、内容不正确\n\n#### 软件缺陷的根源\n- 交流不充分\n&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等\n- 软件的复杂性\n&emsp;&emsp;功能复杂、开发复杂、测试复杂\n- 开发人员的错误\n&emsp;&emsp;对需求的理解、开发压力、功能与经验\n- 需求的变化\n&emsp;&emsp;需求说明书、设计文档、程序的变更\n- 进度压力\n&emsp;&emsp;项目周期比较紧\n\n#### 缺陷发现的手段\n&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：\n- 评审\n- QA\n- 客户\n\n#### 软件缺陷修的费用\n\n需求规格说明书、设计、编码、测试、发布，费用越来越高\n\n#### 软件缺陷的信息\n\n- 缺陷ID\n- 缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况\n- 缺陷标题*\n- 缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低\n- 缺陷的优先级*\n- 缺陷所属模块*\n- 缺陷记录者\n- 缺陷提交时间\n- 缺陷处理人\n- 处理结果描述\n- 缺陷处理时间\n- 缺陷验证人\n- 缺陷结果描述\n- 缺陷详细描述*\n- 缺陷环境说明\n- 必要的附件\n\n作业：\n1。 \nBUG标题： 一句话描述BUG\nBUG的等级： 致命错误、严重错误、一般、较小、\n测试建议\n提交时间\n软件版本\n软件环境：win7/Android7\n产生概率： 100%\n产生模块\n处理人\n产生步骤： 1。。。2。。。3。。。\n期待结果\n\n#### 软件缺陷分类————BUG类型\n\n- 系统缺陷\n1.由于程序所引起的死机，异常退出\n2.程序死循环\n3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足\n- 数据缺陷\n1.数据计算错误\n2.数据约束错误\n3.数据输入、输出错误\n- 数据库缺陷\n1. 数据库发生死锁\n2. 数据库的表、缺省值未加约束条件\n3. 数据库连接错误\n4. 数据库中的表有过多的空字段\n- 接口缺陷\n1.数据通信错误\n2.程序接口错误\n- 功能缺陷\n1.功能无法实现\n2.功能实现错误\n- 安全性缺陷\n1.用户权限无法实现\n2.超时限制错误\n3.访问控制错误\n4.加密错误\n- 兼容性缺陷\n1.与需求文档配置兼容性不符合\n- 性能缺陷\n1.未达到预期的性能目标\n2.性能测试中出错，导致无法继续进行测试\n- 界面缺陷\n1.操作界面错误\n2.打印内容、格式错误\n3.删除操作未给出提示\n4.长时间操作未给出提示\n5.界面不规范\n- 建议\n1.功能建议\n2.操作建议","source":"_posts/SoftwareTesting.md","raw":"---\ntitle: 软件测试\nyear: 2017\nmonth: 4\nday: 1\ntags: 课本摘抄\n---\n### 行业内的主要知识点\n#### 软件危机\n#### 软件测试的分类\n- 按测试阶段划分\n\n软件测试 = 程序 + 文档 + 数据\n程序主流方向 B/S架构和手机app\n\n<!-- more -->\n\n#### 软件项目流程\n- 可行性分析\n- 立项\n- 需求\n- 原型设计\n- 概要设计\n- 详细设计\n- 开发\n- 验收\n- 维护\n#### 接口测试\n- 后台和前台的数据\n- 后台和前台可以交互\n### 文档\n- 需求文档\n- 设计文档\n- 开发文档\n- 测试文档\n- 验收文档\n- 用户文档\n### 软件测试\n- 测试计划\n- 测试用例\n- 测试方案\n- 测试报告\n- 测试方案\n- 测试报告（总结）\n\n### 软件测试就是保证\n### 软件测试的分类\n- 通用软件产品\n- 电信行业\n- 金融证券行业\n- 游戏测试\n- 嵌入式软件测试\n- 电子商务软件测试\n\n### 岗位分类\n- 软件测试工程师\n- 硬件测试工程师\n- 自动化工程师\n- 性能测试工程师\n- 安全测试工程师\n\n### 软件测试人员的职责\n- 了解项目需求内容\n- 编写合理的测试计划\n- \n\n作业：\n1. 你对目前软件测试行业现状怎么看？\n2. 你觉得现在的测试人员能力水平如何？\n3. 你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？\n\n### 软件缺陷管理\n\n#### 软件缺陷的定义\n- IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：\n&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。\n- 因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。\n\n#### 软件缺陷的表现\n- 功能、我没有实现或部分实现。\n- 设计不合理，功能我和明确，逻辑不清楚或存在矛盾。\n- 产品实际结果和所期望的结果不一样。\n- 没有达到需求规格说明书所规定的性能指标等。\n- 运行出错，包括运行中断、系统崩溃、界面混乱等。\n- 数据不正确、精度不够、不完整或格式不统一。\n- 用户不能接受的其他问题，如存取时间过长、界面不美观。\n- 硬件或系统软件上存在的其他问题。\n\n#### 软件缺陷示例\n- 计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。\n&emsp;&emsp;软件未达到软件需求规格说明书表明的功能\n- 若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。\n&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围\n- 若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。\n&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标\n- 假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。\n&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误\n- 测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。\n&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好\n\n#### 软件缺陷产生的原因\n&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：\n- 需求解释或者记录错误\n- 用户需求定义错误 \n- 设计说明存在错误 \n- 编码说明、程序代码有误\n- 硬件或者软件系统上存在错误\n- 其他，如文档错误、内容不正确\n\n#### 软件缺陷的根源\n- 交流不充分\n&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等\n- 软件的复杂性\n&emsp;&emsp;功能复杂、开发复杂、测试复杂\n- 开发人员的错误\n&emsp;&emsp;对需求的理解、开发压力、功能与经验\n- 需求的变化\n&emsp;&emsp;需求说明书、设计文档、程序的变更\n- 进度压力\n&emsp;&emsp;项目周期比较紧\n\n#### 缺陷发现的手段\n&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：\n- 评审\n- QA\n- 客户\n\n#### 软件缺陷修的费用\n\n需求规格说明书、设计、编码、测试、发布，费用越来越高\n\n#### 软件缺陷的信息\n\n- 缺陷ID\n- 缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况\n- 缺陷标题*\n- 缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低\n- 缺陷的优先级*\n- 缺陷所属模块*\n- 缺陷记录者\n- 缺陷提交时间\n- 缺陷处理人\n- 处理结果描述\n- 缺陷处理时间\n- 缺陷验证人\n- 缺陷结果描述\n- 缺陷详细描述*\n- 缺陷环境说明\n- 必要的附件\n\n作业：\n1。 \nBUG标题： 一句话描述BUG\nBUG的等级： 致命错误、严重错误、一般、较小、\n测试建议\n提交时间\n软件版本\n软件环境：win7/Android7\n产生概率： 100%\n产生模块\n处理人\n产生步骤： 1。。。2。。。3。。。\n期待结果\n\n#### 软件缺陷分类————BUG类型\n\n- 系统缺陷\n1.由于程序所引起的死机，异常退出\n2.程序死循环\n3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足\n- 数据缺陷\n1.数据计算错误\n2.数据约束错误\n3.数据输入、输出错误\n- 数据库缺陷\n1. 数据库发生死锁\n2. 数据库的表、缺省值未加约束条件\n3. 数据库连接错误\n4. 数据库中的表有过多的空字段\n- 接口缺陷\n1.数据通信错误\n2.程序接口错误\n- 功能缺陷\n1.功能无法实现\n2.功能实现错误\n- 安全性缺陷\n1.用户权限无法实现\n2.超时限制错误\n3.访问控制错误\n4.加密错误\n- 兼容性缺陷\n1.与需求文档配置兼容性不符合\n- 性能缺陷\n1.未达到预期的性能目标\n2.性能测试中出错，导致无法继续进行测试\n- 界面缺陷\n1.操作界面错误\n2.打印内容、格式错误\n3.删除操作未给出提示\n4.长时间操作未给出提示\n5.界面不规范\n- 建议\n1.功能建议\n2.操作建议","slug":"SoftwareTesting","published":1,"date":"2017-08-06T15:10:10.000Z","updated":"2017-12-09T19:13:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4nau5s0008ts2hckikqdw4","content":"<h3 id=\"行业内的主要知识点\"><a href=\"#行业内的主要知识点\" class=\"headerlink\" title=\"行业内的主要知识点\"></a>行业内的主要知识点</h3><h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h4 id=\"软件测试的分类\"><a href=\"#软件测试的分类\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h4><ul>\n<li>按测试阶段划分</li>\n</ul>\n<p>软件测试 = 程序 + 文档 + 数据<br>程序主流方向 B/S架构和手机app</p>\n<a id=\"more\"></a>\n<h4 id=\"软件项目流程\"><a href=\"#软件项目流程\" class=\"headerlink\" title=\"软件项目流程\"></a>软件项目流程</h4><ul>\n<li>可行性分析</li>\n<li>立项</li>\n<li>需求</li>\n<li>原型设计</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>开发</li>\n<li>验收</li>\n<li>维护<h4 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h4></li>\n<li>后台和前台的数据</li>\n<li>后台和前台可以交互<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3></li>\n<li>需求文档</li>\n<li>设计文档</li>\n<li>开发文档</li>\n<li>测试文档</li>\n<li>验收文档</li>\n<li>用户文档<h3 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h3></li>\n<li>测试计划</li>\n<li>测试用例</li>\n<li>测试方案</li>\n<li>测试报告</li>\n<li>测试方案</li>\n<li>测试报告（总结）</li>\n</ul>\n<h3 id=\"软件测试就是保证\"><a href=\"#软件测试就是保证\" class=\"headerlink\" title=\"软件测试就是保证\"></a>软件测试就是保证</h3><h3 id=\"软件测试的分类-1\"><a href=\"#软件测试的分类-1\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h3><ul>\n<li>通用软件产品</li>\n<li>电信行业</li>\n<li>金融证券行业</li>\n<li>游戏测试</li>\n<li>嵌入式软件测试</li>\n<li>电子商务软件测试</li>\n</ul>\n<h3 id=\"岗位分类\"><a href=\"#岗位分类\" class=\"headerlink\" title=\"岗位分类\"></a>岗位分类</h3><ul>\n<li>软件测试工程师</li>\n<li>硬件测试工程师</li>\n<li>自动化工程师</li>\n<li>性能测试工程师</li>\n<li>安全测试工程师</li>\n</ul>\n<h3 id=\"软件测试人员的职责\"><a href=\"#软件测试人员的职责\" class=\"headerlink\" title=\"软件测试人员的职责\"></a>软件测试人员的职责</h3><ul>\n<li>了解项目需求内容</li>\n<li>编写合理的测试计划</li>\n<li></li>\n</ul>\n<p>作业：</p>\n<ol>\n<li>你对目前软件测试行业现状怎么看？</li>\n<li>你觉得现在的测试人员能力水平如何？</li>\n<li>你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？</li>\n</ol>\n<h3 id=\"软件缺陷管理\"><a href=\"#软件缺陷管理\" class=\"headerlink\" title=\"软件缺陷管理\"></a>软件缺陷管理</h3><h4 id=\"软件缺陷的定义\"><a href=\"#软件缺陷的定义\" class=\"headerlink\" title=\"软件缺陷的定义\"></a>软件缺陷的定义</h4><ul>\n<li>IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：<br>&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。</li>\n<li>因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。</li>\n</ul>\n<h4 id=\"软件缺陷的表现\"><a href=\"#软件缺陷的表现\" class=\"headerlink\" title=\"软件缺陷的表现\"></a>软件缺陷的表现</h4><ul>\n<li>功能、我没有实现或部分实现。</li>\n<li>设计不合理，功能我和明确，逻辑不清楚或存在矛盾。</li>\n<li>产品实际结果和所期望的结果不一样。</li>\n<li>没有达到需求规格说明书所规定的性能指标等。</li>\n<li>运行出错，包括运行中断、系统崩溃、界面混乱等。</li>\n<li>数据不正确、精度不够、不完整或格式不统一。</li>\n<li>用户不能接受的其他问题，如存取时间过长、界面不美观。</li>\n<li>硬件或系统软件上存在的其他问题。</li>\n</ul>\n<h4 id=\"软件缺陷示例\"><a href=\"#软件缺陷示例\" class=\"headerlink\" title=\"软件缺陷示例\"></a>软件缺陷示例</h4><ul>\n<li>计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。<br>&emsp;&emsp;软件未达到软件需求规格说明书表明的功能</li>\n<li>若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。<br>&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围</li>\n<li>若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。<br>&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标</li>\n<li>假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。<br>&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误</li>\n<li>测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。<br>&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好</li>\n</ul>\n<h4 id=\"软件缺陷产生的原因\"><a href=\"#软件缺陷产生的原因\" class=\"headerlink\" title=\"软件缺陷产生的原因\"></a>软件缺陷产生的原因</h4><p>&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：</p>\n<ul>\n<li>需求解释或者记录错误</li>\n<li>用户需求定义错误 </li>\n<li>设计说明存在错误 </li>\n<li>编码说明、程序代码有误</li>\n<li>硬件或者软件系统上存在错误</li>\n<li>其他，如文档错误、内容不正确</li>\n</ul>\n<h4 id=\"软件缺陷的根源\"><a href=\"#软件缺陷的根源\" class=\"headerlink\" title=\"软件缺陷的根源\"></a>软件缺陷的根源</h4><ul>\n<li>交流不充分<br>&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等</li>\n<li>软件的复杂性<br>&emsp;&emsp;功能复杂、开发复杂、测试复杂</li>\n<li>开发人员的错误<br>&emsp;&emsp;对需求的理解、开发压力、功能与经验</li>\n<li>需求的变化<br>&emsp;&emsp;需求说明书、设计文档、程序的变更</li>\n<li>进度压力<br>&emsp;&emsp;项目周期比较紧</li>\n</ul>\n<h4 id=\"缺陷发现的手段\"><a href=\"#缺陷发现的手段\" class=\"headerlink\" title=\"缺陷发现的手段\"></a>缺陷发现的手段</h4><p>&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：</p>\n<ul>\n<li>评审</li>\n<li>QA</li>\n<li>客户</li>\n</ul>\n<h4 id=\"软件缺陷修的费用\"><a href=\"#软件缺陷修的费用\" class=\"headerlink\" title=\"软件缺陷修的费用\"></a>软件缺陷修的费用</h4><p>需求规格说明书、设计、编码、测试、发布，费用越来越高</p>\n<h4 id=\"软件缺陷的信息\"><a href=\"#软件缺陷的信息\" class=\"headerlink\" title=\"软件缺陷的信息\"></a>软件缺陷的信息</h4><ul>\n<li>缺陷ID</li>\n<li>缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况</li>\n<li>缺陷标题*</li>\n<li>缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低</li>\n<li>缺陷的优先级*</li>\n<li>缺陷所属模块*</li>\n<li>缺陷记录者</li>\n<li>缺陷提交时间</li>\n<li>缺陷处理人</li>\n<li>处理结果描述</li>\n<li>缺陷处理时间</li>\n<li>缺陷验证人</li>\n<li>缺陷结果描述</li>\n<li>缺陷详细描述*</li>\n<li>缺陷环境说明</li>\n<li>必要的附件</li>\n</ul>\n<p>作业：<br>1。<br>BUG标题： 一句话描述BUG<br>BUG的等级： 致命错误、严重错误、一般、较小、<br>测试建议<br>提交时间<br>软件版本<br>软件环境：win7/Android7<br>产生概率： 100%<br>产生模块<br>处理人<br>产生步骤： 1。。。2。。。3。。。<br>期待结果</p>\n<h4 id=\"软件缺陷分类————BUG类型\"><a href=\"#软件缺陷分类————BUG类型\" class=\"headerlink\" title=\"软件缺陷分类————BUG类型\"></a>软件缺陷分类————BUG类型</h4><ul>\n<li>系统缺陷<br>1.由于程序所引起的死机，异常退出<br>2.程序死循环<br>3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足</li>\n<li>数据缺陷<br>1.数据计算错误<br>2.数据约束错误<br>3.数据输入、输出错误</li>\n<li>数据库缺陷</li>\n</ul>\n<ol>\n<li>数据库发生死锁</li>\n<li>数据库的表、缺省值未加约束条件</li>\n<li>数据库连接错误</li>\n<li>数据库中的表有过多的空字段</li>\n</ol>\n<ul>\n<li>接口缺陷<br>1.数据通信错误<br>2.程序接口错误</li>\n<li>功能缺陷<br>1.功能无法实现<br>2.功能实现错误</li>\n<li>安全性缺陷<br>1.用户权限无法实现<br>2.超时限制错误<br>3.访问控制错误<br>4.加密错误</li>\n<li>兼容性缺陷<br>1.与需求文档配置兼容性不符合</li>\n<li>性能缺陷<br>1.未达到预期的性能目标<br>2.性能测试中出错，导致无法继续进行测试</li>\n<li>界面缺陷<br>1.操作界面错误<br>2.打印内容、格式错误<br>3.删除操作未给出提示<br>4.长时间操作未给出提示<br>5.界面不规范</li>\n<li>建议<br>1.功能建议<br>2.操作建议</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"行业内的主要知识点\"><a href=\"#行业内的主要知识点\" class=\"headerlink\" title=\"行业内的主要知识点\"></a>行业内的主要知识点</h3><h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h4 id=\"软件测试的分类\"><a href=\"#软件测试的分类\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h4><ul>\n<li>按测试阶段划分</li>\n</ul>\n<p>软件测试 = 程序 + 文档 + 数据<br>程序主流方向 B/S架构和手机app</p>","more":"<h4 id=\"软件项目流程\"><a href=\"#软件项目流程\" class=\"headerlink\" title=\"软件项目流程\"></a>软件项目流程</h4><ul>\n<li>可行性分析</li>\n<li>立项</li>\n<li>需求</li>\n<li>原型设计</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>开发</li>\n<li>验收</li>\n<li>维护<h4 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h4></li>\n<li>后台和前台的数据</li>\n<li>后台和前台可以交互<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3></li>\n<li>需求文档</li>\n<li>设计文档</li>\n<li>开发文档</li>\n<li>测试文档</li>\n<li>验收文档</li>\n<li>用户文档<h3 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h3></li>\n<li>测试计划</li>\n<li>测试用例</li>\n<li>测试方案</li>\n<li>测试报告</li>\n<li>测试方案</li>\n<li>测试报告（总结）</li>\n</ul>\n<h3 id=\"软件测试就是保证\"><a href=\"#软件测试就是保证\" class=\"headerlink\" title=\"软件测试就是保证\"></a>软件测试就是保证</h3><h3 id=\"软件测试的分类-1\"><a href=\"#软件测试的分类-1\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h3><ul>\n<li>通用软件产品</li>\n<li>电信行业</li>\n<li>金融证券行业</li>\n<li>游戏测试</li>\n<li>嵌入式软件测试</li>\n<li>电子商务软件测试</li>\n</ul>\n<h3 id=\"岗位分类\"><a href=\"#岗位分类\" class=\"headerlink\" title=\"岗位分类\"></a>岗位分类</h3><ul>\n<li>软件测试工程师</li>\n<li>硬件测试工程师</li>\n<li>自动化工程师</li>\n<li>性能测试工程师</li>\n<li>安全测试工程师</li>\n</ul>\n<h3 id=\"软件测试人员的职责\"><a href=\"#软件测试人员的职责\" class=\"headerlink\" title=\"软件测试人员的职责\"></a>软件测试人员的职责</h3><ul>\n<li>了解项目需求内容</li>\n<li>编写合理的测试计划</li>\n<li></li>\n</ul>\n<p>作业：</p>\n<ol>\n<li>你对目前软件测试行业现状怎么看？</li>\n<li>你觉得现在的测试人员能力水平如何？</li>\n<li>你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？</li>\n</ol>\n<h3 id=\"软件缺陷管理\"><a href=\"#软件缺陷管理\" class=\"headerlink\" title=\"软件缺陷管理\"></a>软件缺陷管理</h3><h4 id=\"软件缺陷的定义\"><a href=\"#软件缺陷的定义\" class=\"headerlink\" title=\"软件缺陷的定义\"></a>软件缺陷的定义</h4><ul>\n<li>IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：<br>&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。</li>\n<li>因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。</li>\n</ul>\n<h4 id=\"软件缺陷的表现\"><a href=\"#软件缺陷的表现\" class=\"headerlink\" title=\"软件缺陷的表现\"></a>软件缺陷的表现</h4><ul>\n<li>功能、我没有实现或部分实现。</li>\n<li>设计不合理，功能我和明确，逻辑不清楚或存在矛盾。</li>\n<li>产品实际结果和所期望的结果不一样。</li>\n<li>没有达到需求规格说明书所规定的性能指标等。</li>\n<li>运行出错，包括运行中断、系统崩溃、界面混乱等。</li>\n<li>数据不正确、精度不够、不完整或格式不统一。</li>\n<li>用户不能接受的其他问题，如存取时间过长、界面不美观。</li>\n<li>硬件或系统软件上存在的其他问题。</li>\n</ul>\n<h4 id=\"软件缺陷示例\"><a href=\"#软件缺陷示例\" class=\"headerlink\" title=\"软件缺陷示例\"></a>软件缺陷示例</h4><ul>\n<li>计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。<br>&emsp;&emsp;软件未达到软件需求规格说明书表明的功能</li>\n<li>若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。<br>&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围</li>\n<li>若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。<br>&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标</li>\n<li>假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。<br>&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误</li>\n<li>测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。<br>&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好</li>\n</ul>\n<h4 id=\"软件缺陷产生的原因\"><a href=\"#软件缺陷产生的原因\" class=\"headerlink\" title=\"软件缺陷产生的原因\"></a>软件缺陷产生的原因</h4><p>&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：</p>\n<ul>\n<li>需求解释或者记录错误</li>\n<li>用户需求定义错误 </li>\n<li>设计说明存在错误 </li>\n<li>编码说明、程序代码有误</li>\n<li>硬件或者软件系统上存在错误</li>\n<li>其他，如文档错误、内容不正确</li>\n</ul>\n<h4 id=\"软件缺陷的根源\"><a href=\"#软件缺陷的根源\" class=\"headerlink\" title=\"软件缺陷的根源\"></a>软件缺陷的根源</h4><ul>\n<li>交流不充分<br>&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等</li>\n<li>软件的复杂性<br>&emsp;&emsp;功能复杂、开发复杂、测试复杂</li>\n<li>开发人员的错误<br>&emsp;&emsp;对需求的理解、开发压力、功能与经验</li>\n<li>需求的变化<br>&emsp;&emsp;需求说明书、设计文档、程序的变更</li>\n<li>进度压力<br>&emsp;&emsp;项目周期比较紧</li>\n</ul>\n<h4 id=\"缺陷发现的手段\"><a href=\"#缺陷发现的手段\" class=\"headerlink\" title=\"缺陷发现的手段\"></a>缺陷发现的手段</h4><p>&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：</p>\n<ul>\n<li>评审</li>\n<li>QA</li>\n<li>客户</li>\n</ul>\n<h4 id=\"软件缺陷修的费用\"><a href=\"#软件缺陷修的费用\" class=\"headerlink\" title=\"软件缺陷修的费用\"></a>软件缺陷修的费用</h4><p>需求规格说明书、设计、编码、测试、发布，费用越来越高</p>\n<h4 id=\"软件缺陷的信息\"><a href=\"#软件缺陷的信息\" class=\"headerlink\" title=\"软件缺陷的信息\"></a>软件缺陷的信息</h4><ul>\n<li>缺陷ID</li>\n<li>缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况</li>\n<li>缺陷标题*</li>\n<li>缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低</li>\n<li>缺陷的优先级*</li>\n<li>缺陷所属模块*</li>\n<li>缺陷记录者</li>\n<li>缺陷提交时间</li>\n<li>缺陷处理人</li>\n<li>处理结果描述</li>\n<li>缺陷处理时间</li>\n<li>缺陷验证人</li>\n<li>缺陷结果描述</li>\n<li>缺陷详细描述*</li>\n<li>缺陷环境说明</li>\n<li>必要的附件</li>\n</ul>\n<p>作业：<br>1。<br>BUG标题： 一句话描述BUG<br>BUG的等级： 致命错误、严重错误、一般、较小、<br>测试建议<br>提交时间<br>软件版本<br>软件环境：win7/Android7<br>产生概率： 100%<br>产生模块<br>处理人<br>产生步骤： 1。。。2。。。3。。。<br>期待结果</p>\n<h4 id=\"软件缺陷分类————BUG类型\"><a href=\"#软件缺陷分类————BUG类型\" class=\"headerlink\" title=\"软件缺陷分类————BUG类型\"></a>软件缺陷分类————BUG类型</h4><ul>\n<li>系统缺陷<br>1.由于程序所引起的死机，异常退出<br>2.程序死循环<br>3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足</li>\n<li>数据缺陷<br>1.数据计算错误<br>2.数据约束错误<br>3.数据输入、输出错误</li>\n<li>数据库缺陷</li>\n</ul>\n<ol>\n<li>数据库发生死锁</li>\n<li>数据库的表、缺省值未加约束条件</li>\n<li>数据库连接错误</li>\n<li>数据库中的表有过多的空字段</li>\n</ol>\n<ul>\n<li>接口缺陷<br>1.数据通信错误<br>2.程序接口错误</li>\n<li>功能缺陷<br>1.功能无法实现<br>2.功能实现错误</li>\n<li>安全性缺陷<br>1.用户权限无法实现<br>2.超时限制错误<br>3.访问控制错误<br>4.加密错误</li>\n<li>兼容性缺陷<br>1.与需求文档配置兼容性不符合</li>\n<li>性能缺陷<br>1.未达到预期的性能目标<br>2.性能测试中出错，导致无法继续进行测试</li>\n<li>界面缺陷<br>1.操作界面错误<br>2.打印内容、格式错误<br>3.删除操作未给出提示<br>4.长时间操作未给出提示<br>5.界面不规范</li>\n<li>建议<br>1.功能建议<br>2.操作建议</li>\n</ul>"},{"title":"关于移动端像素的显示问题","date":"2017-12-09T15:01:33.000Z","_content":"\n在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。\n\n### 像素密度（PPI）\n\n**PPI(Pixel Per Inch)，即表示每英寸有多少像素**，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。\n\n![几种PPI表示](pic1.png)\n\n以iphone6为例，一般像素密度的计算公式为： \n`Math.sqrt(1366*1366 + 640*640)`\n\n但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。\n\n### 设备像素（DP）&& 设备像素比（DPR）\n\n**设备像素（Device pixel），也称物理像素（Physical pixel）**，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。\n\n由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：\n\n![一个像素在不同PPI屏幕上的显示](pic2.png)\n\n越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。\n\n反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。\n\n因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。**这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)**，一般DPR对应着下面这个表：\n\n    | ldpi | mdpi | hdpi | xhdpi\n----|------|------|------|------\nppi | 120  | 160  | 240  | 320\ndpr | 0.75 | 1.0  | 1.5  | 2.0\n\n因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。\n\n### CSS像素\n\n讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。\n\n我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，**CSS中所指的像素px我们一般称为CSS像素**。也就是说CSS像素是一个虚拟的、相对的单位。\n\n![不改变CSS使得元素在屏幕上更大地显示](pic4.png)\n![不改变CSS使得元素在屏幕上更大地显示](pic5.png)\n\n例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与*系统分辨率*下的像素大小相等，**即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。**\n\n![一个CSS像素在不同PPI屏幕上的显示](pic3.png)\n\n举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的*系统分辨率*都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与**系统分辨率与设备像素的比值（即DPR）**进行换算，最终计算出显示在屏幕上的实际设备像素。\n\n上面所指出的dp这种抽象单位称为**设备无关像素（device independent pixel）**。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。\n\n### 视口（Viewport）\n\n正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，**然后再自动地设置一个比例来缩放页面**，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。\n\n![viewport缩放](pic6.jpg)\n\n我们可以通过在`content`中添加`inital-scale`属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。\n\n`<meta name=\"viewport\" content=\"initial-scale=1\">`\n\n我们也可以定义`device-width`属性来控制`viewport`的宽度\n\n`<meta name=\"viewport\" content=\"width=device-width\">`\n\n一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1\n\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no\">`\n\n### 总结（Summary）\n\n通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把`meta`里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。\n\n> 参与资料：\n> \n> [1.深入了解viewport和px](http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml)\n> \n> [2.高性能响应式Web开发实战](https://item.jd.com/11933227.html)","source":"_posts/The-problem-of-mobile-web-developing.md","raw":"---\ntitle: 关于移动端像素的显示问题\ndate: 2017-12-09 23:01:33\ntags: 个人总结\n---\n\n在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。\n\n### 像素密度（PPI）\n\n**PPI(Pixel Per Inch)，即表示每英寸有多少像素**，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。\n\n![几种PPI表示](pic1.png)\n\n以iphone6为例，一般像素密度的计算公式为： \n`Math.sqrt(1366*1366 + 640*640)`\n\n但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。\n\n### 设备像素（DP）&& 设备像素比（DPR）\n\n**设备像素（Device pixel），也称物理像素（Physical pixel）**，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。\n\n由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：\n\n![一个像素在不同PPI屏幕上的显示](pic2.png)\n\n越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。\n\n反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。\n\n因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。**这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)**，一般DPR对应着下面这个表：\n\n    | ldpi | mdpi | hdpi | xhdpi\n----|------|------|------|------\nppi | 120  | 160  | 240  | 320\ndpr | 0.75 | 1.0  | 1.5  | 2.0\n\n因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。\n\n### CSS像素\n\n讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。\n\n我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，**CSS中所指的像素px我们一般称为CSS像素**。也就是说CSS像素是一个虚拟的、相对的单位。\n\n![不改变CSS使得元素在屏幕上更大地显示](pic4.png)\n![不改变CSS使得元素在屏幕上更大地显示](pic5.png)\n\n例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与*系统分辨率*下的像素大小相等，**即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。**\n\n![一个CSS像素在不同PPI屏幕上的显示](pic3.png)\n\n举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的*系统分辨率*都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与**系统分辨率与设备像素的比值（即DPR）**进行换算，最终计算出显示在屏幕上的实际设备像素。\n\n上面所指出的dp这种抽象单位称为**设备无关像素（device independent pixel）**。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。\n\n### 视口（Viewport）\n\n正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，**然后再自动地设置一个比例来缩放页面**，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。\n\n![viewport缩放](pic6.jpg)\n\n我们可以通过在`content`中添加`inital-scale`属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。\n\n`<meta name=\"viewport\" content=\"initial-scale=1\">`\n\n我们也可以定义`device-width`属性来控制`viewport`的宽度\n\n`<meta name=\"viewport\" content=\"width=device-width\">`\n\n一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1\n\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no\">`\n\n### 总结（Summary）\n\n通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把`meta`里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。\n\n> 参与资料：\n> \n> [1.深入了解viewport和px](http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml)\n> \n> [2.高性能响应式Web开发实战](https://item.jd.com/11933227.html)","slug":"The-problem-of-mobile-web-developing","published":1,"updated":"2017-12-09T19:19:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4nau5z0009ts2htcdfatdq","content":"<p>在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。</p>\n<h3 id=\"像素密度（PPI）\"><a href=\"#像素密度（PPI）\" class=\"headerlink\" title=\"像素密度（PPI）\"></a>像素密度（PPI）</h3><p><strong>PPI(Pixel Per Inch)，即表示每英寸有多少像素</strong>，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic1.png\" alt=\"几种PPI表示\"></p>\n<p>以iphone6为例，一般像素密度的计算公式为：<br><code>Math.sqrt(1366*1366 + 640*640)</code></p>\n<p>但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。</p>\n<h3 id=\"设备像素（DP）-amp-amp-设备像素比（DPR）\"><a href=\"#设备像素（DP）-amp-amp-设备像素比（DPR）\" class=\"headerlink\" title=\"设备像素（DP）&amp;&amp; 设备像素比（DPR）\"></a>设备像素（DP）&amp;&amp; 设备像素比（DPR）</h3><p><strong>设备像素（Device pixel），也称物理像素（Physical pixel）</strong>，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。</p>\n<p>由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic2.png\" alt=\"一个像素在不同PPI屏幕上的显示\"></p>\n<p>越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。</p>\n<p>反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。</p>\n<p>因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。<strong>这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)</strong>，一般DPR对应着下面这个表：</p>\n<pre><code>| ldpi | mdpi | hdpi | xhdpi\n</code></pre><p>—-|——|——|——|——<br>ppi | 120  | 160  | 240  | 320<br>dpr | 0.75 | 1.0  | 1.5  | 2.0</p>\n<p>因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。</p>\n<h3 id=\"CSS像素\"><a href=\"#CSS像素\" class=\"headerlink\" title=\"CSS像素\"></a>CSS像素</h3><p>讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。</p>\n<p>我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，<strong>CSS中所指的像素px我们一般称为CSS像素</strong>。也就是说CSS像素是一个虚拟的、相对的单位。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic4.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"><br><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic5.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"></p>\n<p>例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与<em>系统分辨率</em>下的像素大小相等，<strong>即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。</strong></p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic3.png\" alt=\"一个CSS像素在不同PPI屏幕上的显示\"></p>\n<p>举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的<em>系统分辨率</em>都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与<strong>系统分辨率与设备像素的比值（即DPR）</strong>进行换算，最终计算出显示在屏幕上的实际设备像素。</p>\n<p>上面所指出的dp这种抽象单位称为<strong>设备无关像素（device independent pixel）</strong>。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。</p>\n<h3 id=\"视口（Viewport）\"><a href=\"#视口（Viewport）\" class=\"headerlink\" title=\"视口（Viewport）\"></a>视口（Viewport）</h3><p>正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，<strong>然后再自动地设置一个比例来缩放页面</strong>，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic6.jpg\" alt=\"viewport缩放\"></p>\n<p>我们可以通过在<code>content</code>中添加<code>inital-scale</code>属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;</code></p>\n<p>我们也可以定义<code>device-width</code>属性来控制<code>viewport</code>的宽度</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></p>\n<p>一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;</code></p>\n<h3 id=\"总结（Summary）\"><a href=\"#总结（Summary）\" class=\"headerlink\" title=\"总结（Summary）\"></a>总结（Summary）</h3><p>通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把<code>meta</code>里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。</p>\n<blockquote>\n<p>参与资料：</p>\n<p><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml\" target=\"_blank\" rel=\"external\">1.深入了解viewport和px</a></p>\n<p><a href=\"https://item.jd.com/11933227.html\" target=\"_blank\" rel=\"external\">2.高性能响应式Web开发实战</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。</p>\n<h3 id=\"像素密度（PPI）\"><a href=\"#像素密度（PPI）\" class=\"headerlink\" title=\"像素密度（PPI）\"></a>像素密度（PPI）</h3><p><strong>PPI(Pixel Per Inch)，即表示每英寸有多少像素</strong>，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic1.png\" alt=\"几种PPI表示\"></p>\n<p>以iphone6为例，一般像素密度的计算公式为：<br><code>Math.sqrt(1366*1366 + 640*640)</code></p>\n<p>但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。</p>\n<h3 id=\"设备像素（DP）-amp-amp-设备像素比（DPR）\"><a href=\"#设备像素（DP）-amp-amp-设备像素比（DPR）\" class=\"headerlink\" title=\"设备像素（DP）&amp;&amp; 设备像素比（DPR）\"></a>设备像素（DP）&amp;&amp; 设备像素比（DPR）</h3><p><strong>设备像素（Device pixel），也称物理像素（Physical pixel）</strong>，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。</p>\n<p>由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic2.png\" alt=\"一个像素在不同PPI屏幕上的显示\"></p>\n<p>越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。</p>\n<p>反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。</p>\n<p>因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。<strong>这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)</strong>，一般DPR对应着下面这个表：</p>\n<pre><code>| ldpi | mdpi | hdpi | xhdpi\n</code></pre><p>—-|——|——|——|——<br>ppi | 120  | 160  | 240  | 320<br>dpr | 0.75 | 1.0  | 1.5  | 2.0</p>\n<p>因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。</p>\n<h3 id=\"CSS像素\"><a href=\"#CSS像素\" class=\"headerlink\" title=\"CSS像素\"></a>CSS像素</h3><p>讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。</p>\n<p>我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，<strong>CSS中所指的像素px我们一般称为CSS像素</strong>。也就是说CSS像素是一个虚拟的、相对的单位。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic4.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"><br><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic5.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"></p>\n<p>例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与<em>系统分辨率</em>下的像素大小相等，<strong>即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。</strong></p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic3.png\" alt=\"一个CSS像素在不同PPI屏幕上的显示\"></p>\n<p>举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的<em>系统分辨率</em>都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与<strong>系统分辨率与设备像素的比值（即DPR）</strong>进行换算，最终计算出显示在屏幕上的实际设备像素。</p>\n<p>上面所指出的dp这种抽象单位称为<strong>设备无关像素（device independent pixel）</strong>。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。</p>\n<h3 id=\"视口（Viewport）\"><a href=\"#视口（Viewport）\" class=\"headerlink\" title=\"视口（Viewport）\"></a>视口（Viewport）</h3><p>正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，<strong>然后再自动地设置一个比例来缩放页面</strong>，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic6.jpg\" alt=\"viewport缩放\"></p>\n<p>我们可以通过在<code>content</code>中添加<code>inital-scale</code>属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;</code></p>\n<p>我们也可以定义<code>device-width</code>属性来控制<code>viewport</code>的宽度</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></p>\n<p>一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;</code></p>\n<h3 id=\"总结（Summary）\"><a href=\"#总结（Summary）\" class=\"headerlink\" title=\"总结（Summary）\"></a>总结（Summary）</h3><p>通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把<code>meta</code>里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。</p>\n<blockquote>\n<p>参与资料：</p>\n<p><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml\" target=\"_blank\" rel=\"external\">1.深入了解viewport和px</a></p>\n<p><a href=\"https://item.jd.com/11933227.html\" target=\"_blank\" rel=\"external\">2.高性能响应式Web开发实战</a></p>\n</blockquote>\n"},{"title":"双栏布局（一）","date":"2017-04-26T16:07:09.000Z","_content":"\n今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。\n\n### 需求说明：\n\n这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：\n\n<!-- more -->\n\n```HTML\n<!-- demo1 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        width: 200px;\n        height: 100px;\n        float: left;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        height: 130px;\n        background-color: #19bd8e;\n        margin-left: 220px;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"right-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n然后做成的事例大概就是这个样子：\n\n![demo1](demo1.gif)\n\n上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。\n\n**注意：左卡片要浮动，右卡片不要设置宽度！！**\n\n不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？\n\n粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：\n\n```html\n<!-- demo2.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        height: 100px;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        width: 200px;\n        float: right;\n        height: 130px;\n        background-color: #19bd8e;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：\n\n```html\n<!-- demo3.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .container{\n        position: relative;\n    }\n    .left-panel{\n        height: 130px;\n        background: #d20e67;\n        margin-right: 200px;\n    }\n    .right-panel{\n        width: 200px;\n        height: 110px;\n        background-color: #19bd8e;\n        position: absolute;\n        right: 0;\n        top: 0;\n        padding-top: 20px;\n        text-align: center;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n    </div>\n</body>\n</html>\n```\n\n效果如下图：\n\n![demo3](demo3.gif)\n\n*[此案例在线demo地址：](http://lenkuntang.cn/blogDemo/interestingCSS/index.html)*","source":"_posts/interestingCSS.md","raw":"---\ntitle: 双栏布局（一）\ndate: 2017-04-27 00:07:09\ntags: 每周一练\n---\n\n今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。\n\n### 需求说明：\n\n这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：\n\n<!-- more -->\n\n```HTML\n<!-- demo1 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        width: 200px;\n        height: 100px;\n        float: left;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        height: 130px;\n        background-color: #19bd8e;\n        margin-left: 220px;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"right-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n然后做成的事例大概就是这个样子：\n\n![demo1](demo1.gif)\n\n上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。\n\n**注意：左卡片要浮动，右卡片不要设置宽度！！**\n\n不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？\n\n粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：\n\n```html\n<!-- demo2.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        height: 100px;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        width: 200px;\n        float: right;\n        height: 130px;\n        background-color: #19bd8e;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：\n\n```html\n<!-- demo3.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .container{\n        position: relative;\n    }\n    .left-panel{\n        height: 130px;\n        background: #d20e67;\n        margin-right: 200px;\n    }\n    .right-panel{\n        width: 200px;\n        height: 110px;\n        background-color: #19bd8e;\n        position: absolute;\n        right: 0;\n        top: 0;\n        padding-top: 20px;\n        text-align: center;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n    </div>\n</body>\n</html>\n```\n\n效果如下图：\n\n![demo3](demo3.gif)\n\n*[此案例在线demo地址：](http://lenkuntang.cn/blogDemo/interestingCSS/index.html)*","slug":"interestingCSS","published":1,"updated":"2017-12-09T19:08:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4nau62000cts2hv82fw1bp","content":"<p>今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。</p>\n<h3 id=\"需求说明：\"><a href=\"#需求说明：\" class=\"headerlink\" title=\"需求说明：\"></a>需求说明：</h3><p>这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo1 --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        margin-left: 220px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后做成的事例大概就是这个样子：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo1.gif\" alt=\"demo1\"></p>\n<p>上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。</p>\n<p><strong>注意：左卡片要浮动，右卡片不要设置宽度！！</strong></p>\n<p>不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？</p>\n<p>粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo2.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        float: right;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo3.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .container&#123;</span></div><div class=\"line\"><span class=\"undefined\">        position: relative;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        margin-right: 200px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 110px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        position: absolute;</span></div><div class=\"line\"><span class=\"undefined\">        right: 0;</span></div><div class=\"line\"><span class=\"undefined\">        top: 0;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 20px;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo3.gif\" alt=\"demo3\"></p>\n<p><em><a href=\"http://lenkuntang.cn/blogDemo/interestingCSS/index.html\" target=\"_blank\" rel=\"external\">此案例在线demo地址：</a></em></p>\n","site":{"data":{}},"excerpt":"<p>今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。</p>\n<h3 id=\"需求说明：\"><a href=\"#需求说明：\" class=\"headerlink\" title=\"需求说明：\"></a>需求说明：</h3><p>这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo1 --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        margin-left: 220px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后做成的事例大概就是这个样子：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo1.gif\" alt=\"demo1\"></p>\n<p>上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。</p>\n<p><strong>注意：左卡片要浮动，右卡片不要设置宽度！！</strong></p>\n<p>不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？</p>\n<p>粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo2.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        float: right;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo3.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .container&#123;</span></div><div class=\"line\"><span class=\"undefined\">        position: relative;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        margin-right: 200px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 110px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        position: absolute;</span></div><div class=\"line\"><span class=\"undefined\">        right: 0;</span></div><div class=\"line\"><span class=\"undefined\">        top: 0;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 20px;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo3.gif\" alt=\"demo3\"></p>\n<p><em><a href=\"http://lenkuntang.cn/blogDemo/interestingCSS/index.html\" target=\"_blank\" rel=\"external\">此案例在线demo地址：</a></em></p>"},{"layout":"[post]","title":"mac下卸载Node.js并使用nvm来管理Node版本","date":"2018-11-11T17:07:00.000Z","_content":"\n> 转载自：https://www.zhihu.com/question/27389115/answer/36434788\n> 转载自：https://blog.csdn.net/xieamy/article/details/70270039\n\n<!-- more -->\n\n### 前言\n\n因为不小心的缘故，把自己电脑上的node版本由LTS升到了Current，从而遇到了之前有一个基于vue-cli上搭建的项目跑不起来，在读取配置文件的时候直接报fs模块的错误，因此有了想卸载Node.js再从新安装的想法。\n\n### 当前环境\n\n当前的环境是 Mac os Sierra 10.12.6, 由于之前是通过直接在官网上下载安装包的方式来安装Node，并没有使用类似n或者nvm这类的Node版本管理工具，所以卸载的方法有点不一样。\n\n### 删除代码\n\n1. 删除/usr/local/lib中的所有node和node_modules\n2. 删除/usr/local/lib中的所有node和node_modules的文件夹\n3. 如果是从brew安装的, 运行brew uninstall node\n4. 检查~/中所有的local, lib或者include文件夹, 删除里面所有node和node_modules\n5. 在/usr/local/bin中, 删除所有node的可执行文件\n6. 最后运行以下代码:\n\n```\nsudo rm /usr/local/bin/npm\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\nsudo rm -rf ~/.npm\nsudo rm -rf ~/.node-gyp\nsudo rm /opt/local/bin/node\nsudo rm /opt/local/include/node\nsudo rm -rf /opt/local/lib/node_modules\n\n```\n\n### 安装nvm\n \n打开nvm的github地址：[https://github.com/creationix/nvm](https://github.com/creationix/nvm)。在下面的简介中找到install，按照指示执行代码：\n\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash`\n\n当安装好之后会提示：\n\n```\n=> Appending nvm source string to /Users/kuntang/.bash_profile\n=> Appending bash_completion source string to /Users/kuntang/.bash_profile\n=> Close and reopen your terminal to start using nvm or run the following to use it now:\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\nTomzi-Maxs-MacBook-Pro:bin kuntang$ nvm\n-bash: nvm: command not found\n```\n\n这个时候直接敲 nvm还不能执行，需要执行一下它提示的代码：\n\n`export NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm`\n\n这样就可以使用nvm还管理node版本了。\n","source":"_posts/manage-Node-js-version-via-mvn.md","raw":"---\nlayout: '[post]'\ntitle: mac下卸载Node.js并使用nvm来管理Node版本\ndate: 2018-11-12 01:07:00\ntags: 转载\n---\n\n> 转载自：https://www.zhihu.com/question/27389115/answer/36434788\n> 转载自：https://blog.csdn.net/xieamy/article/details/70270039\n\n<!-- more -->\n\n### 前言\n\n因为不小心的缘故，把自己电脑上的node版本由LTS升到了Current，从而遇到了之前有一个基于vue-cli上搭建的项目跑不起来，在读取配置文件的时候直接报fs模块的错误，因此有了想卸载Node.js再从新安装的想法。\n\n### 当前环境\n\n当前的环境是 Mac os Sierra 10.12.6, 由于之前是通过直接在官网上下载安装包的方式来安装Node，并没有使用类似n或者nvm这类的Node版本管理工具，所以卸载的方法有点不一样。\n\n### 删除代码\n\n1. 删除/usr/local/lib中的所有node和node_modules\n2. 删除/usr/local/lib中的所有node和node_modules的文件夹\n3. 如果是从brew安装的, 运行brew uninstall node\n4. 检查~/中所有的local, lib或者include文件夹, 删除里面所有node和node_modules\n5. 在/usr/local/bin中, 删除所有node的可执行文件\n6. 最后运行以下代码:\n\n```\nsudo rm /usr/local/bin/npm\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\nsudo rm -rf ~/.npm\nsudo rm -rf ~/.node-gyp\nsudo rm /opt/local/bin/node\nsudo rm /opt/local/include/node\nsudo rm -rf /opt/local/lib/node_modules\n\n```\n\n### 安装nvm\n \n打开nvm的github地址：[https://github.com/creationix/nvm](https://github.com/creationix/nvm)。在下面的简介中找到install，按照指示执行代码：\n\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash`\n\n当安装好之后会提示：\n\n```\n=> Appending nvm source string to /Users/kuntang/.bash_profile\n=> Appending bash_completion source string to /Users/kuntang/.bash_profile\n=> Close and reopen your terminal to start using nvm or run the following to use it now:\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\nTomzi-Maxs-MacBook-Pro:bin kuntang$ nvm\n-bash: nvm: command not found\n```\n\n这个时候直接敲 nvm还不能执行，需要执行一下它提示的代码：\n\n`export NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm`\n\n这样就可以使用nvm还管理node版本了。\n","slug":"manage-Node-js-version-via-mvn","published":1,"updated":"2018-11-11T17:15:41.056Z","comments":1,"photos":[],"link":"","_id":"cjy4nau64000dts2h6vpb6dwj","content":"<blockquote>\n<p>转载自：<a href=\"https://www.zhihu.com/question/27389115/answer/36434788\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/27389115/answer/36434788</a><br>转载自：<a href=\"https://blog.csdn.net/xieamy/article/details/70270039\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/xieamy/article/details/70270039</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>因为不小心的缘故，把自己电脑上的node版本由LTS升到了Current，从而遇到了之前有一个基于vue-cli上搭建的项目跑不起来，在读取配置文件的时候直接报fs模块的错误，因此有了想卸载Node.js再从新安装的想法。</p>\n<h3 id=\"当前环境\"><a href=\"#当前环境\" class=\"headerlink\" title=\"当前环境\"></a>当前环境</h3><p>当前的环境是 Mac os Sierra 10.12.6, 由于之前是通过直接在官网上下载安装包的方式来安装Node，并没有使用类似n或者nvm这类的Node版本管理工具，所以卸载的方法有点不一样。</p>\n<h3 id=\"删除代码\"><a href=\"#删除代码\" class=\"headerlink\" title=\"删除代码\"></a>删除代码</h3><ol>\n<li>删除/usr/local/lib中的所有node和node_modules</li>\n<li>删除/usr/local/lib中的所有node和node_modules的文件夹</li>\n<li>如果是从brew安装的, 运行brew uninstall node</li>\n<li>检查~/中所有的local, lib或者include文件夹, 删除里面所有node和node_modules</li>\n<li>在/usr/local/bin中, 删除所有node的可执行文件</li>\n<li>最后运行以下代码:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo rm /usr/local/bin/npm</div><div class=\"line\">sudo rm /usr/local/share/man/man1/node.1</div><div class=\"line\">sudo rm /usr/local/lib/dtrace/node.d</div><div class=\"line\">sudo rm -rf ~/.npm</div><div class=\"line\">sudo rm -rf ~/.node-gyp</div><div class=\"line\">sudo rm /opt/local/bin/node</div><div class=\"line\">sudo rm /opt/local/include/node</div><div class=\"line\">sudo rm -rf /opt/local/lib/node_modules</div></pre></td></tr></table></figure>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><p>打开nvm的github地址：<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">https://github.com/creationix/nvm</a>。在下面的简介中找到install，按照指示执行代码：</p>\n<p><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash</code></p>\n<p>当安装好之后会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">=&gt; Appending nvm source string to /Users/kuntang/.bash_profile</div><div class=\"line\">=&gt; Appending bash_completion source string to /Users/kuntang/.bash_profile</div><div class=\"line\">=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:</div><div class=\"line\"></div><div class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</div><div class=\"line\">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</div><div class=\"line\">Tomzi-Maxs-MacBook-Pro:bin kuntang$ nvm</div><div class=\"line\">-bash: nvm: command not found</div></pre></td></tr></table></figure>\n<p>这个时候直接敲 nvm还不能执行，需要执行一下它提示的代码：</p>\n<p><code>export NVM_DIR=&quot;$HOME/.nvm&quot;\n[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</code></p>\n<p>这样就可以使用nvm还管理node版本了。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>转载自：<a href=\"https://www.zhihu.com/question/27389115/answer/36434788\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/27389115/answer/36434788</a><br>转载自：<a href=\"https://blog.csdn.net/xieamy/article/details/70270039\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/xieamy/article/details/70270039</a></p>\n</blockquote>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>因为不小心的缘故，把自己电脑上的node版本由LTS升到了Current，从而遇到了之前有一个基于vue-cli上搭建的项目跑不起来，在读取配置文件的时候直接报fs模块的错误，因此有了想卸载Node.js再从新安装的想法。</p>\n<h3 id=\"当前环境\"><a href=\"#当前环境\" class=\"headerlink\" title=\"当前环境\"></a>当前环境</h3><p>当前的环境是 Mac os Sierra 10.12.6, 由于之前是通过直接在官网上下载安装包的方式来安装Node，并没有使用类似n或者nvm这类的Node版本管理工具，所以卸载的方法有点不一样。</p>\n<h3 id=\"删除代码\"><a href=\"#删除代码\" class=\"headerlink\" title=\"删除代码\"></a>删除代码</h3><ol>\n<li>删除/usr/local/lib中的所有node和node_modules</li>\n<li>删除/usr/local/lib中的所有node和node_modules的文件夹</li>\n<li>如果是从brew安装的, 运行brew uninstall node</li>\n<li>检查~/中所有的local, lib或者include文件夹, 删除里面所有node和node_modules</li>\n<li>在/usr/local/bin中, 删除所有node的可执行文件</li>\n<li>最后运行以下代码:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo rm /usr/local/bin/npm</div><div class=\"line\">sudo rm /usr/local/share/man/man1/node.1</div><div class=\"line\">sudo rm /usr/local/lib/dtrace/node.d</div><div class=\"line\">sudo rm -rf ~/.npm</div><div class=\"line\">sudo rm -rf ~/.node-gyp</div><div class=\"line\">sudo rm /opt/local/bin/node</div><div class=\"line\">sudo rm /opt/local/include/node</div><div class=\"line\">sudo rm -rf /opt/local/lib/node_modules</div></pre></td></tr></table></figure>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h3><p>打开nvm的github地址：<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">https://github.com/creationix/nvm</a>。在下面的简介中找到install，按照指示执行代码：</p>\n<p><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash</code></p>\n<p>当安装好之后会提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">=&gt; Appending nvm source string to /Users/kuntang/.bash_profile</div><div class=\"line\">=&gt; Appending bash_completion source string to /Users/kuntang/.bash_profile</div><div class=\"line\">=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:</div><div class=\"line\"></div><div class=\"line\">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class=\"line\">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</div><div class=\"line\">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</div><div class=\"line\">Tomzi-Maxs-MacBook-Pro:bin kuntang$ nvm</div><div class=\"line\">-bash: nvm: command not found</div></pre></td></tr></table></figure>\n<p>这个时候直接敲 nvm还不能执行，需要执行一下它提示的代码：</p>\n<p><code>export NVM_DIR=&quot;$HOME/.nvm&quot;\n[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</code></p>\n<p>这样就可以使用nvm还管理node版本了。</p>"},{"title":"如何通过JS通过媒体查询规则来做样式控制","date":"2017-12-10T12:33:32.000Z","_content":"\n在移动开发中，我们可以通过CSS的@media媒体查询来控制在不同屏幕宽度上应用不同的样式，但是在某些情况下，我们也希望可以通过脚本来作更多的控制。下面就通过一个新特性`window.matchMedia`来作控制。\n\n通过传入一个@media规则进window.matchMedia方法会返回一个新的MediaQueryList 对象，这个对象表示指定的媒体查询字符串解析后的结果。\n\n`mql = window.matchMedia(mediaQueryString)`\n\n其中mediaQueryString参数是一个字符串，表示即将返回一个新MediaQueryList对象的媒体查询。\n\n> [更多详细查阅 MDN API](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia)\n\nMediaQueryList对象在一个document上维持着一系列的媒体查询，并负责处理当媒体查询在其document上发生变化时向监听器进行通知的发送。\n\n如果你需要以编程方式来检测一个document上的媒体查询的值的变化，这个MediaQueryList对象使得通过观察其document而检测它的媒体查询的值的变化成为可能，而不是周期性地对这些媒体查询的值进行检查。\n\n它有两个方法：\n\n`void addListener(MediaQueryListListener listener);`\n`void removeListener(MediaQueryListListener listener);`\n\n**MediaQueryList对象是一个非标准的对象，使用时应注意其在浏览器上的可用性。**\n\n> [关于MediaQueryList的介绍](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList)\n\n下面是一个兼容例子：\n\n```\nif (window.matchMedia) {\n    var mql = window.matchMedia(\"(min-width: 480px\");\n    mql.addListener(mediaChangeHandler);\n    mediaChangeHandler(mql);\n} else {\n    window.addEventListener('resize', function() {\n        var innerWidth = window.innerWidth\n                    || document.documentElement.clientWidth\n                    || document.body.clientWidth;\n        mediaChangeHandler(innerWidth >= 480 ? {matches: true} : {matches: false}, false);\n    })    \n}\n\nfunction mediaChangeHandler(mql) {\n    if (mql.matches) {\n        // 匹配成功时\n        \n    } else {\n        // 匹配失败时\n    }\n}\n```","source":"_posts/mediaMatch.md","raw":"---\ntitle: 如何通过JS通过媒体查询规则来做样式控制\ndate: 2017-12-10 20:33:32\ntags: 记录\n---\n\n在移动开发中，我们可以通过CSS的@media媒体查询来控制在不同屏幕宽度上应用不同的样式，但是在某些情况下，我们也希望可以通过脚本来作更多的控制。下面就通过一个新特性`window.matchMedia`来作控制。\n\n通过传入一个@media规则进window.matchMedia方法会返回一个新的MediaQueryList 对象，这个对象表示指定的媒体查询字符串解析后的结果。\n\n`mql = window.matchMedia(mediaQueryString)`\n\n其中mediaQueryString参数是一个字符串，表示即将返回一个新MediaQueryList对象的媒体查询。\n\n> [更多详细查阅 MDN API](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia)\n\nMediaQueryList对象在一个document上维持着一系列的媒体查询，并负责处理当媒体查询在其document上发生变化时向监听器进行通知的发送。\n\n如果你需要以编程方式来检测一个document上的媒体查询的值的变化，这个MediaQueryList对象使得通过观察其document而检测它的媒体查询的值的变化成为可能，而不是周期性地对这些媒体查询的值进行检查。\n\n它有两个方法：\n\n`void addListener(MediaQueryListListener listener);`\n`void removeListener(MediaQueryListListener listener);`\n\n**MediaQueryList对象是一个非标准的对象，使用时应注意其在浏览器上的可用性。**\n\n> [关于MediaQueryList的介绍](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList)\n\n下面是一个兼容例子：\n\n```\nif (window.matchMedia) {\n    var mql = window.matchMedia(\"(min-width: 480px\");\n    mql.addListener(mediaChangeHandler);\n    mediaChangeHandler(mql);\n} else {\n    window.addEventListener('resize', function() {\n        var innerWidth = window.innerWidth\n                    || document.documentElement.clientWidth\n                    || document.body.clientWidth;\n        mediaChangeHandler(innerWidth >= 480 ? {matches: true} : {matches: false}, false);\n    })    \n}\n\nfunction mediaChangeHandler(mql) {\n    if (mql.matches) {\n        // 匹配成功时\n        \n    } else {\n        // 匹配失败时\n    }\n}\n```","slug":"mediaMatch","published":1,"updated":"2017-12-10T12:35:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy4nau65000gts2htf1wbjbs","content":"<p>在移动开发中，我们可以通过CSS的@media媒体查询来控制在不同屏幕宽度上应用不同的样式，但是在某些情况下，我们也希望可以通过脚本来作更多的控制。下面就通过一个新特性<code>window.matchMedia</code>来作控制。</p>\n<p>通过传入一个@media规则进window.matchMedia方法会返回一个新的MediaQueryList 对象，这个对象表示指定的媒体查询字符串解析后的结果。</p>\n<p><code>mql = window.matchMedia(mediaQueryString)</code></p>\n<p>其中mediaQueryString参数是一个字符串，表示即将返回一个新MediaQueryList对象的媒体查询。</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\" target=\"_blank\" rel=\"external\">更多详细查阅 MDN API</a></p>\n</blockquote>\n<p>MediaQueryList对象在一个document上维持着一系列的媒体查询，并负责处理当媒体查询在其document上发生变化时向监听器进行通知的发送。</p>\n<p>如果你需要以编程方式来检测一个document上的媒体查询的值的变化，这个MediaQueryList对象使得通过观察其document而检测它的媒体查询的值的变化成为可能，而不是周期性地对这些媒体查询的值进行检查。</p>\n<p>它有两个方法：</p>\n<p><code>void addListener(MediaQueryListListener listener);</code><br><code>void removeListener(MediaQueryListListener listener);</code></p>\n<p><strong>MediaQueryList对象是一个非标准的对象，使用时应注意其在浏览器上的可用性。</strong></p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList\" target=\"_blank\" rel=\"external\">关于MediaQueryList的介绍</a></p>\n</blockquote>\n<p>下面是一个兼容例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (window.matchMedia) &#123;</div><div class=\"line\">    var mql = window.matchMedia(&quot;(min-width: 480px&quot;);</div><div class=\"line\">    mql.addListener(mediaChangeHandler);</div><div class=\"line\">    mediaChangeHandler(mql);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    window.addEventListener(&apos;resize&apos;, function() &#123;</div><div class=\"line\">        var innerWidth = window.innerWidth</div><div class=\"line\">                    || document.documentElement.clientWidth</div><div class=\"line\">                    || document.body.clientWidth;</div><div class=\"line\">        mediaChangeHandler(innerWidth &gt;= 480 ? &#123;matches: true&#125; : &#123;matches: false&#125;, false);</div><div class=\"line\">    &#125;)    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function mediaChangeHandler(mql) &#123;</div><div class=\"line\">    if (mql.matches) &#123;</div><div class=\"line\">        // 匹配成功时</div><div class=\"line\">        </div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        // 匹配失败时</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在移动开发中，我们可以通过CSS的@media媒体查询来控制在不同屏幕宽度上应用不同的样式，但是在某些情况下，我们也希望可以通过脚本来作更多的控制。下面就通过一个新特性<code>window.matchMedia</code>来作控制。</p>\n<p>通过传入一个@media规则进window.matchMedia方法会返回一个新的MediaQueryList 对象，这个对象表示指定的媒体查询字符串解析后的结果。</p>\n<p><code>mql = window.matchMedia(mediaQueryString)</code></p>\n<p>其中mediaQueryString参数是一个字符串，表示即将返回一个新MediaQueryList对象的媒体查询。</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\" target=\"_blank\" rel=\"external\">更多详细查阅 MDN API</a></p>\n</blockquote>\n<p>MediaQueryList对象在一个document上维持着一系列的媒体查询，并负责处理当媒体查询在其document上发生变化时向监听器进行通知的发送。</p>\n<p>如果你需要以编程方式来检测一个document上的媒体查询的值的变化，这个MediaQueryList对象使得通过观察其document而检测它的媒体查询的值的变化成为可能，而不是周期性地对这些媒体查询的值进行检查。</p>\n<p>它有两个方法：</p>\n<p><code>void addListener(MediaQueryListListener listener);</code><br><code>void removeListener(MediaQueryListListener listener);</code></p>\n<p><strong>MediaQueryList对象是一个非标准的对象，使用时应注意其在浏览器上的可用性。</strong></p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList\" target=\"_blank\" rel=\"external\">关于MediaQueryList的介绍</a></p>\n</blockquote>\n<p>下面是一个兼容例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (window.matchMedia) &#123;</div><div class=\"line\">    var mql = window.matchMedia(&quot;(min-width: 480px&quot;);</div><div class=\"line\">    mql.addListener(mediaChangeHandler);</div><div class=\"line\">    mediaChangeHandler(mql);</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">    window.addEventListener(&apos;resize&apos;, function() &#123;</div><div class=\"line\">        var innerWidth = window.innerWidth</div><div class=\"line\">                    || document.documentElement.clientWidth</div><div class=\"line\">                    || document.body.clientWidth;</div><div class=\"line\">        mediaChangeHandler(innerWidth &gt;= 480 ? &#123;matches: true&#125; : &#123;matches: false&#125;, false);</div><div class=\"line\">    &#125;)    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function mediaChangeHandler(mql) &#123;</div><div class=\"line\">    if (mql.matches) &#123;</div><div class=\"line\">        // 匹配成功时</div><div class=\"line\">        </div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        // 匹配失败时</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"[post]","title":"Nginx conf 常用配置","date":"2019-07-15T15:52:15.000Z","_content":"\n因为不熟悉Nginx，对他的匹配规则似懂非懂，所以平时在部署自己项目的时候经常会遇到各种问题，因此在此记录一下一路踩过的坑。\n\n### nginx.conf 与 conf.d 目录\n\n首先Nginx里有一份基础配置nginx.conf文件，里面通常是nginx的一些默认配置信息，注意在默认配置前有一行引入自定义文件的代码\n```\n# Load modular configuration files from the /etc/nginx/conf.d directory.\n# See http://nginx.org/en/docs/ngx_core_module.html#include\n# for more information.\ninclude /etc/nginx/conf.d/*.conf;\n```\n最后一行把 `conf` 目录下的所有以.conf后缀结尾的文件都引入进来，而因为Nginx配置文件的规则是前面先匹配到的先生效，所以我们可以把自己写的自定义配置文件在 `conf` 目录下，然后覆盖后面的默认配置。\n\n### server 块\n\n关于server块目前比较明白的有以下几个字段：\n\n- `listen` 代表着监听的端口\n  > 网页通常是监听80、443端口，还有一些服务应用应该监听对应\b的端口，如21、25等。\n- `server_name` 代表监听的域名\n  > 通常是在域名服务商通过设置相应的域名然后解析到服务器的ip，其设置的域名便是 `server_name` 的值\n- `root` 匹配后指向的访问路径（拼接匹配的url部分）\n  > \b要注意当前nginx使用的用户是否有该对指向的路径有相应的访问权限。\n\n### location 块\n\n`location` 处于 `server` 块下，一个 `server` 块可以有若干个 `location` ，先匹配到的 `location` 规则先处理，并停止往后匹配。\n\n```\nserver {\n  ...\n  location [pattern rule] {\n    ...\n  }\n}\n```\n\n`location` 后面接对应的 url 匹配规则，可以是要匹配的字符串（字符串后面可带`/`也可以不带），也可以是正则。\n\n通过 `location` 实现请求转发来处理前端接口跨域问题，还可以通过它来实现外部对内部服务的代理访问。一般我会用到以下几个字段：\n\n- `root` 匹配后指向的访问路径（拼接匹配的url部分）\n- `alias` 匹配后指向的访问路径（替换匹配的url部分）\n- `proxy_pass` 把请求转发到指向地\b址\n- `index` 匹配后指向的访问路径下的文件\n\n#### root 与 alias\n\n当 `location` 是用字符串来匹配时，配置 `root` 与 `alias` 是区别的：当 `location` 匹配到相应的 `url` `后，root` 对在匹配的规则后接上 `root` \b指向的路径，而 `alisa` 会直接替换掉匹配的url部分。\n\n举个例子：\n\n```\nlocation ~ ^/xingcard/ {\n  root /data/www/;\n}\n```\n\n当一个URI是 `/app/xingcard/index.html` 时，nginx将会返回服务器上 `/data/www/app/xingcard/index.html`的文件。root会根据完整的URI请求来映射，也就是/path/uri。\n\n如果我们把 `root` 换成 `alias` 的话：\n\n```\nlocation ~ ^/app/ {\n  alais /data/www/;\n}\n```\n\n则nginx会将`/data/www/xingcard/index.html`返回给客户端。区别就是在于有没有替换掉\b `location` 匹配的 `app`。\n\n> 注意：\n> 1. 使用alias时，目录名后面一定要加\"/\"。\n> 2. alias可以指定任何名称。\n> 3. alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。\n> 4. alias只能位于location块中。\n\n#### proxy_pass 字段\n\n`ngixn` 对于 `proxy_pass` \b的处理分为两种，一种是只有IP和端口号，另一种是除了IP和端口号外还包含了其它路径（URI）（其中也包括单个`/`符）。\n\n对于不含URI的 `proxy_pass` ， nginx 将会保留location中的路径部分，\b即在 `proxy_pass` 的值后面拼接上 `loaction` 的匹配路径。\n\n对于含URI的 `proxy_pass` ，nginx将使用诸如alias的替换方式对URL进行替换。\n\n例如：\n\n```\nserver {\n  ...\n  location /api1/ {\n    proxy_pass http://localhost:8080;\n  }\n\n  location /api2/ {\n    proxy_pass http://localhost:8080/;\n  }\n}\n```\n\n访问 `ip/api1/login` 地址，\b\b转发到服务器的地址应该是 `http://localhost:8080/api1/login`\n访问 `ip/api2/login` 地址，\b\b转发到服务器的地址应该是 `http://localhost:8080/login`\n\n#### index 字段\n\n> 转载自：[Nginx之坑：完全理解location中的index，配置网站初始页](https://blog.csdn.net/qq_32331073/article/details/81945134)\n\n- 该指令后面可以跟多个文件，用空格隔开；\n- 如果包括多个文件，Nginx会根据文件的枚举顺序来检查，直到查找的文件存在；\n- 文件可以是相对路径也可以是绝对路径，绝对路径需要放在最后；\n- 文件可以使用变量$来命名；\n\n```\nserver {\n  ...\n  location /app {\n    ...\n    index  index.$geo.html  index.0.html  /index.html;\n  }\n}\n```\n\n该指令拥有默认值，index index.html ，即，如果没有给出index，默认初始页为index.html\n\nNginx给了三种方式来选择初始页，三种方式按照顺序来执行：\n\n- [ngx_http_random_index_module](http://nginx.org/en/docs/http/ngx_http_random_index_module.html) 模块，从给定的目录中随机选择一个文件作为初始页，而且这个动作发生在 [ngx_http_index_module](http://nginx.org/en/docs/http/ngx_http_index_module.html) 之前，注意：这个模块默认情况下没有被安装，需要在安装时提供配置参数 -with-http_random_index_module；\n- [ngx_http_index_module](http://nginx.org/en/docs/http/ngx_http_index_module.html) 模块，根据index指令规则来选择初始页；\n- [ngx_http_autoindex_module](http://nginx.org/en/docs/http/ngx_http_autoindex_module.html) 模块，可以使用指定方式，根据给定目录中的文件列表自动生成初始页，这个动作发生在 \n[ngx_http_index_module](http://nginx.org/en/docs/http/ngx_http_index_module.html) 之后，即只有通过index指令无法确认初始页，此时启用后的自动生成模块才会被使用。\n\n**如果文件存在，则使用文件作为路径，发起内部重定向。直观上看上去就像再一次从客户端发起请求，Nginx再一次搜索location一样。** 既然是内部重定向，域名+端口不发生变化，所以只会在同一个server下搜索。同样，如果内部重定向发生在proxy_pass反向代理后，那么重定向只会发生在代理配置中的同一个server。\n\n```\nserver {\n    listen      80;\n    server_name example.org www.example.org;    \n    \n    location / {\n        root    /data/www;\n        index   index.html index.php;\n    }\n    \n    location ~ \\.php$ {\n        root    /data/www/test;\n    }\n}\n```\n\n上面的例子中，如果你使用example.org或www.example.org直接发起请求，那么首先会访问到“/”的location，结合root与index指令，会先判断/data/www/index.html是否存在，如果不，则接着查看\n/data/www/index.php ，如果存在，则使用/index.php发起内部重定向，就像从客户端再一次发起请求一样，Nginx会再一次搜索location，毫无疑问匹配到第二个~ \\.php$，从而访问到/data/www/test/index.php。","source":"_posts/nginx-commmand-record.md","raw":"---\nlayout: '[post]'\ntitle: Nginx conf 常用配置\ndate: 2019-07-15 23:52:15\ntags: 转载\n---\n\n因为不熟悉Nginx，对他的匹配规则似懂非懂，所以平时在部署自己项目的时候经常会遇到各种问题，因此在此记录一下一路踩过的坑。\n\n### nginx.conf 与 conf.d 目录\n\n首先Nginx里有一份基础配置nginx.conf文件，里面通常是nginx的一些默认配置信息，注意在默认配置前有一行引入自定义文件的代码\n```\n# Load modular configuration files from the /etc/nginx/conf.d directory.\n# See http://nginx.org/en/docs/ngx_core_module.html#include\n# for more information.\ninclude /etc/nginx/conf.d/*.conf;\n```\n最后一行把 `conf` 目录下的所有以.conf后缀结尾的文件都引入进来，而因为Nginx配置文件的规则是前面先匹配到的先生效，所以我们可以把自己写的自定义配置文件在 `conf` 目录下，然后覆盖后面的默认配置。\n\n### server 块\n\n关于server块目前比较明白的有以下几个字段：\n\n- `listen` 代表着监听的端口\n  > 网页通常是监听80、443端口，还有一些服务应用应该监听对应\b的端口，如21、25等。\n- `server_name` 代表监听的域名\n  > 通常是在域名服务商通过设置相应的域名然后解析到服务器的ip，其设置的域名便是 `server_name` 的值\n- `root` 匹配后指向的访问路径（拼接匹配的url部分）\n  > \b要注意当前nginx使用的用户是否有该对指向的路径有相应的访问权限。\n\n### location 块\n\n`location` 处于 `server` 块下，一个 `server` 块可以有若干个 `location` ，先匹配到的 `location` 规则先处理，并停止往后匹配。\n\n```\nserver {\n  ...\n  location [pattern rule] {\n    ...\n  }\n}\n```\n\n`location` 后面接对应的 url 匹配规则，可以是要匹配的字符串（字符串后面可带`/`也可以不带），也可以是正则。\n\n通过 `location` 实现请求转发来处理前端接口跨域问题，还可以通过它来实现外部对内部服务的代理访问。一般我会用到以下几个字段：\n\n- `root` 匹配后指向的访问路径（拼接匹配的url部分）\n- `alias` 匹配后指向的访问路径（替换匹配的url部分）\n- `proxy_pass` 把请求转发到指向地\b址\n- `index` 匹配后指向的访问路径下的文件\n\n#### root 与 alias\n\n当 `location` 是用字符串来匹配时，配置 `root` 与 `alias` 是区别的：当 `location` 匹配到相应的 `url` `后，root` 对在匹配的规则后接上 `root` \b指向的路径，而 `alisa` 会直接替换掉匹配的url部分。\n\n举个例子：\n\n```\nlocation ~ ^/xingcard/ {\n  root /data/www/;\n}\n```\n\n当一个URI是 `/app/xingcard/index.html` 时，nginx将会返回服务器上 `/data/www/app/xingcard/index.html`的文件。root会根据完整的URI请求来映射，也就是/path/uri。\n\n如果我们把 `root` 换成 `alias` 的话：\n\n```\nlocation ~ ^/app/ {\n  alais /data/www/;\n}\n```\n\n则nginx会将`/data/www/xingcard/index.html`返回给客户端。区别就是在于有没有替换掉\b `location` 匹配的 `app`。\n\n> 注意：\n> 1. 使用alias时，目录名后面一定要加\"/\"。\n> 2. alias可以指定任何名称。\n> 3. alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。\n> 4. alias只能位于location块中。\n\n#### proxy_pass 字段\n\n`ngixn` 对于 `proxy_pass` \b的处理分为两种，一种是只有IP和端口号，另一种是除了IP和端口号外还包含了其它路径（URI）（其中也包括单个`/`符）。\n\n对于不含URI的 `proxy_pass` ， nginx 将会保留location中的路径部分，\b即在 `proxy_pass` 的值后面拼接上 `loaction` 的匹配路径。\n\n对于含URI的 `proxy_pass` ，nginx将使用诸如alias的替换方式对URL进行替换。\n\n例如：\n\n```\nserver {\n  ...\n  location /api1/ {\n    proxy_pass http://localhost:8080;\n  }\n\n  location /api2/ {\n    proxy_pass http://localhost:8080/;\n  }\n}\n```\n\n访问 `ip/api1/login` 地址，\b\b转发到服务器的地址应该是 `http://localhost:8080/api1/login`\n访问 `ip/api2/login` 地址，\b\b转发到服务器的地址应该是 `http://localhost:8080/login`\n\n#### index 字段\n\n> 转载自：[Nginx之坑：完全理解location中的index，配置网站初始页](https://blog.csdn.net/qq_32331073/article/details/81945134)\n\n- 该指令后面可以跟多个文件，用空格隔开；\n- 如果包括多个文件，Nginx会根据文件的枚举顺序来检查，直到查找的文件存在；\n- 文件可以是相对路径也可以是绝对路径，绝对路径需要放在最后；\n- 文件可以使用变量$来命名；\n\n```\nserver {\n  ...\n  location /app {\n    ...\n    index  index.$geo.html  index.0.html  /index.html;\n  }\n}\n```\n\n该指令拥有默认值，index index.html ，即，如果没有给出index，默认初始页为index.html\n\nNginx给了三种方式来选择初始页，三种方式按照顺序来执行：\n\n- [ngx_http_random_index_module](http://nginx.org/en/docs/http/ngx_http_random_index_module.html) 模块，从给定的目录中随机选择一个文件作为初始页，而且这个动作发生在 [ngx_http_index_module](http://nginx.org/en/docs/http/ngx_http_index_module.html) 之前，注意：这个模块默认情况下没有被安装，需要在安装时提供配置参数 -with-http_random_index_module；\n- [ngx_http_index_module](http://nginx.org/en/docs/http/ngx_http_index_module.html) 模块，根据index指令规则来选择初始页；\n- [ngx_http_autoindex_module](http://nginx.org/en/docs/http/ngx_http_autoindex_module.html) 模块，可以使用指定方式，根据给定目录中的文件列表自动生成初始页，这个动作发生在 \n[ngx_http_index_module](http://nginx.org/en/docs/http/ngx_http_index_module.html) 之后，即只有通过index指令无法确认初始页，此时启用后的自动生成模块才会被使用。\n\n**如果文件存在，则使用文件作为路径，发起内部重定向。直观上看上去就像再一次从客户端发起请求，Nginx再一次搜索location一样。** 既然是内部重定向，域名+端口不发生变化，所以只会在同一个server下搜索。同样，如果内部重定向发生在proxy_pass反向代理后，那么重定向只会发生在代理配置中的同一个server。\n\n```\nserver {\n    listen      80;\n    server_name example.org www.example.org;    \n    \n    location / {\n        root    /data/www;\n        index   index.html index.php;\n    }\n    \n    location ~ \\.php$ {\n        root    /data/www/test;\n    }\n}\n```\n\n上面的例子中，如果你使用example.org或www.example.org直接发起请求，那么首先会访问到“/”的location，结合root与index指令，会先判断/data/www/index.html是否存在，如果不，则接着查看\n/data/www/index.php ，如果存在，则使用/index.php发起内部重定向，就像从客户端再一次发起请求一样，Nginx会再一次搜索location，毫无疑问匹配到第二个~ \\.php$，从而访问到/data/www/test/index.php。","slug":"nginx-commmand-record","published":1,"updated":"2019-07-15T17:11:22.787Z","comments":1,"photos":[],"link":"","_id":"cjy4nau66000hts2hbuhab4wf","content":"<p>因为不熟悉Nginx，对他的匹配规则似懂非懂，所以平时在部署自己项目的时候经常会遇到各种问题，因此在此记录一下一路踩过的坑。</p>\n<h3 id=\"nginx-conf-与-conf-d-目录\"><a href=\"#nginx-conf-与-conf-d-目录\" class=\"headerlink\" title=\"nginx.conf 与 conf.d 目录\"></a>nginx.conf 与 conf.d 目录</h3><p>首先Nginx里有一份基础配置nginx.conf文件，里面通常是nginx的一些默认配置信息，注意在默认配置前有一行引入自定义文件的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class=\"line\"># See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class=\"line\"># for more information.</div><div class=\"line\">include /etc/nginx/conf.d/*.conf;</div></pre></td></tr></table></figure></p>\n<p>最后一行把 <code>conf</code> 目录下的所有以.conf后缀结尾的文件都引入进来，而因为Nginx配置文件的规则是前面先匹配到的先生效，所以我们可以把自己写的自定义配置文件在 <code>conf</code> 目录下，然后覆盖后面的默认配置。</p>\n<h3 id=\"server-块\"><a href=\"#server-块\" class=\"headerlink\" title=\"server 块\"></a>server 块</h3><p>关于server块目前比较明白的有以下几个字段：</p>\n<ul>\n<li><code>listen</code> 代表着监听的端口<blockquote>\n<p>网页通常是监听80、443端口，还有一些服务应用应该监听对应\b的端口，如21、25等。</p>\n</blockquote>\n</li>\n<li><code>server_name</code> 代表监听的域名<blockquote>\n<p>通常是在域名服务商通过设置相应的域名然后解析到服务器的ip，其设置的域名便是 <code>server_name</code> 的值</p>\n</blockquote>\n</li>\n<li><code>root</code> 匹配后指向的访问路径（拼接匹配的url部分）<blockquote>\n<p>\b要注意当前nginx使用的用户是否有该对指向的路径有相应的访问权限。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"location-块\"><a href=\"#location-块\" class=\"headerlink\" title=\"location 块\"></a>location 块</h3><p><code>location</code> 处于 <code>server</code> 块下，一个 <code>server</code> 块可以有若干个 <code>location</code> ，先匹配到的 <code>location</code> 规则先处理，并停止往后匹配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  location [pattern rule] &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>location</code> 后面接对应的 url 匹配规则，可以是要匹配的字符串（字符串后面可带<code>/</code>也可以不带），也可以是正则。</p>\n<p>通过 <code>location</code> 实现请求转发来处理前端接口跨域问题，还可以通过它来实现外部对内部服务的代理访问。一般我会用到以下几个字段：</p>\n<ul>\n<li><code>root</code> 匹配后指向的访问路径（拼接匹配的url部分）</li>\n<li><code>alias</code> 匹配后指向的访问路径（替换匹配的url部分）</li>\n<li><code>proxy_pass</code> 把请求转发到指向地\b址</li>\n<li><code>index</code> 匹配后指向的访问路径下的文件</li>\n</ul>\n<h4 id=\"root-与-alias\"><a href=\"#root-与-alias\" class=\"headerlink\" title=\"root 与 alias\"></a>root 与 alias</h4><p>当 <code>location</code> 是用字符串来匹配时，配置 <code>root</code> 与 <code>alias</code> 是区别的：当 <code>location</code> 匹配到相应的 <code>url</code> <code>后，root</code> 对在匹配的规则后接上 <code>root</code> \b指向的路径，而 <code>alisa</code> 会直接替换掉匹配的url部分。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~ ^/xingcard/ &#123;</div><div class=\"line\">  root /data/www/;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当一个URI是 <code>/app/xingcard/index.html</code> 时，nginx将会返回服务器上 <code>/data/www/app/xingcard/index.html</code>的文件。root会根据完整的URI请求来映射，也就是/path/uri。</p>\n<p>如果我们把 <code>root</code> 换成 <code>alias</code> 的话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~ ^/app/ &#123;</div><div class=\"line\">  alais /data/www/;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>则nginx会将<code>/data/www/xingcard/index.html</code>返回给客户端。区别就是在于有没有替换掉\b <code>location</code> 匹配的 <code>app</code>。</p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>使用alias时，目录名后面一定要加”/“。</li>\n<li>alias可以指定任何名称。</li>\n<li>alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</li>\n<li>alias只能位于location块中。</li>\n</ol>\n</blockquote>\n<h4 id=\"proxy-pass-字段\"><a href=\"#proxy-pass-字段\" class=\"headerlink\" title=\"proxy_pass 字段\"></a>proxy_pass 字段</h4><p><code>ngixn</code> 对于 <code>proxy_pass</code> \b的处理分为两种，一种是只有IP和端口号，另一种是除了IP和端口号外还包含了其它路径（URI）（其中也包括单个<code>/</code>符）。</p>\n<p>对于不含URI的 <code>proxy_pass</code> ， nginx 将会保留location中的路径部分，\b即在 <code>proxy_pass</code> 的值后面拼接上 <code>loaction</code> 的匹配路径。</p>\n<p>对于含URI的 <code>proxy_pass</code> ，nginx将使用诸如alias的替换方式对URL进行替换。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  location /api1/ &#123;</div><div class=\"line\">    proxy_pass http://localhost:8080;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  location /api2/ &#123;</div><div class=\"line\">    proxy_pass http://localhost:8080/;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>访问 <code>ip/api1/login</code> 地址，\b\b转发到服务器的地址应该是 <code>http://localhost:8080/api1/login</code><br>访问 <code>ip/api2/login</code> 地址，\b\b转发到服务器的地址应该是 <code>http://localhost:8080/login</code></p>\n<h4 id=\"index-字段\"><a href=\"#index-字段\" class=\"headerlink\" title=\"index 字段\"></a>index 字段</h4><blockquote>\n<p>转载自：<a href=\"https://blog.csdn.net/qq_32331073/article/details/81945134\" target=\"_blank\" rel=\"external\">Nginx之坑：完全理解location中的index，配置网站初始页</a></p>\n</blockquote>\n<ul>\n<li>该指令后面可以跟多个文件，用空格隔开；</li>\n<li>如果包括多个文件，Nginx会根据文件的枚举顺序来检查，直到查找的文件存在；</li>\n<li>文件可以是相对路径也可以是绝对路径，绝对路径需要放在最后；</li>\n<li>文件可以使用变量$来命名；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  location /app &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    index  index.$geo.html  index.0.html  /index.html;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该指令拥有默认值，index index.html ，即，如果没有给出index，默认初始页为index.html</p>\n<p>Nginx给了三种方式来选择初始页，三种方式按照顺序来执行：</p>\n<ul>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_random_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_random_index_module</a> 模块，从给定的目录中随机选择一个文件作为初始页，而且这个动作发生在 <a href=\"http://nginx.org/en/docs/http/ngx_http_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_index_module</a> 之前，注意：这个模块默认情况下没有被安装，需要在安装时提供配置参数 -with-http_random_index_module；</li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_index_module</a> 模块，根据index指令规则来选择初始页；</li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_autoindex_module.html\" target=\"_blank\" rel=\"external\">ngx_http_autoindex_module</a> 模块，可以使用指定方式，根据给定目录中的文件列表自动生成初始页，这个动作发生在<br><a href=\"http://nginx.org/en/docs/http/ngx_http_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_index_module</a> 之后，即只有通过index指令无法确认初始页，此时启用后的自动生成模块才会被使用。</li>\n</ul>\n<p><strong>如果文件存在，则使用文件作为路径，发起内部重定向。直观上看上去就像再一次从客户端发起请求，Nginx再一次搜索location一样。</strong> 既然是内部重定向，域名+端口不发生变化，所以只会在同一个server下搜索。同样，如果内部重定向发生在proxy_pass反向代理后，那么重定向只会发生在代理配置中的同一个server。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen      80;</div><div class=\"line\">    server_name example.org www.example.org;    </div><div class=\"line\">    </div><div class=\"line\">    location / &#123;</div><div class=\"line\">        root    /data/www;</div><div class=\"line\">        index   index.html index.php;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        root    /data/www/test;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中，如果你使用example.org或www.example.org直接发起请求，那么首先会访问到“/”的location，结合root与index指令，会先判断/data/www/index.html是否存在，如果不，则接着查看<br>/data/www/index.php ，如果存在，则使用/index.php发起内部重定向，就像从客户端再一次发起请求一样，Nginx会再一次搜索location，毫无疑问匹配到第二个~ .php$，从而访问到/data/www/test/index.php。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为不熟悉Nginx，对他的匹配规则似懂非懂，所以平时在部署自己项目的时候经常会遇到各种问题，因此在此记录一下一路踩过的坑。</p>\n<h3 id=\"nginx-conf-与-conf-d-目录\"><a href=\"#nginx-conf-与-conf-d-目录\" class=\"headerlink\" title=\"nginx.conf 与 conf.d 目录\"></a>nginx.conf 与 conf.d 目录</h3><p>首先Nginx里有一份基础配置nginx.conf文件，里面通常是nginx的一些默认配置信息，注意在默认配置前有一行引入自定义文件的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Load modular configuration files from the /etc/nginx/conf.d directory.</div><div class=\"line\"># See http://nginx.org/en/docs/ngx_core_module.html#include</div><div class=\"line\"># for more information.</div><div class=\"line\">include /etc/nginx/conf.d/*.conf;</div></pre></td></tr></table></figure></p>\n<p>最后一行把 <code>conf</code> 目录下的所有以.conf后缀结尾的文件都引入进来，而因为Nginx配置文件的规则是前面先匹配到的先生效，所以我们可以把自己写的自定义配置文件在 <code>conf</code> 目录下，然后覆盖后面的默认配置。</p>\n<h3 id=\"server-块\"><a href=\"#server-块\" class=\"headerlink\" title=\"server 块\"></a>server 块</h3><p>关于server块目前比较明白的有以下几个字段：</p>\n<ul>\n<li><code>listen</code> 代表着监听的端口<blockquote>\n<p>网页通常是监听80、443端口，还有一些服务应用应该监听对应\b的端口，如21、25等。</p>\n</blockquote>\n</li>\n<li><code>server_name</code> 代表监听的域名<blockquote>\n<p>通常是在域名服务商通过设置相应的域名然后解析到服务器的ip，其设置的域名便是 <code>server_name</code> 的值</p>\n</blockquote>\n</li>\n<li><code>root</code> 匹配后指向的访问路径（拼接匹配的url部分）<blockquote>\n<p>\b要注意当前nginx使用的用户是否有该对指向的路径有相应的访问权限。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"location-块\"><a href=\"#location-块\" class=\"headerlink\" title=\"location 块\"></a>location 块</h3><p><code>location</code> 处于 <code>server</code> 块下，一个 <code>server</code> 块可以有若干个 <code>location</code> ，先匹配到的 <code>location</code> 规则先处理，并停止往后匹配。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  location [pattern rule] &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>location</code> 后面接对应的 url 匹配规则，可以是要匹配的字符串（字符串后面可带<code>/</code>也可以不带），也可以是正则。</p>\n<p>通过 <code>location</code> 实现请求转发来处理前端接口跨域问题，还可以通过它来实现外部对内部服务的代理访问。一般我会用到以下几个字段：</p>\n<ul>\n<li><code>root</code> 匹配后指向的访问路径（拼接匹配的url部分）</li>\n<li><code>alias</code> 匹配后指向的访问路径（替换匹配的url部分）</li>\n<li><code>proxy_pass</code> 把请求转发到指向地\b址</li>\n<li><code>index</code> 匹配后指向的访问路径下的文件</li>\n</ul>\n<h4 id=\"root-与-alias\"><a href=\"#root-与-alias\" class=\"headerlink\" title=\"root 与 alias\"></a>root 与 alias</h4><p>当 <code>location</code> 是用字符串来匹配时，配置 <code>root</code> 与 <code>alias</code> 是区别的：当 <code>location</code> 匹配到相应的 <code>url</code> <code>后，root</code> 对在匹配的规则后接上 <code>root</code> \b指向的路径，而 <code>alisa</code> 会直接替换掉匹配的url部分。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~ ^/xingcard/ &#123;</div><div class=\"line\">  root /data/www/;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当一个URI是 <code>/app/xingcard/index.html</code> 时，nginx将会返回服务器上 <code>/data/www/app/xingcard/index.html</code>的文件。root会根据完整的URI请求来映射，也就是/path/uri。</p>\n<p>如果我们把 <code>root</code> 换成 <code>alias</code> 的话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location ~ ^/app/ &#123;</div><div class=\"line\">  alais /data/www/;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>则nginx会将<code>/data/www/xingcard/index.html</code>返回给客户端。区别就是在于有没有替换掉\b <code>location</code> 匹配的 <code>app</code>。</p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>使用alias时，目录名后面一定要加”/“。</li>\n<li>alias可以指定任何名称。</li>\n<li>alias在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</li>\n<li>alias只能位于location块中。</li>\n</ol>\n</blockquote>\n<h4 id=\"proxy-pass-字段\"><a href=\"#proxy-pass-字段\" class=\"headerlink\" title=\"proxy_pass 字段\"></a>proxy_pass 字段</h4><p><code>ngixn</code> 对于 <code>proxy_pass</code> \b的处理分为两种，一种是只有IP和端口号，另一种是除了IP和端口号外还包含了其它路径（URI）（其中也包括单个<code>/</code>符）。</p>\n<p>对于不含URI的 <code>proxy_pass</code> ， nginx 将会保留location中的路径部分，\b即在 <code>proxy_pass</code> 的值后面拼接上 <code>loaction</code> 的匹配路径。</p>\n<p>对于含URI的 <code>proxy_pass</code> ，nginx将使用诸如alias的替换方式对URL进行替换。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  location /api1/ &#123;</div><div class=\"line\">    proxy_pass http://localhost:8080;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  location /api2/ &#123;</div><div class=\"line\">    proxy_pass http://localhost:8080/;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>访问 <code>ip/api1/login</code> 地址，\b\b转发到服务器的地址应该是 <code>http://localhost:8080/api1/login</code><br>访问 <code>ip/api2/login</code> 地址，\b\b转发到服务器的地址应该是 <code>http://localhost:8080/login</code></p>\n<h4 id=\"index-字段\"><a href=\"#index-字段\" class=\"headerlink\" title=\"index 字段\"></a>index 字段</h4><blockquote>\n<p>转载自：<a href=\"https://blog.csdn.net/qq_32331073/article/details/81945134\" target=\"_blank\" rel=\"external\">Nginx之坑：完全理解location中的index，配置网站初始页</a></p>\n</blockquote>\n<ul>\n<li>该指令后面可以跟多个文件，用空格隔开；</li>\n<li>如果包括多个文件，Nginx会根据文件的枚举顺序来检查，直到查找的文件存在；</li>\n<li>文件可以是相对路径也可以是绝对路径，绝对路径需要放在最后；</li>\n<li>文件可以使用变量$来命名；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  location /app &#123;</div><div class=\"line\">    ...</div><div class=\"line\">    index  index.$geo.html  index.0.html  /index.html;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该指令拥有默认值，index index.html ，即，如果没有给出index，默认初始页为index.html</p>\n<p>Nginx给了三种方式来选择初始页，三种方式按照顺序来执行：</p>\n<ul>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_random_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_random_index_module</a> 模块，从给定的目录中随机选择一个文件作为初始页，而且这个动作发生在 <a href=\"http://nginx.org/en/docs/http/ngx_http_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_index_module</a> 之前，注意：这个模块默认情况下没有被安装，需要在安装时提供配置参数 -with-http_random_index_module；</li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_index_module</a> 模块，根据index指令规则来选择初始页；</li>\n<li><a href=\"http://nginx.org/en/docs/http/ngx_http_autoindex_module.html\" target=\"_blank\" rel=\"external\">ngx_http_autoindex_module</a> 模块，可以使用指定方式，根据给定目录中的文件列表自动生成初始页，这个动作发生在<br><a href=\"http://nginx.org/en/docs/http/ngx_http_index_module.html\" target=\"_blank\" rel=\"external\">ngx_http_index_module</a> 之后，即只有通过index指令无法确认初始页，此时启用后的自动生成模块才会被使用。</li>\n</ul>\n<p><strong>如果文件存在，则使用文件作为路径，发起内部重定向。直观上看上去就像再一次从客户端发起请求，Nginx再一次搜索location一样。</strong> 既然是内部重定向，域名+端口不发生变化，所以只会在同一个server下搜索。同样，如果内部重定向发生在proxy_pass反向代理后，那么重定向只会发生在代理配置中的同一个server。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen      80;</div><div class=\"line\">    server_name example.org www.example.org;    </div><div class=\"line\">    </div><div class=\"line\">    location / &#123;</div><div class=\"line\">        root    /data/www;</div><div class=\"line\">        index   index.html index.php;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        root    /data/www/test;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的例子中，如果你使用example.org或www.example.org直接发起请求，那么首先会访问到“/”的location，结合root与index指令，会先判断/data/www/index.html是否存在，如果不，则接着查看<br>/data/www/index.php ，如果存在，则使用/index.php发起内部重定向，就像从客户端再一次发起请求一样，Nginx会再一次搜索location，毫无疑问匹配到第二个~ .php$，从而访问到/data/www/test/index.php。</p>\n"},{"layout":"[post]","title":"MongoDB Shell命令","date":"2017-11-30T08:39:03.000Z","_content":"\n#### 开启MongoDB数据库服务\n\n&emsp;&emsp;mongo根目录`/bin/mongod -f` 配置文件目录/配置文件名\n例：`./bin/mongod -f conf/mongod.conf`\n\n<!-- more -->\n\n#### 强行关闭MongoDB\n\n&emsp;&emsp;先用命令 `ps -ef | grep mongod `查出mongod 的进程pid\n然后`kill pid `即可\n\n#### 数据库\n\n##### 连接MongoDB数据库\n\n&emsp;&emsp;mongo根目录`/bin/mongo` 数据库地址:端口号/库名称\n例： `./bin/mongo 127.0.0.1:12345/test`\n\n##### 关闭MongoDB数据库\n\n&emsp;&emsp;`db.shutdownServer()`\n\n##### 新建和切换数据库\n\n&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用`use 数据库名` 就可以了。\n\n##### 删除数据库\n\n&emsp;&emsp;先用`db.use`切换到要删除的数据库，然后使用`db.dropDatabase()`来删除数据库\n\n#### 数据操作\n\n##### 插入一条数据\n\n`db.collection.insert({key: value})`\n\n其中集名称可以自己起\n\n##### 插入多条数据\n\n&emsp;&emsp;可以使用for循环插入： `for(i＝3;i<100;i++)db.collection.insert({key: value})`\n\n##### 查询所有数据\n\n`db.collection.find()`\n\n##### 查询单条数据\n\n`db.collection.find({key: value})`\n\n##### 查询后有条件地进行处理\n\n`db.collection.find({key: value}).skip(3).limit(5).sort({key: value})`\n\n上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)\n\n##### 显示库中的所有集名称\n\n`show collections`\n\n##### 删除数据库中的集合\n\n`db.collection.drop()`\n\n#### 索引\n\n##### 查看索引\n\n`db.imooc_2.getIndexes()`\n\n##### _id索引\n\n- _id索引是绝大多数集合默认建立的索引。\n- 对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。\n\n##### 创建一个单键索引\n\n- 单键索引是最普通的索引\n- 单键索引不会自动创建\n\n&emsp;&emsp;例如： 一条记录为`{x: 1, y: 2, z: 3}`，如果我们在x上建立了索引，就可以使用x为条件进行查寻。\n\n`db.collection.ensureIndex({index: order})`\n\n- index: 索引\n- order: 1表示升序， -1表示降序\n\n##### 创建一个多键索引\n\n多键索引与单键索引创建形式相同，区别在于字段的值。 \n\n- 单键索引：值为一个单一的值，如字符串，数字或日期。 \n- 多键索引：值具有多个记录，如数组。\n\n`db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据`\n\n`db.collection.insert({x:new Date()}) //插入一条数组数据`\n\n##### 创建一个复合索引\n\n&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引\n\n&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引`db.collection.ensureIndex({x:1, y:1})`，然后就可以使用`{x: 1, y:1}`作为条件进行查询\n\n`db.collection.ensureIndex({x:1, y:1})`\n\n##### 创建一个过期索引\n\n- 在一段时间后会过期的索引 \n- 在索引过期后，相应的数据会被删除 \n- 适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。\n\n`db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})` 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒\n\n&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。\n\n&emsp;&emsp;过期索引的限制： \n\n1. 存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。 \n例如 >db.imooc_2.insert({time:1})，这种是不能被自动删除的 \n2. 如果指定了ISODate数组，则按照最小的时间进行删除。 \n3. 过期索引不能是复合索引。因为不能指定两个过期时间。 \n4. 删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差\n\n","source":"_posts/mongodb-command.md","raw":"---\nlayout: '[post]'\ntitle: MongoDB Shell命令\ndate: 2017-11-30 16:39:03\ntags: 读书笔记\n---\n\n#### 开启MongoDB数据库服务\n\n&emsp;&emsp;mongo根目录`/bin/mongod -f` 配置文件目录/配置文件名\n例：`./bin/mongod -f conf/mongod.conf`\n\n<!-- more -->\n\n#### 强行关闭MongoDB\n\n&emsp;&emsp;先用命令 `ps -ef | grep mongod `查出mongod 的进程pid\n然后`kill pid `即可\n\n#### 数据库\n\n##### 连接MongoDB数据库\n\n&emsp;&emsp;mongo根目录`/bin/mongo` 数据库地址:端口号/库名称\n例： `./bin/mongo 127.0.0.1:12345/test`\n\n##### 关闭MongoDB数据库\n\n&emsp;&emsp;`db.shutdownServer()`\n\n##### 新建和切换数据库\n\n&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用`use 数据库名` 就可以了。\n\n##### 删除数据库\n\n&emsp;&emsp;先用`db.use`切换到要删除的数据库，然后使用`db.dropDatabase()`来删除数据库\n\n#### 数据操作\n\n##### 插入一条数据\n\n`db.collection.insert({key: value})`\n\n其中集名称可以自己起\n\n##### 插入多条数据\n\n&emsp;&emsp;可以使用for循环插入： `for(i＝3;i<100;i++)db.collection.insert({key: value})`\n\n##### 查询所有数据\n\n`db.collection.find()`\n\n##### 查询单条数据\n\n`db.collection.find({key: value})`\n\n##### 查询后有条件地进行处理\n\n`db.collection.find({key: value}).skip(3).limit(5).sort({key: value})`\n\n上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)\n\n##### 显示库中的所有集名称\n\n`show collections`\n\n##### 删除数据库中的集合\n\n`db.collection.drop()`\n\n#### 索引\n\n##### 查看索引\n\n`db.imooc_2.getIndexes()`\n\n##### _id索引\n\n- _id索引是绝大多数集合默认建立的索引。\n- 对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。\n\n##### 创建一个单键索引\n\n- 单键索引是最普通的索引\n- 单键索引不会自动创建\n\n&emsp;&emsp;例如： 一条记录为`{x: 1, y: 2, z: 3}`，如果我们在x上建立了索引，就可以使用x为条件进行查寻。\n\n`db.collection.ensureIndex({index: order})`\n\n- index: 索引\n- order: 1表示升序， -1表示降序\n\n##### 创建一个多键索引\n\n多键索引与单键索引创建形式相同，区别在于字段的值。 \n\n- 单键索引：值为一个单一的值，如字符串，数字或日期。 \n- 多键索引：值具有多个记录，如数组。\n\n`db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据`\n\n`db.collection.insert({x:new Date()}) //插入一条数组数据`\n\n##### 创建一个复合索引\n\n&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引\n\n&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引`db.collection.ensureIndex({x:1, y:1})`，然后就可以使用`{x: 1, y:1}`作为条件进行查询\n\n`db.collection.ensureIndex({x:1, y:1})`\n\n##### 创建一个过期索引\n\n- 在一段时间后会过期的索引 \n- 在索引过期后，相应的数据会被删除 \n- 适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。\n\n`db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})` 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒\n\n&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。\n\n&emsp;&emsp;过期索引的限制： \n\n1. 存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。 \n例如 >db.imooc_2.insert({time:1})，这种是不能被自动删除的 \n2. 如果指定了ISODate数组，则按照最小的时间进行删除。 \n3. 过期索引不能是复合索引。因为不能指定两个过期时间。 \n4. 删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差\n\n","slug":"mongodb-command","published":1,"updated":"2017-12-09T19:04:55.000Z","comments":1,"photos":[],"link":"","_id":"cjy4nau67000kts2h0n3gjt5g","content":"<h4 id=\"开启MongoDB数据库服务\"><a href=\"#开启MongoDB数据库服务\" class=\"headerlink\" title=\"开启MongoDB数据库服务\"></a>开启MongoDB数据库服务</h4><p>&emsp;&emsp;mongo根目录<code>/bin/mongod -f</code> 配置文件目录/配置文件名<br>例：<code>./bin/mongod -f conf/mongod.conf</code></p>\n<a id=\"more\"></a>\n<h4 id=\"强行关闭MongoDB\"><a href=\"#强行关闭MongoDB\" class=\"headerlink\" title=\"强行关闭MongoDB\"></a>强行关闭MongoDB</h4><p>&emsp;&emsp;先用命令 <code>ps -ef | grep mongod</code>查出mongod 的进程pid<br>然后<code>kill pid</code>即可</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h5 id=\"连接MongoDB数据库\"><a href=\"#连接MongoDB数据库\" class=\"headerlink\" title=\"连接MongoDB数据库\"></a>连接MongoDB数据库</h5><p>&emsp;&emsp;mongo根目录<code>/bin/mongo</code> 数据库地址:端口号/库名称<br>例： <code>./bin/mongo 127.0.0.1:12345/test</code></p>\n<h5 id=\"关闭MongoDB数据库\"><a href=\"#关闭MongoDB数据库\" class=\"headerlink\" title=\"关闭MongoDB数据库\"></a>关闭MongoDB数据库</h5><p>&emsp;&emsp;<code>db.shutdownServer()</code></p>\n<h5 id=\"新建和切换数据库\"><a href=\"#新建和切换数据库\" class=\"headerlink\" title=\"新建和切换数据库\"></a>新建和切换数据库</h5><p>&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用<code>use 数据库名</code> 就可以了。</p>\n<h5 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h5><p>&emsp;&emsp;先用<code>db.use</code>切换到要删除的数据库，然后使用<code>db.dropDatabase()</code>来删除数据库</p>\n<h4 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h4><h5 id=\"插入一条数据\"><a href=\"#插入一条数据\" class=\"headerlink\" title=\"插入一条数据\"></a>插入一条数据</h5><p><code>db.collection.insert({key: value})</code></p>\n<p>其中集名称可以自己起</p>\n<h5 id=\"插入多条数据\"><a href=\"#插入多条数据\" class=\"headerlink\" title=\"插入多条数据\"></a>插入多条数据</h5><p>&emsp;&emsp;可以使用for循环插入： <code>for(i＝3;i&lt;100;i++)db.collection.insert({key: value})</code></p>\n<h5 id=\"查询所有数据\"><a href=\"#查询所有数据\" class=\"headerlink\" title=\"查询所有数据\"></a>查询所有数据</h5><p><code>db.collection.find()</code></p>\n<h5 id=\"查询单条数据\"><a href=\"#查询单条数据\" class=\"headerlink\" title=\"查询单条数据\"></a>查询单条数据</h5><p><code>db.collection.find({key: value})</code></p>\n<h5 id=\"查询后有条件地进行处理\"><a href=\"#查询后有条件地进行处理\" class=\"headerlink\" title=\"查询后有条件地进行处理\"></a>查询后有条件地进行处理</h5><p><code>db.collection.find({key: value}).skip(3).limit(5).sort({key: value})</code></p>\n<p>上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)</p>\n<h5 id=\"显示库中的所有集名称\"><a href=\"#显示库中的所有集名称\" class=\"headerlink\" title=\"显示库中的所有集名称\"></a>显示库中的所有集名称</h5><p><code>show collections</code></p>\n<h5 id=\"删除数据库中的集合\"><a href=\"#删除数据库中的集合\" class=\"headerlink\" title=\"删除数据库中的集合\"></a>删除数据库中的集合</h5><p><code>db.collection.drop()</code></p>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><h5 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h5><p><code>db.imooc_2.getIndexes()</code></p>\n<h5 id=\"id索引\"><a href=\"#id索引\" class=\"headerlink\" title=\"_id索引\"></a>_id索引</h5><ul>\n<li>_id索引是绝大多数集合默认建立的索引。</li>\n<li>对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。</li>\n</ul>\n<h5 id=\"创建一个单键索引\"><a href=\"#创建一个单键索引\" class=\"headerlink\" title=\"创建一个单键索引\"></a>创建一个单键索引</h5><ul>\n<li>单键索引是最普通的索引</li>\n<li>单键索引不会自动创建</li>\n</ul>\n<p>&emsp;&emsp;例如： 一条记录为<code>{x: 1, y: 2, z: 3}</code>，如果我们在x上建立了索引，就可以使用x为条件进行查寻。</p>\n<p><code>db.collection.ensureIndex({index: order})</code></p>\n<ul>\n<li>index: 索引</li>\n<li>order: 1表示升序， -1表示降序</li>\n</ul>\n<h5 id=\"创建一个多键索引\"><a href=\"#创建一个多键索引\" class=\"headerlink\" title=\"创建一个多键索引\"></a>创建一个多键索引</h5><p>多键索引与单键索引创建形式相同，区别在于字段的值。 </p>\n<ul>\n<li>单键索引：值为一个单一的值，如字符串，数字或日期。 </li>\n<li>多键索引：值具有多个记录，如数组。</li>\n</ul>\n<p><code>db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据</code></p>\n<p><code>db.collection.insert({x:new Date()}) //插入一条数组数据</code></p>\n<h5 id=\"创建一个复合索引\"><a href=\"#创建一个复合索引\" class=\"headerlink\" title=\"创建一个复合索引\"></a>创建一个复合索引</h5><p>&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引</p>\n<p>&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引<code>db.collection.ensureIndex({x:1, y:1})</code>，然后就可以使用<code>{x: 1, y:1}</code>作为条件进行查询</p>\n<p><code>db.collection.ensureIndex({x:1, y:1})</code></p>\n<h5 id=\"创建一个过期索引\"><a href=\"#创建一个过期索引\" class=\"headerlink\" title=\"创建一个过期索引\"></a>创建一个过期索引</h5><ul>\n<li>在一段时间后会过期的索引 </li>\n<li>在索引过期后，相应的数据会被删除 </li>\n<li>适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。</li>\n</ul>\n<p><code>db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})</code> 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒</p>\n<p>&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。</p>\n<p>&emsp;&emsp;过期索引的限制： </p>\n<ol>\n<li>存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。<br>例如 &gt;db.imooc_2.insert({time:1})，这种是不能被自动删除的 </li>\n<li>如果指定了ISODate数组，则按照最小的时间进行删除。 </li>\n<li>过期索引不能是复合索引。因为不能指定两个过期时间。 </li>\n<li>删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"开启MongoDB数据库服务\"><a href=\"#开启MongoDB数据库服务\" class=\"headerlink\" title=\"开启MongoDB数据库服务\"></a>开启MongoDB数据库服务</h4><p>&emsp;&emsp;mongo根目录<code>/bin/mongod -f</code> 配置文件目录/配置文件名<br>例：<code>./bin/mongod -f conf/mongod.conf</code></p>","more":"<h4 id=\"强行关闭MongoDB\"><a href=\"#强行关闭MongoDB\" class=\"headerlink\" title=\"强行关闭MongoDB\"></a>强行关闭MongoDB</h4><p>&emsp;&emsp;先用命令 <code>ps -ef | grep mongod</code>查出mongod 的进程pid<br>然后<code>kill pid</code>即可</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h5 id=\"连接MongoDB数据库\"><a href=\"#连接MongoDB数据库\" class=\"headerlink\" title=\"连接MongoDB数据库\"></a>连接MongoDB数据库</h5><p>&emsp;&emsp;mongo根目录<code>/bin/mongo</code> 数据库地址:端口号/库名称<br>例： <code>./bin/mongo 127.0.0.1:12345/test</code></p>\n<h5 id=\"关闭MongoDB数据库\"><a href=\"#关闭MongoDB数据库\" class=\"headerlink\" title=\"关闭MongoDB数据库\"></a>关闭MongoDB数据库</h5><p>&emsp;&emsp;<code>db.shutdownServer()</code></p>\n<h5 id=\"新建和切换数据库\"><a href=\"#新建和切换数据库\" class=\"headerlink\" title=\"新建和切换数据库\"></a>新建和切换数据库</h5><p>&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用<code>use 数据库名</code> 就可以了。</p>\n<h5 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h5><p>&emsp;&emsp;先用<code>db.use</code>切换到要删除的数据库，然后使用<code>db.dropDatabase()</code>来删除数据库</p>\n<h4 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h4><h5 id=\"插入一条数据\"><a href=\"#插入一条数据\" class=\"headerlink\" title=\"插入一条数据\"></a>插入一条数据</h5><p><code>db.collection.insert({key: value})</code></p>\n<p>其中集名称可以自己起</p>\n<h5 id=\"插入多条数据\"><a href=\"#插入多条数据\" class=\"headerlink\" title=\"插入多条数据\"></a>插入多条数据</h5><p>&emsp;&emsp;可以使用for循环插入： <code>for(i＝3;i&lt;100;i++)db.collection.insert({key: value})</code></p>\n<h5 id=\"查询所有数据\"><a href=\"#查询所有数据\" class=\"headerlink\" title=\"查询所有数据\"></a>查询所有数据</h5><p><code>db.collection.find()</code></p>\n<h5 id=\"查询单条数据\"><a href=\"#查询单条数据\" class=\"headerlink\" title=\"查询单条数据\"></a>查询单条数据</h5><p><code>db.collection.find({key: value})</code></p>\n<h5 id=\"查询后有条件地进行处理\"><a href=\"#查询后有条件地进行处理\" class=\"headerlink\" title=\"查询后有条件地进行处理\"></a>查询后有条件地进行处理</h5><p><code>db.collection.find({key: value}).skip(3).limit(5).sort({key: value})</code></p>\n<p>上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)</p>\n<h5 id=\"显示库中的所有集名称\"><a href=\"#显示库中的所有集名称\" class=\"headerlink\" title=\"显示库中的所有集名称\"></a>显示库中的所有集名称</h5><p><code>show collections</code></p>\n<h5 id=\"删除数据库中的集合\"><a href=\"#删除数据库中的集合\" class=\"headerlink\" title=\"删除数据库中的集合\"></a>删除数据库中的集合</h5><p><code>db.collection.drop()</code></p>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><h5 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h5><p><code>db.imooc_2.getIndexes()</code></p>\n<h5 id=\"id索引\"><a href=\"#id索引\" class=\"headerlink\" title=\"_id索引\"></a>_id索引</h5><ul>\n<li>_id索引是绝大多数集合默认建立的索引。</li>\n<li>对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。</li>\n</ul>\n<h5 id=\"创建一个单键索引\"><a href=\"#创建一个单键索引\" class=\"headerlink\" title=\"创建一个单键索引\"></a>创建一个单键索引</h5><ul>\n<li>单键索引是最普通的索引</li>\n<li>单键索引不会自动创建</li>\n</ul>\n<p>&emsp;&emsp;例如： 一条记录为<code>{x: 1, y: 2, z: 3}</code>，如果我们在x上建立了索引，就可以使用x为条件进行查寻。</p>\n<p><code>db.collection.ensureIndex({index: order})</code></p>\n<ul>\n<li>index: 索引</li>\n<li>order: 1表示升序， -1表示降序</li>\n</ul>\n<h5 id=\"创建一个多键索引\"><a href=\"#创建一个多键索引\" class=\"headerlink\" title=\"创建一个多键索引\"></a>创建一个多键索引</h5><p>多键索引与单键索引创建形式相同，区别在于字段的值。 </p>\n<ul>\n<li>单键索引：值为一个单一的值，如字符串，数字或日期。 </li>\n<li>多键索引：值具有多个记录，如数组。</li>\n</ul>\n<p><code>db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据</code></p>\n<p><code>db.collection.insert({x:new Date()}) //插入一条数组数据</code></p>\n<h5 id=\"创建一个复合索引\"><a href=\"#创建一个复合索引\" class=\"headerlink\" title=\"创建一个复合索引\"></a>创建一个复合索引</h5><p>&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引</p>\n<p>&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引<code>db.collection.ensureIndex({x:1, y:1})</code>，然后就可以使用<code>{x: 1, y:1}</code>作为条件进行查询</p>\n<p><code>db.collection.ensureIndex({x:1, y:1})</code></p>\n<h5 id=\"创建一个过期索引\"><a href=\"#创建一个过期索引\" class=\"headerlink\" title=\"创建一个过期索引\"></a>创建一个过期索引</h5><ul>\n<li>在一段时间后会过期的索引 </li>\n<li>在索引过期后，相应的数据会被删除 </li>\n<li>适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。</li>\n</ul>\n<p><code>db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})</code> 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒</p>\n<p>&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。</p>\n<p>&emsp;&emsp;过期索引的限制： </p>\n<ol>\n<li>存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。<br>例如 &gt;db.imooc_2.insert({time:1})，这种是不能被自动删除的 </li>\n<li>如果指定了ISODate数组，则按照最小的时间进行删除。 </li>\n<li>过期索引不能是复合索引。因为不能指定两个过期时间。 </li>\n<li>删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差</li>\n</ol>"},{"layout":"[post]","title":"渐进式图片加载效果","date":"2017-09-11T01:01:25.000Z","_content":"\n前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：\n\n### 图床\n\n就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。\n\n<!-- more -->\n\n### 地址替换\n\n思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。\n\n本文介绍的是方法二用地址替换的方式来实现：\n\n### 案例效果\n\n![案例效果](processing_image.gif)\n\n### 案例代码\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Processing Image Effect Demo</title>\n    <link rel=\"stylesheet\" href=\"./css/index.css\">\n</head>\n<body>\n    <div class=\"img-con\" id=\"imgCon\">\n        <img src=\"./img/1_small.jpg\" data-src=\"./img/1_big.jpeg\" alt=\"图片1\" id=\"img\">\n        <img src=\"./img/2_small.jpg\" data-src=\"./img/2_big.jpg\" alt=\"图片2\" id=\"img\">\n        <img src=\"./img/3_small.jpg\" data-src=\"./img/3_big.jpg\" alt=\"图片3\" id=\"img\">\n        <img src=\"./img/4_small.jpg\" data-src=\"./img/4_big.jpg\" alt=\"图片4\" id=\"img\">\n        <img src=\"./img/5_small.jpg\" data-src=\"./img/5_big.jpg\" alt=\"图片5\" id=\"img\">\n    </div>\n    <script>\n        window.onload = function() {\n            var imgCon = document.getElementById('imgCon')\n            var imgs = imgCon.getElementsByTagName('img')\n            for (var i = 0; i < imgs.length; i++) {\n                \n                (function(curImg) {\n                    var tempImg = null;\n                    tempImg = document.createElement('img')\n                    console.log(curImg)\n                    tempImg.src = curImg.dataset.src;\n                    tempImg.onload = function(e) {\n                        curImg.src = tempImg.src\n                        curImg.style.filter = 'blur(0px)'\n                    }\n                })(imgs[i])\n            }\n        }\n    </script>\n</body>\n</html>\n```\n\n```CSS\n.img-con img {\n    width: 100%;\n    height: 400px;\n    -webkit-transition: filter .3s ease-out 0s;\n    -moz-transition: filter .3s ease-out 0s;\n    transition: filter .3s ease-out 0s;\n    filter: blur(10px);\n    -ms-filter: blur(10px);\n    -webkit-filter: blur(10px);\n}\n```\n\n### 关键知识点\n\n- JS Image对象\n- CSS3 filter blur 属性\n\n*注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题*\n","source":"_posts/processing-medium-effect.md","raw":"---\nlayout: '[post]'\ntitle: 渐进式图片加载效果\ndate: 2017-09-11 09:01:25\ntags: 每周一练\n---\n\n前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：\n\n### 图床\n\n就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。\n\n<!-- more -->\n\n### 地址替换\n\n思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。\n\n本文介绍的是方法二用地址替换的方式来实现：\n\n### 案例效果\n\n![案例效果](processing_image.gif)\n\n### 案例代码\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Processing Image Effect Demo</title>\n    <link rel=\"stylesheet\" href=\"./css/index.css\">\n</head>\n<body>\n    <div class=\"img-con\" id=\"imgCon\">\n        <img src=\"./img/1_small.jpg\" data-src=\"./img/1_big.jpeg\" alt=\"图片1\" id=\"img\">\n        <img src=\"./img/2_small.jpg\" data-src=\"./img/2_big.jpg\" alt=\"图片2\" id=\"img\">\n        <img src=\"./img/3_small.jpg\" data-src=\"./img/3_big.jpg\" alt=\"图片3\" id=\"img\">\n        <img src=\"./img/4_small.jpg\" data-src=\"./img/4_big.jpg\" alt=\"图片4\" id=\"img\">\n        <img src=\"./img/5_small.jpg\" data-src=\"./img/5_big.jpg\" alt=\"图片5\" id=\"img\">\n    </div>\n    <script>\n        window.onload = function() {\n            var imgCon = document.getElementById('imgCon')\n            var imgs = imgCon.getElementsByTagName('img')\n            for (var i = 0; i < imgs.length; i++) {\n                \n                (function(curImg) {\n                    var tempImg = null;\n                    tempImg = document.createElement('img')\n                    console.log(curImg)\n                    tempImg.src = curImg.dataset.src;\n                    tempImg.onload = function(e) {\n                        curImg.src = tempImg.src\n                        curImg.style.filter = 'blur(0px)'\n                    }\n                })(imgs[i])\n            }\n        }\n    </script>\n</body>\n</html>\n```\n\n```CSS\n.img-con img {\n    width: 100%;\n    height: 400px;\n    -webkit-transition: filter .3s ease-out 0s;\n    -moz-transition: filter .3s ease-out 0s;\n    transition: filter .3s ease-out 0s;\n    filter: blur(10px);\n    -ms-filter: blur(10px);\n    -webkit-filter: blur(10px);\n}\n```\n\n### 关键知识点\n\n- JS Image对象\n- CSS3 filter blur 属性\n\n*注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题*\n","slug":"processing-medium-effect","published":1,"updated":"2017-12-09T18:58:53.000Z","comments":1,"photos":[],"link":"","_id":"cjy4nau68000lts2hj9zpc722","content":"<p>前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：</p>\n<h3 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h3><p>就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。</p>\n<a id=\"more\"></a>\n<h3 id=\"地址替换\"><a href=\"#地址替换\" class=\"headerlink\" title=\"地址替换\"></a>地址替换</h3><p>思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。</p>\n<p>本文介绍的是方法二用地址替换的方式来实现：</p>\n<h3 id=\"案例效果\"><a href=\"#案例效果\" class=\"headerlink\" title=\"案例效果\"></a>案例效果</h3><p><img src=\"/2017/09/11/processing-medium-effect/processing_image.gif\" alt=\"案例效果\"></p>\n<h3 id=\"案例代码\"><a href=\"#案例代码\" class=\"headerlink\" title=\"案例代码\"></a>案例代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Processing Image Effect Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./css/index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-con\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgCon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/1_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/1_big.jpeg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/2_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/2_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片2\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/3_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/3_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片3\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/4_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/4_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片4\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/5_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/5_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片5\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgCon = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'imgCon'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgs = imgCon.getElementsByTagName(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgs.length; i++) &#123;</span></div><div class=\"line\"><span class=\"undefined\">                </span></div><div class=\"line\"><span class=\"javascript\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">curImg</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> tempImg = <span class=\"literal\">null</span>;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(curImg)</span></div><div class=\"line\"><span class=\"undefined\">                    tempImg.src = curImg.dataset.src;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">                        curImg.src = tempImg.src</span></div><div class=\"line\"><span class=\"javascript\">                        curImg.style.filter = <span class=\"string\">'blur(0px)'</span></span></div><div class=\"line\"><span class=\"undefined\">                    &#125;</span></div><div class=\"line\"><span class=\"undefined\">                &#125;)(imgs[i])</span></div><div class=\"line\"><span class=\"undefined\">            &#125;</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.img-con</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">-moz-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-ms-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键知识点\"><a href=\"#关键知识点\" class=\"headerlink\" title=\"关键知识点\"></a>关键知识点</h3><ul>\n<li>JS Image对象</li>\n<li>CSS3 filter blur 属性</li>\n</ul>\n<p><em>注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题</em></p>\n","site":{"data":{}},"excerpt":"<p>前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：</p>\n<h3 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h3><p>就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。</p>","more":"<h3 id=\"地址替换\"><a href=\"#地址替换\" class=\"headerlink\" title=\"地址替换\"></a>地址替换</h3><p>思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。</p>\n<p>本文介绍的是方法二用地址替换的方式来实现：</p>\n<h3 id=\"案例效果\"><a href=\"#案例效果\" class=\"headerlink\" title=\"案例效果\"></a>案例效果</h3><p><img src=\"/2017/09/11/processing-medium-effect/processing_image.gif\" alt=\"案例效果\"></p>\n<h3 id=\"案例代码\"><a href=\"#案例代码\" class=\"headerlink\" title=\"案例代码\"></a>案例代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Processing Image Effect Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./css/index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-con\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgCon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/1_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/1_big.jpeg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/2_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/2_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片2\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/3_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/3_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片3\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/4_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/4_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片4\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/5_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/5_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片5\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgCon = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'imgCon'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgs = imgCon.getElementsByTagName(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgs.length; i++) &#123;</span></div><div class=\"line\"><span class=\"undefined\">                </span></div><div class=\"line\"><span class=\"javascript\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">curImg</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> tempImg = <span class=\"literal\">null</span>;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(curImg)</span></div><div class=\"line\"><span class=\"undefined\">                    tempImg.src = curImg.dataset.src;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">                        curImg.src = tempImg.src</span></div><div class=\"line\"><span class=\"javascript\">                        curImg.style.filter = <span class=\"string\">'blur(0px)'</span></span></div><div class=\"line\"><span class=\"undefined\">                    &#125;</span></div><div class=\"line\"><span class=\"undefined\">                &#125;)(imgs[i])</span></div><div class=\"line\"><span class=\"undefined\">            &#125;</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.img-con</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">-moz-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-ms-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键知识点\"><a href=\"#关键知识点\" class=\"headerlink\" title=\"关键知识点\"></a>关键知识点</h3><ul>\n<li>JS Image对象</li>\n<li>CSS3 filter blur 属性</li>\n</ul>\n<p><em>注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题</em></p>"},{"layout":"[post]","title":"单页面应用微信分享跳坑指南","date":"2018-08-01T11:18:08.000Z","_content":"\n## 前言\n\n最近在开发的时候遇到了一个微信分享的bug，就是无论你在哪个路径下的页面，发送给朋友后点开都只会跳到项目的首页。本来微信分享这个只算是一个小功能，也很好解决，但由于项目的特殊性，使得在这个bug解决起来并没有那么顺手，所以记录一下备以后翻阅。\n\n## 坑点\n\n- Vue单页面应用，前端通过Hash控制路由——iOS在微信中不能正常地改变浏览器的hash值，分享出去的页面地址被莫名其妙地添加了参数。\n\n- 微信的安全策略——由于存在js安全域名限制，使得在本地调试更难。\n\n- jssdk配置签名。\n\n## 跳坑方法\n\n### 分享地址被奇怪的被带上了参数\n\n在传统开发中，路由通常都是在后端完成的，但是在Vue单页面中，都是通过控制history interface来控制页面之间的跳转，在我们的项目中我们使用hash的方式，但是在分享给朋友后却发现分享地址被加上了一些参数，比如：\n\n我分享出去的地址是：`market.lenkuntang.cn/#/home`，分享后会变成了`market.lenkuntang.cn/?from=singlemessage#/home`。这到底会不会影响到我们的分享操作呢？这就要了解vue-router的工作原理了，翻看了一下vue-router的源码，发现如下代码：\n\n```\n// this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  setupListeners () {\n    const router = this.router\n    const expectScroll = router.options.scrollBehavior\n    const supportsScroll = supportsPushState && expectScroll\n\n    if (supportsScroll) {\n      setupScroll()\n    }\n\n    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', () => {\n      const current = this.current\n      if (!ensureSlash()) {\n        return\n      }\n      this.transitionTo(getHash(), route => {\n        if (supportsScroll) {\n          handleScroll(this.router, route, current, true)\n        }\n        if (!supportsPushState) {\n          replaceHash(route.fullPath)\n        }\n      })\n    })\n  }\n```\n\n[hash.js](https://user-gold-cdn.xitu.io/2018/8/1/164f36e016b35048)\n\n原来在vue-router初始化的时候，会监听`window`对象的`hashchange`属性，如想发现浏览器的`hash`值发生变化了，就会调用`History.transitionTo`方法，关键就在这个方法会传入一个`getHash`方法为作参数，如果在这种地址`market.lenkuntang.cn/?from=singlemessage#/home`也能正确地拿到正确的`hash`的话，那我们就可以断定这种意外对我们的分享是没有影响的。当我们继续去看`getHash`方法，在`hash.js`往下翻点会找到这个方法的实现：\n\n```\nexport function getHash (): string {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  const href = window.location.href\n  const index = href.indexOf('#')\n  return index === -1 ? '' : href.slice(index + 1)\n}\n```\n\n我们可以清楚地知道，当这条地址`market.lenkuntang.cn/?from=singlemessage#/home`经过`getHash`之后会直接返回`#`号后面的字符串，也就是\n`/home`，所以可以得出是不会对我们分享的功能有影响的。\n\n### iOS在微信环境中浏览器地址不变\n\n在Vue-router实现前端控制路由都是通过HTML5 新增的History Interface接口来控制页面之间的跳转的，在跳转的同时通过修改`window`中`loaction`的`hash`属性反映回浏览器的地址，但是当遇到iOS时却意外地发现这个`hash`属性一直没有被改变，导致每次分享出去的地址都是首页，在网上一查发现这原来是个通病，解决的方法就是引入微信的JsSDK来手动控制分享的地址。\n\n### 引入JsSDK所带来的问题\n\n在引入了JsSDK后，首先要对它进行配置，相关配置项如下：\n\n```\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: [] // 必填，需要使用的JS接口列表\n});\n```\n\n说明一下这里的参数分别从哪里来，appId是从微信公众号里获取的，`timestamp`和`nonceStr`还有`signature`是从服务器中返回的。jsApiList可以在[所有JS接口列表](https://mp.weixin.qq.com/wiki?action=doc&id=mp1421141115&t=0.11471355121805527#63)中找到。\n\n> 注：`timestamp`和`nonceStr`其实是可以在前端生成然后传给服务器再参与签名的计算的，但一般在考虑到安全原因，`timestamp`, `nonceStr`这些参数应该从服务器返回回来（因为它参与了签名的计算）。\n\n> 注意：这里的传入的随机字符串字段`nonceStr`是**驼峰命名！！！**\n\n然后就是引入JsSDK中遇到最大的问题——签名问题，要正确地实现使用JsSDK，在服务器端首先要集齐这四种元素：\n- noncestr（随机字符串）\n- jsapi_ticket（通过微信接口获得的ticket）\n- timestamp（时间戳）\n- url（当前网页的URL，不包含#及其后面部分）\n\n然后把这些元素按字典序（ASCII 码从小到大排序）排后使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串，再对字符串进行sha1加密，字段名和字段值都采用原始值，不进行URL 转义，即可得到所谓的签名。\n\n> 注意：这里的传入的随机字符串字段`noncestr`是**全小写！！！**\n\n最后附上签名检验工具的地址：[http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign](http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign)\n\n还有示例代码：[http://demo.open.weixin.qq.com/jssdk/sample.zip](http://demo.open.weixin.qq.com/jssdk/sample.zip)\n\n\n得到签名后再把`timestamp`，`nonceStr`和`signature`传回给前端进行JsSDK的初始化配置。\n\n### 再说计算签名的URL\n\n这里再说说参与签名的url，因为这里传过去的是当前见面的URL且不包括#及其后面部分，这对于使用Hash模式的单页面应用来说是个好消息，这样就代表我们只需要在页面加载时初始化一次后便可以在所有页面上使用（对于传统的路径导航，因为URL变了所以要重新初始化，也就是说要在使用到的JsSDK功能的页面中都要重新请求后台接口拿签名再初始化！！）。所以，一般来说我们通常会在`App.vue`这个文件中作JsSDK的初始化操作，当初始化正确后便可在其它页面上直接使用JsSDK接口的功能。\n\n次外，由于微信存在对JsSDK的使用限定在微信公众号里所设置的JS接口安全域名范围里，所以对于本地调度用的`localhost`域名来说是不可行的，直接提示`invalid url domain`，在这里有两种方式可以解决这个问题，一种是通过修改`host`的方法来实现本地调试，方法如下：\n\n#### window系统：\n\n进入系统盘目录（通常是C盘）： `C:\\Windows\\System32\\drivers\\etc`，找到`hosts`文件，打开后文件末尾添加一条记录`127.0.0.1 market.lenkuntang.cn`,这条记录的意思是当你访问`market.lenkuntang.cn`这个地址的时候会重定向到`127.0.0.1`这个ip地址，从而实现本地调试的目的。\n\n##### mac系统\n\n打开一个finder，然后按快捷键command+shift+G，输入`private/etc/hosts`回车后就能找到对应的hosts文件，由于是权限问题，是无法直接在那个目录中修改hosts文件的，所以要把文件复制到桌面或者其它有修改权限的目录，然后打开后也是类似window一样在文件末尾添加一条记录`127.0.0.1 market.lenkuntang.cn`,保存后拖回原目录确定覆盖。\n\n另一种是使用腾讯云的开发者实验室的在线Web IDE来登录到测试服务器，然后直接在服务器上进行修改，线上验证。但是由于这个Web IDE目前不支持SSH密钥方式登录，只能用账号和密码的方式登录。所以也是有一定的局限性的。\n\n附上Web IDE工具地址：[https://cloud.tencent.com/developer/labs/gallery](https://cloud.tencent.com/developer/labs/gallery)\n\n点击其中一个教程，然后选择开始上机下方的*使用已有*云主机标签，在弹出的登录界面中正确填写你服务器的IP地址和账号密码便可直接登入服务器内进行相关操作。\n\n\n![登录界面](https://user-gold-cdn.xitu.io/2018/8/1/164f52d678022dc4?w=2550&h=1270&f=png&s=173339)\n\n* 登录界面\n\n![登录成功后的界面](https://user-gold-cdn.xitu.io/2018/8/1/164f52e11cd4a132?w=2556&h=1262&f=png&s=214551)\n\n* 登录成功后的界面\n\n### 使用微信开发者工具来本地调试\n\n当我们配置好了所有东西后，打开浏览器我们可以在控制台的输出中看到JsSDK的相关信息，但是我们却不知道是否可以正确分享，难道我们每次都要使用手机来访问本地服务来验证吗？而且在使用手机来访问本地服务的时候，使用的是本地电脑的ip地址，这样去拿到签名肯定是不对，会报`invalid url domain`错误，当然也可以改手机的`hosts`，但是这就不是那么容易改了，安卓的话要root，苹果的话...算了算了。还是换种方法，这个时候我们应该使用微信开发者工具来进行调试，微信开发者工具可以模拟微信环境，可以进行微信想着的操作，所以使用这个工具我们就可以愉快地在本地进行调试啦。\n\n而且，在遇到需要微信登录的页面时，如何是用普通的浏览器来打开就会跳到微信的授权登录页，而用开发者工具来打开则会像手机一样弹出授权页：\n\n![普通浏览器打开](https://user-gold-cdn.xitu.io/2018/8/1/164f519bbd68322e?w=334&h=583&f=png&s=11804)\n\n* 普通浏览器打开\n\n![微信开发者工具](https://user-gold-cdn.xitu.io/2018/8/1/164f51ebf2b165e6?w=380&h=698&f=png&s=30325)\n\n* 微信开发者工具\n\n### 总结\n\n通过这几天对微信分享的研究，总体对微信的JsSDK的使用有了大概的认识和了解，虽然其中也遇到不少的坑和麻烦的地方，但是既然问题出现就只能尽量地去简化问题再解决它。","source":"_posts/wechat-share-and-single-page-summary.md","raw":"---\nlayout: '[post]'\ntitle: 单页面应用微信分享跳坑指南\ndate: 2018-08-01 19:18:08\ntags:\n---\n\n## 前言\n\n最近在开发的时候遇到了一个微信分享的bug，就是无论你在哪个路径下的页面，发送给朋友后点开都只会跳到项目的首页。本来微信分享这个只算是一个小功能，也很好解决，但由于项目的特殊性，使得在这个bug解决起来并没有那么顺手，所以记录一下备以后翻阅。\n\n## 坑点\n\n- Vue单页面应用，前端通过Hash控制路由——iOS在微信中不能正常地改变浏览器的hash值，分享出去的页面地址被莫名其妙地添加了参数。\n\n- 微信的安全策略——由于存在js安全域名限制，使得在本地调试更难。\n\n- jssdk配置签名。\n\n## 跳坑方法\n\n### 分享地址被奇怪的被带上了参数\n\n在传统开发中，路由通常都是在后端完成的，但是在Vue单页面中，都是通过控制history interface来控制页面之间的跳转，在我们的项目中我们使用hash的方式，但是在分享给朋友后却发现分享地址被加上了一些参数，比如：\n\n我分享出去的地址是：`market.lenkuntang.cn/#/home`，分享后会变成了`market.lenkuntang.cn/?from=singlemessage#/home`。这到底会不会影响到我们的分享操作呢？这就要了解vue-router的工作原理了，翻看了一下vue-router的源码，发现如下代码：\n\n```\n// this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  setupListeners () {\n    const router = this.router\n    const expectScroll = router.options.scrollBehavior\n    const supportsScroll = supportsPushState && expectScroll\n\n    if (supportsScroll) {\n      setupScroll()\n    }\n\n    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', () => {\n      const current = this.current\n      if (!ensureSlash()) {\n        return\n      }\n      this.transitionTo(getHash(), route => {\n        if (supportsScroll) {\n          handleScroll(this.router, route, current, true)\n        }\n        if (!supportsPushState) {\n          replaceHash(route.fullPath)\n        }\n      })\n    })\n  }\n```\n\n[hash.js](https://user-gold-cdn.xitu.io/2018/8/1/164f36e016b35048)\n\n原来在vue-router初始化的时候，会监听`window`对象的`hashchange`属性，如想发现浏览器的`hash`值发生变化了，就会调用`History.transitionTo`方法，关键就在这个方法会传入一个`getHash`方法为作参数，如果在这种地址`market.lenkuntang.cn/?from=singlemessage#/home`也能正确地拿到正确的`hash`的话，那我们就可以断定这种意外对我们的分享是没有影响的。当我们继续去看`getHash`方法，在`hash.js`往下翻点会找到这个方法的实现：\n\n```\nexport function getHash (): string {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  const href = window.location.href\n  const index = href.indexOf('#')\n  return index === -1 ? '' : href.slice(index + 1)\n}\n```\n\n我们可以清楚地知道，当这条地址`market.lenkuntang.cn/?from=singlemessage#/home`经过`getHash`之后会直接返回`#`号后面的字符串，也就是\n`/home`，所以可以得出是不会对我们分享的功能有影响的。\n\n### iOS在微信环境中浏览器地址不变\n\n在Vue-router实现前端控制路由都是通过HTML5 新增的History Interface接口来控制页面之间的跳转的，在跳转的同时通过修改`window`中`loaction`的`hash`属性反映回浏览器的地址，但是当遇到iOS时却意外地发现这个`hash`属性一直没有被改变，导致每次分享出去的地址都是首页，在网上一查发现这原来是个通病，解决的方法就是引入微信的JsSDK来手动控制分享的地址。\n\n### 引入JsSDK所带来的问题\n\n在引入了JsSDK后，首先要对它进行配置，相关配置项如下：\n\n```\nwx.config({\n    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: [] // 必填，需要使用的JS接口列表\n});\n```\n\n说明一下这里的参数分别从哪里来，appId是从微信公众号里获取的，`timestamp`和`nonceStr`还有`signature`是从服务器中返回的。jsApiList可以在[所有JS接口列表](https://mp.weixin.qq.com/wiki?action=doc&id=mp1421141115&t=0.11471355121805527#63)中找到。\n\n> 注：`timestamp`和`nonceStr`其实是可以在前端生成然后传给服务器再参与签名的计算的，但一般在考虑到安全原因，`timestamp`, `nonceStr`这些参数应该从服务器返回回来（因为它参与了签名的计算）。\n\n> 注意：这里的传入的随机字符串字段`nonceStr`是**驼峰命名！！！**\n\n然后就是引入JsSDK中遇到最大的问题——签名问题，要正确地实现使用JsSDK，在服务器端首先要集齐这四种元素：\n- noncestr（随机字符串）\n- jsapi_ticket（通过微信接口获得的ticket）\n- timestamp（时间戳）\n- url（当前网页的URL，不包含#及其后面部分）\n\n然后把这些元素按字典序（ASCII 码从小到大排序）排后使用URL键值对的格式（即key1=value1&key2=value2…）拼接成字符串，再对字符串进行sha1加密，字段名和字段值都采用原始值，不进行URL 转义，即可得到所谓的签名。\n\n> 注意：这里的传入的随机字符串字段`noncestr`是**全小写！！！**\n\n最后附上签名检验工具的地址：[http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign](http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign)\n\n还有示例代码：[http://demo.open.weixin.qq.com/jssdk/sample.zip](http://demo.open.weixin.qq.com/jssdk/sample.zip)\n\n\n得到签名后再把`timestamp`，`nonceStr`和`signature`传回给前端进行JsSDK的初始化配置。\n\n### 再说计算签名的URL\n\n这里再说说参与签名的url，因为这里传过去的是当前见面的URL且不包括#及其后面部分，这对于使用Hash模式的单页面应用来说是个好消息，这样就代表我们只需要在页面加载时初始化一次后便可以在所有页面上使用（对于传统的路径导航，因为URL变了所以要重新初始化，也就是说要在使用到的JsSDK功能的页面中都要重新请求后台接口拿签名再初始化！！）。所以，一般来说我们通常会在`App.vue`这个文件中作JsSDK的初始化操作，当初始化正确后便可在其它页面上直接使用JsSDK接口的功能。\n\n次外，由于微信存在对JsSDK的使用限定在微信公众号里所设置的JS接口安全域名范围里，所以对于本地调度用的`localhost`域名来说是不可行的，直接提示`invalid url domain`，在这里有两种方式可以解决这个问题，一种是通过修改`host`的方法来实现本地调试，方法如下：\n\n#### window系统：\n\n进入系统盘目录（通常是C盘）： `C:\\Windows\\System32\\drivers\\etc`，找到`hosts`文件，打开后文件末尾添加一条记录`127.0.0.1 market.lenkuntang.cn`,这条记录的意思是当你访问`market.lenkuntang.cn`这个地址的时候会重定向到`127.0.0.1`这个ip地址，从而实现本地调试的目的。\n\n##### mac系统\n\n打开一个finder，然后按快捷键command+shift+G，输入`private/etc/hosts`回车后就能找到对应的hosts文件，由于是权限问题，是无法直接在那个目录中修改hosts文件的，所以要把文件复制到桌面或者其它有修改权限的目录，然后打开后也是类似window一样在文件末尾添加一条记录`127.0.0.1 market.lenkuntang.cn`,保存后拖回原目录确定覆盖。\n\n另一种是使用腾讯云的开发者实验室的在线Web IDE来登录到测试服务器，然后直接在服务器上进行修改，线上验证。但是由于这个Web IDE目前不支持SSH密钥方式登录，只能用账号和密码的方式登录。所以也是有一定的局限性的。\n\n附上Web IDE工具地址：[https://cloud.tencent.com/developer/labs/gallery](https://cloud.tencent.com/developer/labs/gallery)\n\n点击其中一个教程，然后选择开始上机下方的*使用已有*云主机标签，在弹出的登录界面中正确填写你服务器的IP地址和账号密码便可直接登入服务器内进行相关操作。\n\n\n![登录界面](https://user-gold-cdn.xitu.io/2018/8/1/164f52d678022dc4?w=2550&h=1270&f=png&s=173339)\n\n* 登录界面\n\n![登录成功后的界面](https://user-gold-cdn.xitu.io/2018/8/1/164f52e11cd4a132?w=2556&h=1262&f=png&s=214551)\n\n* 登录成功后的界面\n\n### 使用微信开发者工具来本地调试\n\n当我们配置好了所有东西后，打开浏览器我们可以在控制台的输出中看到JsSDK的相关信息，但是我们却不知道是否可以正确分享，难道我们每次都要使用手机来访问本地服务来验证吗？而且在使用手机来访问本地服务的时候，使用的是本地电脑的ip地址，这样去拿到签名肯定是不对，会报`invalid url domain`错误，当然也可以改手机的`hosts`，但是这就不是那么容易改了，安卓的话要root，苹果的话...算了算了。还是换种方法，这个时候我们应该使用微信开发者工具来进行调试，微信开发者工具可以模拟微信环境，可以进行微信想着的操作，所以使用这个工具我们就可以愉快地在本地进行调试啦。\n\n而且，在遇到需要微信登录的页面时，如何是用普通的浏览器来打开就会跳到微信的授权登录页，而用开发者工具来打开则会像手机一样弹出授权页：\n\n![普通浏览器打开](https://user-gold-cdn.xitu.io/2018/8/1/164f519bbd68322e?w=334&h=583&f=png&s=11804)\n\n* 普通浏览器打开\n\n![微信开发者工具](https://user-gold-cdn.xitu.io/2018/8/1/164f51ebf2b165e6?w=380&h=698&f=png&s=30325)\n\n* 微信开发者工具\n\n### 总结\n\n通过这几天对微信分享的研究，总体对微信的JsSDK的使用有了大概的认识和了解，虽然其中也遇到不少的坑和麻烦的地方，但是既然问题出现就只能尽量地去简化问题再解决它。","slug":"wechat-share-and-single-page-summary","published":1,"updated":"2018-08-01T11:32:32.000Z","comments":1,"photos":[],"link":"","_id":"cjy4nau69000ots2ha7gxrv59","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在开发的时候遇到了一个微信分享的bug，就是无论你在哪个路径下的页面，发送给朋友后点开都只会跳到项目的首页。本来微信分享这个只算是一个小功能，也很好解决，但由于项目的特殊性，使得在这个bug解决起来并没有那么顺手，所以记录一下备以后翻阅。</p>\n<h2 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h2><ul>\n<li><p>Vue单页面应用，前端通过Hash控制路由——iOS在微信中不能正常地改变浏览器的hash值，分享出去的页面地址被莫名其妙地添加了参数。</p>\n</li>\n<li><p>微信的安全策略——由于存在js安全域名限制，使得在本地调试更难。</p>\n</li>\n<li><p>jssdk配置签名。</p>\n</li>\n</ul>\n<h2 id=\"跳坑方法\"><a href=\"#跳坑方法\" class=\"headerlink\" title=\"跳坑方法\"></a>跳坑方法</h2><h3 id=\"分享地址被奇怪的被带上了参数\"><a href=\"#分享地址被奇怪的被带上了参数\" class=\"headerlink\" title=\"分享地址被奇怪的被带上了参数\"></a>分享地址被奇怪的被带上了参数</h3><p>在传统开发中，路由通常都是在后端完成的，但是在Vue单页面中，都是通过控制history interface来控制页面之间的跳转，在我们的项目中我们使用hash的方式，但是在分享给朋友后却发现分享地址被加上了一些参数，比如：</p>\n<p>我分享出去的地址是：<code>market.lenkuntang.cn/#/home</code>，分享后会变成了<code>market.lenkuntang.cn/?from=singlemessage#/home</code>。这到底会不会影响到我们的分享操作呢？这就要了解vue-router的工作原理了，翻看了一下vue-router的源码，发现如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// this is delayed until the app mounts</div><div class=\"line\">  // to avoid the hashchange listener being fired too early</div><div class=\"line\">  setupListeners () &#123;</div><div class=\"line\">    const router = this.router</div><div class=\"line\">    const expectScroll = router.options.scrollBehavior</div><div class=\"line\">    const supportsScroll = supportsPushState &amp;&amp; expectScroll</div><div class=\"line\"></div><div class=\"line\">    if (supportsScroll) &#123;</div><div class=\"line\">      setupScroll()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    window.addEventListener(supportsPushState ? &apos;popstate&apos; : &apos;hashchange&apos;, () =&gt; &#123;</div><div class=\"line\">      const current = this.current</div><div class=\"line\">      if (!ensureSlash()) &#123;</div><div class=\"line\">        return</div><div class=\"line\">      &#125;</div><div class=\"line\">      this.transitionTo(getHash(), route =&gt; &#123;</div><div class=\"line\">        if (supportsScroll) &#123;</div><div class=\"line\">          handleScroll(this.router, route, current, true)</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (!supportsPushState) &#123;</div><div class=\"line\">          replaceHash(route.fullPath)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p><a href=\"https://user-gold-cdn.xitu.io/2018/8/1/164f36e016b35048\" target=\"_blank\" rel=\"external\">hash.js</a></p>\n<p>原来在vue-router初始化的时候，会监听<code>window</code>对象的<code>hashchange</code>属性，如想发现浏览器的<code>hash</code>值发生变化了，就会调用<code>History.transitionTo</code>方法，关键就在这个方法会传入一个<code>getHash</code>方法为作参数，如果在这种地址<code>market.lenkuntang.cn/?from=singlemessage#/home</code>也能正确地拿到正确的<code>hash</code>的话，那我们就可以断定这种意外对我们的分享是没有影响的。当我们继续去看<code>getHash</code>方法，在<code>hash.js</code>往下翻点会找到这个方法的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">export function getHash (): string &#123;</div><div class=\"line\">  // We can&apos;t use window.location.hash here because it&apos;s not</div><div class=\"line\">  // consistent across browsers - Firefox will pre-decode it!</div><div class=\"line\">  const href = window.location.href</div><div class=\"line\">  const index = href.indexOf(&apos;#&apos;)</div><div class=\"line\">  return index === -1 ? &apos;&apos; : href.slice(index + 1)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以清楚地知道，当这条地址<code>market.lenkuntang.cn/?from=singlemessage#/home</code>经过<code>getHash</code>之后会直接返回<code>#</code>号后面的字符串，也就是<br><code>/home</code>，所以可以得出是不会对我们分享的功能有影响的。</p>\n<h3 id=\"iOS在微信环境中浏览器地址不变\"><a href=\"#iOS在微信环境中浏览器地址不变\" class=\"headerlink\" title=\"iOS在微信环境中浏览器地址不变\"></a>iOS在微信环境中浏览器地址不变</h3><p>在Vue-router实现前端控制路由都是通过HTML5 新增的History Interface接口来控制页面之间的跳转的，在跳转的同时通过修改<code>window</code>中<code>loaction</code>的<code>hash</code>属性反映回浏览器的地址，但是当遇到iOS时却意外地发现这个<code>hash</code>属性一直没有被改变，导致每次分享出去的地址都是首页，在网上一查发现这原来是个通病，解决的方法就是引入微信的JsSDK来手动控制分享的地址。</p>\n<h3 id=\"引入JsSDK所带来的问题\"><a href=\"#引入JsSDK所带来的问题\" class=\"headerlink\" title=\"引入JsSDK所带来的问题\"></a>引入JsSDK所带来的问题</h3><p>在引入了JsSDK后，首先要对它进行配置，相关配置项如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</div><div class=\"line\">    appId: &apos;&apos;, // 必填，公众号的唯一标识</div><div class=\"line\">    timestamp: , // 必填，生成签名的时间戳</div><div class=\"line\">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</div><div class=\"line\">    signature: &apos;&apos;,// 必填，签名</div><div class=\"line\">    jsApiList: [] // 必填，需要使用的JS接口列表</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>说明一下这里的参数分别从哪里来，appId是从微信公众号里获取的，<code>timestamp</code>和<code>nonceStr</code>还有<code>signature</code>是从服务器中返回的。jsApiList可以在<a href=\"https://mp.weixin.qq.com/wiki?action=doc&amp;id=mp1421141115&amp;t=0.11471355121805527#63\" target=\"_blank\" rel=\"external\">所有JS接口列表</a>中找到。</p>\n<blockquote>\n<p>注：<code>timestamp</code>和<code>nonceStr</code>其实是可以在前端生成然后传给服务器再参与签名的计算的，但一般在考虑到安全原因，<code>timestamp</code>, <code>nonceStr</code>这些参数应该从服务器返回回来（因为它参与了签名的计算）。</p>\n<p>注意：这里的传入的随机字符串字段<code>nonceStr</code>是<strong>驼峰命名！！！</strong></p>\n</blockquote>\n<p>然后就是引入JsSDK中遇到最大的问题——签名问题，要正确地实现使用JsSDK，在服务器端首先要集齐这四种元素：</p>\n<ul>\n<li>noncestr（随机字符串）</li>\n<li>jsapi_ticket（通过微信接口获得的ticket）</li>\n<li>timestamp（时间戳）</li>\n<li>url（当前网页的URL，不包含#及其后面部分）</li>\n</ul>\n<p>然后把这些元素按字典序（ASCII 码从小到大排序）排后使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串，再对字符串进行sha1加密，字段名和字段值都采用原始值，不进行URL 转义，即可得到所谓的签名。</p>\n<blockquote>\n<p>注意：这里的传入的随机字符串字段<code>noncestr</code>是<strong>全小写！！！</strong></p>\n</blockquote>\n<p>最后附上签名检验工具的地址：<a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a></p>\n<p>还有示例代码：<a href=\"http://demo.open.weixin.qq.com/jssdk/sample.zip\" target=\"_blank\" rel=\"external\">http://demo.open.weixin.qq.com/jssdk/sample.zip</a></p>\n<p>得到签名后再把<code>timestamp</code>，<code>nonceStr</code>和<code>signature</code>传回给前端进行JsSDK的初始化配置。</p>\n<h3 id=\"再说计算签名的URL\"><a href=\"#再说计算签名的URL\" class=\"headerlink\" title=\"再说计算签名的URL\"></a>再说计算签名的URL</h3><p>这里再说说参与签名的url，因为这里传过去的是当前见面的URL且不包括#及其后面部分，这对于使用Hash模式的单页面应用来说是个好消息，这样就代表我们只需要在页面加载时初始化一次后便可以在所有页面上使用（对于传统的路径导航，因为URL变了所以要重新初始化，也就是说要在使用到的JsSDK功能的页面中都要重新请求后台接口拿签名再初始化！！）。所以，一般来说我们通常会在<code>App.vue</code>这个文件中作JsSDK的初始化操作，当初始化正确后便可在其它页面上直接使用JsSDK接口的功能。</p>\n<p>次外，由于微信存在对JsSDK的使用限定在微信公众号里所设置的JS接口安全域名范围里，所以对于本地调度用的<code>localhost</code>域名来说是不可行的，直接提示<code>invalid url domain</code>，在这里有两种方式可以解决这个问题，一种是通过修改<code>host</code>的方法来实现本地调试，方法如下：</p>\n<h4 id=\"window系统：\"><a href=\"#window系统：\" class=\"headerlink\" title=\"window系统：\"></a>window系统：</h4><p>进入系统盘目录（通常是C盘）： <code>C:\\Windows\\System32\\drivers\\etc</code>，找到<code>hosts</code>文件，打开后文件末尾添加一条记录<code>127.0.0.1 market.lenkuntang.cn</code>,这条记录的意思是当你访问<code>market.lenkuntang.cn</code>这个地址的时候会重定向到<code>127.0.0.1</code>这个ip地址，从而实现本地调试的目的。</p>\n<h5 id=\"mac系统\"><a href=\"#mac系统\" class=\"headerlink\" title=\"mac系统\"></a>mac系统</h5><p>打开一个finder，然后按快捷键command+shift+G，输入<code>private/etc/hosts</code>回车后就能找到对应的hosts文件，由于是权限问题，是无法直接在那个目录中修改hosts文件的，所以要把文件复制到桌面或者其它有修改权限的目录，然后打开后也是类似window一样在文件末尾添加一条记录<code>127.0.0.1 market.lenkuntang.cn</code>,保存后拖回原目录确定覆盖。</p>\n<p>另一种是使用腾讯云的开发者实验室的在线Web IDE来登录到测试服务器，然后直接在服务器上进行修改，线上验证。但是由于这个Web IDE目前不支持SSH密钥方式登录，只能用账号和密码的方式登录。所以也是有一定的局限性的。</p>\n<p>附上Web IDE工具地址：<a href=\"https://cloud.tencent.com/developer/labs/gallery\" target=\"_blank\" rel=\"external\">https://cloud.tencent.com/developer/labs/gallery</a></p>\n<p>点击其中一个教程，然后选择开始上机下方的<em>使用已有</em>云主机标签，在弹出的登录界面中正确填写你服务器的IP地址和账号密码便可直接登入服务器内进行相关操作。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f52d678022dc4?w=2550&amp;h=1270&amp;f=png&amp;s=173339\" alt=\"登录界面\"></p>\n<ul>\n<li>登录界面</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f52e11cd4a132?w=2556&amp;h=1262&amp;f=png&amp;s=214551\" alt=\"登录成功后的界面\"></p>\n<ul>\n<li>登录成功后的界面</li>\n</ul>\n<h3 id=\"使用微信开发者工具来本地调试\"><a href=\"#使用微信开发者工具来本地调试\" class=\"headerlink\" title=\"使用微信开发者工具来本地调试\"></a>使用微信开发者工具来本地调试</h3><p>当我们配置好了所有东西后，打开浏览器我们可以在控制台的输出中看到JsSDK的相关信息，但是我们却不知道是否可以正确分享，难道我们每次都要使用手机来访问本地服务来验证吗？而且在使用手机来访问本地服务的时候，使用的是本地电脑的ip地址，这样去拿到签名肯定是不对，会报<code>invalid url domain</code>错误，当然也可以改手机的<code>hosts</code>，但是这就不是那么容易改了，安卓的话要root，苹果的话…算了算了。还是换种方法，这个时候我们应该使用微信开发者工具来进行调试，微信开发者工具可以模拟微信环境，可以进行微信想着的操作，所以使用这个工具我们就可以愉快地在本地进行调试啦。</p>\n<p>而且，在遇到需要微信登录的页面时，如何是用普通的浏览器来打开就会跳到微信的授权登录页，而用开发者工具来打开则会像手机一样弹出授权页：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f519bbd68322e?w=334&amp;h=583&amp;f=png&amp;s=11804\" alt=\"普通浏览器打开\"></p>\n<ul>\n<li>普通浏览器打开</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f51ebf2b165e6?w=380&amp;h=698&amp;f=png&amp;s=30325\" alt=\"微信开发者工具\"></p>\n<ul>\n<li>微信开发者工具</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这几天对微信分享的研究，总体对微信的JsSDK的使用有了大概的认识和了解，虽然其中也遇到不少的坑和麻烦的地方，但是既然问题出现就只能尽量地去简化问题再解决它。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在开发的时候遇到了一个微信分享的bug，就是无论你在哪个路径下的页面，发送给朋友后点开都只会跳到项目的首页。本来微信分享这个只算是一个小功能，也很好解决，但由于项目的特殊性，使得在这个bug解决起来并没有那么顺手，所以记录一下备以后翻阅。</p>\n<h2 id=\"坑点\"><a href=\"#坑点\" class=\"headerlink\" title=\"坑点\"></a>坑点</h2><ul>\n<li><p>Vue单页面应用，前端通过Hash控制路由——iOS在微信中不能正常地改变浏览器的hash值，分享出去的页面地址被莫名其妙地添加了参数。</p>\n</li>\n<li><p>微信的安全策略——由于存在js安全域名限制，使得在本地调试更难。</p>\n</li>\n<li><p>jssdk配置签名。</p>\n</li>\n</ul>\n<h2 id=\"跳坑方法\"><a href=\"#跳坑方法\" class=\"headerlink\" title=\"跳坑方法\"></a>跳坑方法</h2><h3 id=\"分享地址被奇怪的被带上了参数\"><a href=\"#分享地址被奇怪的被带上了参数\" class=\"headerlink\" title=\"分享地址被奇怪的被带上了参数\"></a>分享地址被奇怪的被带上了参数</h3><p>在传统开发中，路由通常都是在后端完成的，但是在Vue单页面中，都是通过控制history interface来控制页面之间的跳转，在我们的项目中我们使用hash的方式，但是在分享给朋友后却发现分享地址被加上了一些参数，比如：</p>\n<p>我分享出去的地址是：<code>market.lenkuntang.cn/#/home</code>，分享后会变成了<code>market.lenkuntang.cn/?from=singlemessage#/home</code>。这到底会不会影响到我们的分享操作呢？这就要了解vue-router的工作原理了，翻看了一下vue-router的源码，发现如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// this is delayed until the app mounts</div><div class=\"line\">  // to avoid the hashchange listener being fired too early</div><div class=\"line\">  setupListeners () &#123;</div><div class=\"line\">    const router = this.router</div><div class=\"line\">    const expectScroll = router.options.scrollBehavior</div><div class=\"line\">    const supportsScroll = supportsPushState &amp;&amp; expectScroll</div><div class=\"line\"></div><div class=\"line\">    if (supportsScroll) &#123;</div><div class=\"line\">      setupScroll()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    window.addEventListener(supportsPushState ? &apos;popstate&apos; : &apos;hashchange&apos;, () =&gt; &#123;</div><div class=\"line\">      const current = this.current</div><div class=\"line\">      if (!ensureSlash()) &#123;</div><div class=\"line\">        return</div><div class=\"line\">      &#125;</div><div class=\"line\">      this.transitionTo(getHash(), route =&gt; &#123;</div><div class=\"line\">        if (supportsScroll) &#123;</div><div class=\"line\">          handleScroll(this.router, route, current, true)</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (!supportsPushState) &#123;</div><div class=\"line\">          replaceHash(route.fullPath)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p><a href=\"https://user-gold-cdn.xitu.io/2018/8/1/164f36e016b35048\" target=\"_blank\" rel=\"external\">hash.js</a></p>\n<p>原来在vue-router初始化的时候，会监听<code>window</code>对象的<code>hashchange</code>属性，如想发现浏览器的<code>hash</code>值发生变化了，就会调用<code>History.transitionTo</code>方法，关键就在这个方法会传入一个<code>getHash</code>方法为作参数，如果在这种地址<code>market.lenkuntang.cn/?from=singlemessage#/home</code>也能正确地拿到正确的<code>hash</code>的话，那我们就可以断定这种意外对我们的分享是没有影响的。当我们继续去看<code>getHash</code>方法，在<code>hash.js</code>往下翻点会找到这个方法的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">export function getHash (): string &#123;</div><div class=\"line\">  // We can&apos;t use window.location.hash here because it&apos;s not</div><div class=\"line\">  // consistent across browsers - Firefox will pre-decode it!</div><div class=\"line\">  const href = window.location.href</div><div class=\"line\">  const index = href.indexOf(&apos;#&apos;)</div><div class=\"line\">  return index === -1 ? &apos;&apos; : href.slice(index + 1)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们可以清楚地知道，当这条地址<code>market.lenkuntang.cn/?from=singlemessage#/home</code>经过<code>getHash</code>之后会直接返回<code>#</code>号后面的字符串，也就是<br><code>/home</code>，所以可以得出是不会对我们分享的功能有影响的。</p>\n<h3 id=\"iOS在微信环境中浏览器地址不变\"><a href=\"#iOS在微信环境中浏览器地址不变\" class=\"headerlink\" title=\"iOS在微信环境中浏览器地址不变\"></a>iOS在微信环境中浏览器地址不变</h3><p>在Vue-router实现前端控制路由都是通过HTML5 新增的History Interface接口来控制页面之间的跳转的，在跳转的同时通过修改<code>window</code>中<code>loaction</code>的<code>hash</code>属性反映回浏览器的地址，但是当遇到iOS时却意外地发现这个<code>hash</code>属性一直没有被改变，导致每次分享出去的地址都是首页，在网上一查发现这原来是个通病，解决的方法就是引入微信的JsSDK来手动控制分享的地址。</p>\n<h3 id=\"引入JsSDK所带来的问题\"><a href=\"#引入JsSDK所带来的问题\" class=\"headerlink\" title=\"引入JsSDK所带来的问题\"></a>引入JsSDK所带来的问题</h3><p>在引入了JsSDK后，首先要对它进行配置，相关配置项如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</div><div class=\"line\">    appId: &apos;&apos;, // 必填，公众号的唯一标识</div><div class=\"line\">    timestamp: , // 必填，生成签名的时间戳</div><div class=\"line\">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</div><div class=\"line\">    signature: &apos;&apos;,// 必填，签名</div><div class=\"line\">    jsApiList: [] // 必填，需要使用的JS接口列表</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>说明一下这里的参数分别从哪里来，appId是从微信公众号里获取的，<code>timestamp</code>和<code>nonceStr</code>还有<code>signature</code>是从服务器中返回的。jsApiList可以在<a href=\"https://mp.weixin.qq.com/wiki?action=doc&amp;id=mp1421141115&amp;t=0.11471355121805527#63\" target=\"_blank\" rel=\"external\">所有JS接口列表</a>中找到。</p>\n<blockquote>\n<p>注：<code>timestamp</code>和<code>nonceStr</code>其实是可以在前端生成然后传给服务器再参与签名的计算的，但一般在考虑到安全原因，<code>timestamp</code>, <code>nonceStr</code>这些参数应该从服务器返回回来（因为它参与了签名的计算）。</p>\n<p>注意：这里的传入的随机字符串字段<code>nonceStr</code>是<strong>驼峰命名！！！</strong></p>\n</blockquote>\n<p>然后就是引入JsSDK中遇到最大的问题——签名问题，要正确地实现使用JsSDK，在服务器端首先要集齐这四种元素：</p>\n<ul>\n<li>noncestr（随机字符串）</li>\n<li>jsapi_ticket（通过微信接口获得的ticket）</li>\n<li>timestamp（时间戳）</li>\n<li>url（当前网页的URL，不包含#及其后面部分）</li>\n</ul>\n<p>然后把这些元素按字典序（ASCII 码从小到大排序）排后使用URL键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串，再对字符串进行sha1加密，字段名和字段值都采用原始值，不进行URL 转义，即可得到所谓的签名。</p>\n<blockquote>\n<p>注意：这里的传入的随机字符串字段<code>noncestr</code>是<strong>全小写！！！</strong></p>\n</blockquote>\n<p>最后附上签名检验工具的地址：<a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\" target=\"_blank\" rel=\"external\">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a></p>\n<p>还有示例代码：<a href=\"http://demo.open.weixin.qq.com/jssdk/sample.zip\" target=\"_blank\" rel=\"external\">http://demo.open.weixin.qq.com/jssdk/sample.zip</a></p>\n<p>得到签名后再把<code>timestamp</code>，<code>nonceStr</code>和<code>signature</code>传回给前端进行JsSDK的初始化配置。</p>\n<h3 id=\"再说计算签名的URL\"><a href=\"#再说计算签名的URL\" class=\"headerlink\" title=\"再说计算签名的URL\"></a>再说计算签名的URL</h3><p>这里再说说参与签名的url，因为这里传过去的是当前见面的URL且不包括#及其后面部分，这对于使用Hash模式的单页面应用来说是个好消息，这样就代表我们只需要在页面加载时初始化一次后便可以在所有页面上使用（对于传统的路径导航，因为URL变了所以要重新初始化，也就是说要在使用到的JsSDK功能的页面中都要重新请求后台接口拿签名再初始化！！）。所以，一般来说我们通常会在<code>App.vue</code>这个文件中作JsSDK的初始化操作，当初始化正确后便可在其它页面上直接使用JsSDK接口的功能。</p>\n<p>次外，由于微信存在对JsSDK的使用限定在微信公众号里所设置的JS接口安全域名范围里，所以对于本地调度用的<code>localhost</code>域名来说是不可行的，直接提示<code>invalid url domain</code>，在这里有两种方式可以解决这个问题，一种是通过修改<code>host</code>的方法来实现本地调试，方法如下：</p>\n<h4 id=\"window系统：\"><a href=\"#window系统：\" class=\"headerlink\" title=\"window系统：\"></a>window系统：</h4><p>进入系统盘目录（通常是C盘）： <code>C:\\Windows\\System32\\drivers\\etc</code>，找到<code>hosts</code>文件，打开后文件末尾添加一条记录<code>127.0.0.1 market.lenkuntang.cn</code>,这条记录的意思是当你访问<code>market.lenkuntang.cn</code>这个地址的时候会重定向到<code>127.0.0.1</code>这个ip地址，从而实现本地调试的目的。</p>\n<h5 id=\"mac系统\"><a href=\"#mac系统\" class=\"headerlink\" title=\"mac系统\"></a>mac系统</h5><p>打开一个finder，然后按快捷键command+shift+G，输入<code>private/etc/hosts</code>回车后就能找到对应的hosts文件，由于是权限问题，是无法直接在那个目录中修改hosts文件的，所以要把文件复制到桌面或者其它有修改权限的目录，然后打开后也是类似window一样在文件末尾添加一条记录<code>127.0.0.1 market.lenkuntang.cn</code>,保存后拖回原目录确定覆盖。</p>\n<p>另一种是使用腾讯云的开发者实验室的在线Web IDE来登录到测试服务器，然后直接在服务器上进行修改，线上验证。但是由于这个Web IDE目前不支持SSH密钥方式登录，只能用账号和密码的方式登录。所以也是有一定的局限性的。</p>\n<p>附上Web IDE工具地址：<a href=\"https://cloud.tencent.com/developer/labs/gallery\" target=\"_blank\" rel=\"external\">https://cloud.tencent.com/developer/labs/gallery</a></p>\n<p>点击其中一个教程，然后选择开始上机下方的<em>使用已有</em>云主机标签，在弹出的登录界面中正确填写你服务器的IP地址和账号密码便可直接登入服务器内进行相关操作。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f52d678022dc4?w=2550&amp;h=1270&amp;f=png&amp;s=173339\" alt=\"登录界面\"></p>\n<ul>\n<li>登录界面</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f52e11cd4a132?w=2556&amp;h=1262&amp;f=png&amp;s=214551\" alt=\"登录成功后的界面\"></p>\n<ul>\n<li>登录成功后的界面</li>\n</ul>\n<h3 id=\"使用微信开发者工具来本地调试\"><a href=\"#使用微信开发者工具来本地调试\" class=\"headerlink\" title=\"使用微信开发者工具来本地调试\"></a>使用微信开发者工具来本地调试</h3><p>当我们配置好了所有东西后，打开浏览器我们可以在控制台的输出中看到JsSDK的相关信息，但是我们却不知道是否可以正确分享，难道我们每次都要使用手机来访问本地服务来验证吗？而且在使用手机来访问本地服务的时候，使用的是本地电脑的ip地址，这样去拿到签名肯定是不对，会报<code>invalid url domain</code>错误，当然也可以改手机的<code>hosts</code>，但是这就不是那么容易改了，安卓的话要root，苹果的话…算了算了。还是换种方法，这个时候我们应该使用微信开发者工具来进行调试，微信开发者工具可以模拟微信环境，可以进行微信想着的操作，所以使用这个工具我们就可以愉快地在本地进行调试啦。</p>\n<p>而且，在遇到需要微信登录的页面时，如何是用普通的浏览器来打开就会跳到微信的授权登录页，而用开发者工具来打开则会像手机一样弹出授权页：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f519bbd68322e?w=334&amp;h=583&amp;f=png&amp;s=11804\" alt=\"普通浏览器打开\"></p>\n<ul>\n<li>普通浏览器打开</li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/8/1/164f51ebf2b165e6?w=380&amp;h=698&amp;f=png&amp;s=30325\" alt=\"微信开发者工具\"></p>\n<ul>\n<li>微信开发者工具</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这几天对微信分享的研究，总体对微信的JsSDK的使用有了大概的认识和了解，虽然其中也遇到不少的坑和麻烦的地方，但是既然问题出现就只能尽量地去简化问题再解决它。</p>\n"}],"PostAsset":[{"_id":"source/_posts/processing-medium-effect/processing_image.gif","slug":"processing_image.gif","post":"cjy4nau68000lts2hj9zpc722","modified":1,"renderable":0},{"_id":"source/_posts/interestingCSS/demo1.gif","slug":"demo1.gif","post":"cjy4nau62000cts2hv82fw1bp","modified":1,"renderable":0},{"_id":"source/_posts/interestingCSS/demo3.gif","slug":"demo3.gif","post":"cjy4nau62000cts2hv82fw1bp","modified":1,"renderable":0},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic1.png","post":"cjy4nau5z0009ts2htcdfatdq","slug":"pic1.png","modified":1,"renderable":1},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic2.png","post":"cjy4nau5z0009ts2htcdfatdq","slug":"pic2.png","modified":1,"renderable":1},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic3.png","post":"cjy4nau5z0009ts2htcdfatdq","slug":"pic3.png","modified":1,"renderable":1},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic4.png","post":"cjy4nau5z0009ts2htcdfatdq","slug":"pic4.png","modified":1,"renderable":1},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic5.png","post":"cjy4nau5z0009ts2htcdfatdq","slug":"pic5.png","modified":1,"renderable":1},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic6.jpg","post":"cjy4nau5z0009ts2htcdfatdq","slug":"pic6.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjy4nau560002ts2htfccnyni","tag_id":"cjy4nau5c0006ts2hzvsgobwv","_id":"cjy4nau62000bts2ho88az5ol"},{"post_id":"cjy4nau590004ts2hfg9ya9sa","tag_id":"cjy4nau5c0006ts2hzvsgobwv","_id":"cjy4nau65000fts2hvsm5n5ev"},{"post_id":"cjy4nau5l0007ts2h034q0h2p","tag_id":"cjy4nau5c0006ts2hzvsgobwv","_id":"cjy4nau67000jts2h19wgzhx6"},{"post_id":"cjy4nau67000kts2h0n3gjt5g","tag_id":"cjy4nau5c0006ts2hzvsgobwv","_id":"cjy4nau69000nts2h2xcdfeci"},{"post_id":"cjy4nau5s0008ts2hckikqdw4","tag_id":"cjy4nau67000its2hanx02ap7","_id":"cjy4nau6a000pts2h5ixagzbv"},{"post_id":"cjy4nau5z0009ts2htcdfatdq","tag_id":"cjy4nau69000mts2h3j1dxa1j","_id":"cjy4nau6b000rts2hfu2q9znj"},{"post_id":"cjy4nau62000cts2hv82fw1bp","tag_id":"cjy4nau6a000qts2htgn7434o","_id":"cjy4nau6b000tts2h1hdbgvog"},{"post_id":"cjy4nau64000dts2h6vpb6dwj","tag_id":"cjy4nau6b000sts2hxec0kd5o","_id":"cjy4nau6b000vts2h8e0bdsim"},{"post_id":"cjy4nau65000gts2htf1wbjbs","tag_id":"cjy4nau6b000uts2hlkoro83l","_id":"cjy4nau6c000xts2h00ebpr58"},{"post_id":"cjy4nau66000hts2hbuhab4wf","tag_id":"cjy4nau6b000sts2hxec0kd5o","_id":"cjy4nau6d000zts2hop86enus"},{"post_id":"cjy4nau68000lts2hj9zpc722","tag_id":"cjy4nau6a000qts2htgn7434o","_id":"cjy4nau6g0010ts2h92q6eq9z"}],"Tag":[{"name":"读书笔记","_id":"cjy4nau5c0006ts2hzvsgobwv"},{"name":"课本摘抄","_id":"cjy4nau67000its2hanx02ap7"},{"name":"个人总结","_id":"cjy4nau69000mts2h3j1dxa1j"},{"name":"每周一练","_id":"cjy4nau6a000qts2htgn7434o"},{"name":"转载","_id":"cjy4nau6b000sts2hxec0kd5o"},{"name":"记录","_id":"cjy4nau6b000uts2hlkoro83l"}]}}