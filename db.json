{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"be34e0f59dca0d322b0b94abb1dff6e4d53598ec","modified":1512841986000},{"_id":"themes/anatole/.gitignore","hash":"9fcbb05b158b5d3ba1ee60d38889e05e8b0f3f2a","modified":1494448682000},{"_id":"themes/anatole/.DS_Store","hash":"73394ea9d6b63ea52c2ce6a9ba35679e32db2e38","modified":1512818910000},{"_id":"themes/anatole/LICENSE","hash":"359cb81298c1fdbccf531548fc097466b0151be4","modified":1494448682000},{"_id":"themes/anatole/_config.yml","hash":"a8bee01ff3c1be08c05ff72b3f3f84cfaddc67d9","modified":1512847376000},{"_id":"themes/anatole/README.md","hash":"75a3829b8a316249ec0b4fd8eae2d371de879494","modified":1494448682000},{"_id":"themes/anatole/_config.sample.yml","hash":"0163bdeed600bb1911f894927a71ab842bcfc7dd","modified":1512818835000},{"_id":"themes/anatole/package.json","hash":"cf731a3ebf3913747fccb6c4c6615eba7d7e88a4","modified":1494448682000},{"_id":"source/_posts/JavascriptDataType.md","hash":"910e11444d395fe5e3af5e8c9e5641fe2d70737f","modified":1512846010000},{"_id":"source/_posts/.DS_Store","hash":"f053d64ca2553b12d4a7c419e329dbaa96b3ed4e","modified":1512845825000},{"_id":"source/_posts/JavaScript-Design-Patterns-and-Development-Practice.md","hash":"1be8f3036e48797eb288c91c7d0c7c40bbf64651","modified":1509987401000},{"_id":"source/_posts/Javascript-data-structure.md","hash":"1525ebe8f83b43131caf820c28428e53455ce238","modified":1512846736000},{"_id":"source/_posts/SoftwareTesting.md","hash":"e38c24b38d23cf2ae0c127abd3f22b6708e3281c","modified":1512846812000},{"_id":"source/_posts/The-problem-of-mobile-web-developing.md","hash":"faaf6990147b4b834aa6f09d3459ac084a30f816","modified":1512847194000},{"_id":"source/_posts/interestingCSS.md","hash":"98a7b3bfe18762c7107f1db1643e52d864e7a1bc","modified":1512846518000},{"_id":"source/_posts/mongodb-command.md","hash":"fcb71974d76f22aa64c5f2e036a4498e8b65118a","modified":1512846295000},{"_id":"source/_posts/processing-medium-effect.md","hash":"a2554f0812bbd492ee5ab3bdb2998b597f91ea43","modified":1512845933000},{"_id":"source/about/.DS_Store","hash":"20c869a09bdee533be756e567eb41ed428a55b4e","modified":1512824665000},{"_id":"source/about/index.md","hash":"648821e10cb9432a03dec7e4611b48495038d3f1","modified":1512824846000},{"_id":"source/links/index.md","hash":"85684cb36ce99a65eb113782d242072c56b78198","modified":1512830890000},{"_id":"source/tags/index.html","hash":"446d2e7e07b6992760c67dcdd5633b671299b106","modified":1512846830000},{"_id":"themes/anatole/layout/archive.jade","hash":"1a161404966000b25a84762f08da3ca60af146bc","modified":1494448682000},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1494448682000},{"_id":"themes/anatole/layout/category.jade","hash":"ae894ef4baee4a0c7c8e66641166061e789f1fa7","modified":1494448682000},{"_id":"themes/anatole/layout/index.jade","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1494448682000},{"_id":"themes/anatole/layout/mixins.jade","hash":"4273d1badbe0bcc25540f5703a286fe53e7cd566","modified":1512846197000},{"_id":"themes/anatole/layout/page.jade","hash":"d89724fd1db3352943511493aadc1a212085719d","modified":1512831474000},{"_id":"themes/anatole/layout/post.jade","hash":"2f2b91b98d8f72d105211cdbf312d44ea3b1b145","modified":1494448682000},{"_id":"themes/anatole/layout/tag.jade","hash":"7017a8bae4f4a412dafb556772bdcf2cfddeb79f","modified":1494448682000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/.DS_Store","hash":"010c831aa5b4002f512a5fff44341ce774dc14db","modified":1512845805000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic1.png","hash":"0c416e6f0a1aa48c6104152a71cf8f54d58f1e6c","modified":1512832003000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic2.png","hash":"0731b5925237aea7ce27a0e952f4c2bc8ee79a94","modified":1512815994000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic3.png","hash":"8b0bdbf27dd7495464ba86b6c41b4c16d420b8aa","modified":1512832466000},{"_id":"source/_posts/processing-medium-effect/.DS_Store","hash":"3e98fb80cf1b989d1934b270a6d1a99496411a60","modified":1505434887000},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"97bde3f00234c3daa6f5832e15a68e6203fde25f","modified":1512845090000},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"772f03a2dd9fa4fed422c4eb4d5d1ace84c65580","modified":1494448682000},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1494448682000},{"_id":"themes/anatole/layout/partial/head.jade","hash":"3d6126d0b53a889a46ad61eb8cc0ab1b35446c49","modified":1494448682000},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"4e5fdc2cd8f5029aec601e5f7146274150f86655","modified":1512824480000},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"b96b789d47e5a1553c6835d66b82759e1a6678eb","modified":1512826396000},{"_id":"themes/anatole/source/css/style.css","hash":"e5466503fa0235084c37ad566acf7fcb5f9fb27a","modified":1512846462000},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1494448682000},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1494448682000},{"_id":"themes/anatole/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1494448682000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1494448682000},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1494448682000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1494448682000},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1494448682000},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1494448682000},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1494448682000},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1494448682000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1494448682000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic4.png","hash":"0ee043d7b403a0ffa07283ef2618883243d4245a","modified":1512832660000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic5.png","hash":"3e5c49f032b80a0a55cca22b11235b54f64bf0cf","modified":1512832685000},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic6.jpg","hash":"ad9ef3d29d77c3c7d5d03561e2ec0e83ee9ba53b","modified":1512841970000},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1494448682000},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1494448682000},{"_id":"source/_posts/interestingCSS/demo3.gif","hash":"5272b4ebaab2e81080d962821efc5ad7dd98464b","modified":1502032210000},{"_id":"source/_posts/interestingCSS/demo1.gif","hash":"baf127a84161d51657bb51a27af5fdb923686045","modified":1502032210000},{"_id":"source/_posts/processing-medium-effect/processing_image.gif","hash":"acbe7ad57dad9e05c39707a193d6a37fe156d399","modified":1505434529000},{"_id":"public/content.json","hash":"b2620867fa4e4b152c8afb96a5645400984b4b50","modified":1512847229950},{"_id":"public/about/index.html","hash":"400985eeaf55105a488c2fba8f153fc9087e8e7c","modified":1512847391895},{"_id":"public/links/index.html","hash":"bf4b8ea3c8aa1ee919b07aa46367cd8beec2e3a7","modified":1512847391895},{"_id":"public/tags/index.html","hash":"6b174c379e0014161b4f8c91d640f38d991069a8","modified":1512847391896},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/index.html","hash":"ede2ed47746b327a381c27dc1e971f76988196ed","modified":1512847391896},{"_id":"public/2017/11/30/mongodb-command/index.html","hash":"c7847c07b49ce72eb14456c88285d67d86f4e78c","modified":1512847391896},{"_id":"public/2017/09/11/processing-medium-effect/index.html","hash":"0066813c48559c144a04983e6d749869dc38219a","modified":1512847391896},{"_id":"public/2017/08/06/SoftwareTesting/index.html","hash":"c03c1c66cd9d2e6746e682bec9e6effd848d3f9b","modified":1512847391896},{"_id":"public/archives/index.html","hash":"e5761d1bcff2088db102436f06bd200f3754d9db","modified":1512847391896},{"_id":"public/index.html","hash":"3309d0a15d68c7743be006e9ce050f5592226df9","modified":1512847391896},{"_id":"public/tags/读书笔记/index.html","hash":"faafa4a2aa8b979e7236b606113f7b788b66bd59","modified":1512847391896},{"_id":"public/tags/课本摘抄/index.html","hash":"add7e16a0ccc0a7e3b0226c2cd06bb6987ed7f77","modified":1512847391896},{"_id":"public/tags/个人总结/index.html","hash":"4a1df42b50f5f6c8a8f3215c1a56e38cb8513583","modified":1512847391896},{"_id":"public/tags/每周一练/index.html","hash":"4e468a6029bf62c8af881b3bcfcc5edc8fd70bb7","modified":1512847391896},{"_id":"public/2017/08/09/JavaScript-Design-Patterns-and-Development-Practice/index.html","hash":"eb69b99b61abdd81567e25e3e5d252cad1eff13c","modified":1512847391896},{"_id":"public/2017/08/06/JavascriptDataType/index.html","hash":"8aac72861e614ee2d918f26c9bd894cf9240c152","modified":1512847391896},{"_id":"public/2017/06/25/Javascript-data-structure/index.html","hash":"8e3b12923b87501520aa4436c0b50a2617b4bf08","modified":1512847391896},{"_id":"public/2017/04/27/interestingCSS/index.html","hash":"2adf52e5f9d463382b1907d97942fc575b324c48","modified":1512847391897},{"_id":"public/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1512847229975},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1512847229975},{"_id":"public/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1512847229975},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1512847229975},{"_id":"public/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1512847229976},{"_id":"public/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1512847229976},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic1.png","hash":"0c416e6f0a1aa48c6104152a71cf8f54d58f1e6c","modified":1512847229976},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic2.png","hash":"0731b5925237aea7ce27a0e952f4c2bc8ee79a94","modified":1512847229976},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic3.png","hash":"8b0bdbf27dd7495464ba86b6c41b4c16d420b8aa","modified":1512847229976},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1512847229980},{"_id":"public/css/style.css","hash":"e5466503fa0235084c37ad566acf7fcb5f9fb27a","modified":1512847229993},{"_id":"public/css/blog_basic.css","hash":"7db88f0873e858b21a4c981c8481708ad9117478","modified":1512847229994},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1512847229995},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1512847229995},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1512847229995},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1512847229995},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic5.png","hash":"3e5c49f032b80a0a55cca22b11235b54f64bf0cf","modified":1512847229995},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic6.jpg","hash":"ad9ef3d29d77c3c7d5d03561e2ec0e83ee9ba53b","modified":1512847229995},{"_id":"public/2017/12/09/The-problem-of-mobile-web-developing/pic4.png","hash":"0ee043d7b403a0ffa07283ef2618883243d4245a","modified":1512847229995},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1512847230009},{"_id":"public/2017/04/27/interestingCSS/demo3.gif","hash":"5272b4ebaab2e81080d962821efc5ad7dd98464b","modified":1512847230018},{"_id":"public/2017/04/27/interestingCSS/demo1.gif","hash":"baf127a84161d51657bb51a27af5fdb923686045","modified":1512847230033},{"_id":"public/2017/09/11/processing-medium-effect/processing_image.gif","hash":"acbe7ad57dad9e05c39707a193d6a37fe156d399","modified":1512847230055}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-12-09T13:02:58.000Z","_content":"\n# 我是一个","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-12-09 21:02:58\n---\n\n# 我是一个","updated":"2017-12-09T13:07:26.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjazq6gpp0001c6ac4tzjqxgm","content":"<h1 id=\"我是一个\"><a href=\"#我是一个\" class=\"headerlink\" title=\"我是一个\"></a>我是一个</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我是一个\"><a href=\"#我是一个\" class=\"headerlink\" title=\"我是一个\"></a>我是一个</h1>"},{"title":"links","date":"2017-12-09T14:48:10.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: \n---\n","updated":"2017-12-09T14:48:10.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjazq6gpx0003c6aclx33wjut","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>","source":"tags/index.html","raw":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>","date":"2017-12-09T19:13:50.000Z","updated":"2017-12-09T19:13:50.000Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cjazq6gq70006c6aceoj7ege3","content":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>","site":{"data":{}},"excerpt":"","more":"<div class=\"list-with-title\">\n    <ul class=\"listing\">\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/读书笔记/\" title=\"读书笔记\">读书笔记</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/每周一练/\" title=\"每周一练\">每周一练</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/个人总结/\" title=\"个人总结\">个人总结</a>\n            </div>\n        </div>\n        <div class=\"listing-item\">\n            <div class=\"listing-post\">\n                <i class=\"fa fa-tag\"></i>\n                <a href=\"/tags/课本摘抄/\" title=\"课本摘抄\">课本摘抄</a>\n            </div>\n        </div>\n    </ul>\n</div>"}],"Post":[{"title":"Javascript 数据类型","date":"2017-08-06T15:14:13.000Z","_content":"\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n<!-- more  -->\n\n---\n\n#### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==\n\n---\n\n#### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==\n\n---\n\n#### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==\n\n---\n\n#####Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n######2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n######3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n######4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n######5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同\n","source":"_posts/JavascriptDataType.md","raw":"---\ntitle: Javascript 数据类型\ndate: 2017-08-06 23:14:13\ntags: 读书笔记\n---\n\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n<!-- more  -->\n\n---\n\n#### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==\n\n---\n\n#### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==\n\n---\n\n#### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==\n\n---\n\n#####Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n######2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n######3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n######4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n######5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同\n","slug":"JavascriptDataType","published":1,"updated":"2017-12-09T19:00:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjazq6gpj0000c6acjtbtkevi","content":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h4><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p>==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==</p>\n<hr>\n<h4 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h4><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==</p>\n<hr>\n<h4 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h4><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==</p>\n<hr>\n<p>#####Number类型</p>\n<h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<p>######2. 其它进制转换为十进制</p>\n<p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>######3. 浮点数值</p>\n<p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p>==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>######4. NaN (Not a Number)</p>\n<ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<p>######5. 数值转换</p>\n<ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>","more":"<hr>\n<h4 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h4><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p>==注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数==</p>\n<hr>\n<h4 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h4><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>==注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱==</p>\n<hr>\n<h4 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h4><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>==如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值 ==</p>\n<hr>\n<p>#####Number类型</p>\n<h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<p>######2. 其它进制转换为十进制</p>\n<p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<p>######3. 浮点数值</p>\n<p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p>==注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：==<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>######4. NaN (Not a Number)</p>\n<ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<p>######5. 数值转换</p>\n<ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>"},{"title":"JavaScript 设计模式与开发实践","date":"2017-08-09T11:51:22.000Z","_content":"\n## 基础知识\n\n### 一、this、call 和 apply\n\n#### this的指向\n\n除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：\n\n- 作为对象的方法调用。\n- 作为普通函数调用。\n- 构造器调用。\n- Function.prototype.call或Function.prototype.apply调用。\n\n<!-- more -->\n\n1. 作为对象的方法调用\n\n当函数作为对象的方法被调用时，this指向该对象：\n\n```\nvar obj = {\n\ta: 1，\n    getA: function() {\n    \talert( this === obj );\n        alert( this.a );\n    }\n}\n\nobj.getA();\n// output: true\n// output: 1\n```\n2. 作为普通函数调用\n\n当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。\n\n```\nwindow.name = 'golbalName';\n\nvar getName = function() {\n\treturn this.name;\n};\n\nvar anotherGetName = function() {\n\tconsole.log(getName())\n}\n\nconsole.log( getName()) ;\n// output: globalName\n\nanotherGetName();\n// output: globalName\n```\n\n或者\n\n```\nwindow.name = 'globalName';\n\nvar myObject = {\n\tname: 'sven',\n    getName: function(){\n    \treturn this.name;\n    };\n};\n\nvar getName = myObject.getName;\ncosnole.log( getName() );\n// output: globalName\n\n```\n\n3. 有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            alert( this.id ); // output: div1\n            var callback =function() {\n                alert( this.id ); // output: window\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n此时有一种简单的解决方案，可以用一个变量保存div节点的引用：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            var that = this\n            var callback =function() {\n                alert( that.id ); // output: div1\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:\n\n\n```\nfunction func() {\n\t“use strict\"\n    alert( this ) // output: undefined\n}\n```\n\n### 二、闭包和高阶函数\n\n#### 闭包\n\n## 设计模式\n\n### 订阅模式\n\n订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。\n\n例： \n\n```\nvar event = {\n    // 存放订阅事件的数组队列\n    clientList: [],\n    // 添加订阅事件的方法\n    listen: function( key, fn ) {\n        // key 是订阅事件的代号标志，比如login表示登录订阅事件，\n        // loadFail表示读取失败订阅事件\n        // fn 是要订阅事件触发时执行的函数\n        if (!this.clientList[ key ]) {\n            this.clientList[ key ] = []\n        }\n        // 把订阅消息添加到缓存列表\n        this.clientList[ key ].push( fn );\n    },\n    trigger: function() {\n        var key = Array.prototype.shift.call( arguments )\n            fns = this.clientList[ key ]\n        \n            if ( !fns || fns.length === 0 ) { // 如果没有绑定对应的消息\n                return false\n            }\n        \n            for ( var i = 0, fn; fn = fns[ i++ ];) {\n                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数\n            }\n    }\n}\n```\n\n我们来测试一下上面的代码：\n首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）\n\n```\nvar installEvent = function( obj ) {\n    for ( var i in event ) {\n        obj[ i ] = event[ i ];\n    }\n}\n```\n\n假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。\n\n```\n// 先给老师添加发布订阅功能\nvar teacher = {}\ninstallEvent( teacher )\n\n// 老师备课时先定义好将要布置的作业\nfunction doMath() {\n\tconsole.log( 'do Math homework' )\n}\n\nfunction doMathTest() {\n\tconsole.log( 'do Math test homework' )\n}\n\nfunction doEnglish() {\n\tconsole.log( 'do Englisth homework' )\n}\n\n// 在课堂上老师发布作业\nteacher.listen( 'Math', function() {\n    doMath();\n})\n\nteacher.listen( 'Math', function() {\n\tdoMathTest()\n})\n\nteacher.listen( 'English', function() {\n    do English()\n})\n\n// 做作业的时间到了，学生做老师发布的作业\n// 用if来假设条件成立，可以去掉\nif ( new Date().now === 8888 ) {\n\tteacher.trigger( 'Math' )\n\tteacher.trigger( 'English' )\n}\n\n```\n\n发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。\n\n### 中介者模式\n\n中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。\n\n中介者模式一般有两种实现方式：\n\n- 利用发布-订阅模式。\n- 中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。\n\n考虑一个现实的一个例子：\n这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。\n\n假设有这几种规格的手机：\n\n```\nvar goods = {\n\t\"red\": 3,\n\t\"blue: 6\n}\n```\n\n粗略地把上面分成以下几种情况：\n\n1. 选择红色手机，买4个，显示库存不足，购买按钮不可点\n2. 选择蓝色手机，买5个，显示库存充足，购买按钮可点\n3. 不有选择颜色或者数量的时候，购买按钮不可点\n\n以下进行编码：\n\n页面HTML代码：\n\n```\n选择颜色： \n<select name=\"\" id=\"colorSelect\">\n    <option value=\"\">请选择</option>\n    <option value=\"red\">红色</option>\n    <option value=\"blue\">蓝色</option>\n</select>\n输入购买数量：\n<input type=\"text\" id=\"numberInput\">\n您选择了颜色：\n<div id=\"colorInfo\"></div><br/>\n您输入了数量：\n<div id=\"nubmerInfo\"></div>\n您输入了容量：\n<div id=\"momeryInfo\"></div>\n```\n\n先定义商品规格：\n\n```\nvar goods = {\n    \"red|32G\": 3,\n    \"red|64G\": 0,\n    \"blue|32G\": 1,\n    \"blue|16G\": 6\n}\n```\n\n定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。\n\n```\nvar mediator = (function(){\n    var colorSelect = document.getElementById('colorSelect')\n    var memorySelect = document.getElementById('memorySelect')\n    var numberInput = document.getElementById('numberInput')\n    var colorInfo = document.getElementById('colorInfo')\n    var memoryInfo = document.getElementById('memoryInfo')\n    var numberInfo = document.getElementById('numberInfo')\n    var nextBtn = document.getElementById('nextBtn')\n\n    return {\n        changed: function(obj){\n            var color = colorSelect.value,  // 颜色\n                memory = memorySelect.value, // 内存\n                number = numberSelect.value, // 数量\n                stock = goods[ color + '|' + memory ];  // 颜色和内存对应的手机库存数量\n            \n            if ( obj === colorSelect ) {\n                colorInfo.innerHTML = color\n            } else if ( obj === memorySelect ) {\n                memoryInfo.innerHTML = memory\n            } else if ( obj === numberInput ) {\n                numberInfo.innerHTML = number\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择手机颜色'\n                return\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择内存大小'\n                return\n            }\n\n            if ( Number.isInteger ( number - 0 ) && number > 0 ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请输入正确的购买数量'\n                return\n            }\n\n            nextBtn.disabled = false\n            nextBtn.innerHTML = '放入购物车'\n        }\n    }\n})()\n```\n\n当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。\n\n```\ncolorSelect.onchange = function() {\n    mediator.changed( this )\n}\n\nmemorySelect.onchange = function() {\n    mediator.changed( this )\n}\n\nnumberInput.onchange = function() {\n    mediator.changed( this )\n}\n```\n\n","source":"_posts/JavaScript-Design-Patterns-and-Development-Practice.md","raw":"---\ntitle: JavaScript 设计模式与开发实践\ndate: 2017-08-09 19:51:22\ntags: 读书笔记\n---\n\n## 基础知识\n\n### 一、this、call 和 apply\n\n#### this的指向\n\n除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：\n\n- 作为对象的方法调用。\n- 作为普通函数调用。\n- 构造器调用。\n- Function.prototype.call或Function.prototype.apply调用。\n\n<!-- more -->\n\n1. 作为对象的方法调用\n\n当函数作为对象的方法被调用时，this指向该对象：\n\n```\nvar obj = {\n\ta: 1，\n    getA: function() {\n    \talert( this === obj );\n        alert( this.a );\n    }\n}\n\nobj.getA();\n// output: true\n// output: 1\n```\n2. 作为普通函数调用\n\n当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。\n\n```\nwindow.name = 'golbalName';\n\nvar getName = function() {\n\treturn this.name;\n};\n\nvar anotherGetName = function() {\n\tconsole.log(getName())\n}\n\nconsole.log( getName()) ;\n// output: globalName\n\nanotherGetName();\n// output: globalName\n```\n\n或者\n\n```\nwindow.name = 'globalName';\n\nvar myObject = {\n\tname: 'sven',\n    getName: function(){\n    \treturn this.name;\n    };\n};\n\nvar getName = myObject.getName;\ncosnole.log( getName() );\n// output: globalName\n\n```\n\n3. 有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            alert( this.id ); // output: div1\n            var callback =function() {\n                alert( this.id ); // output: window\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n此时有一种简单的解决方案，可以用一个变量保存div节点的引用：\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"div1\">I am a div</div>\n\n    <script>\n        window.id = 'window'\n        document.getElementById('div1').onclick =function() {\n            var that = this\n            var callback =function() {\n                alert( that.id ); // output: div1\n            }\n            callback()\n        }\n    </script>\n</body>\n</html>\n```\n\n在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:\n\n\n```\nfunction func() {\n\t“use strict\"\n    alert( this ) // output: undefined\n}\n```\n\n### 二、闭包和高阶函数\n\n#### 闭包\n\n## 设计模式\n\n### 订阅模式\n\n订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。\n\n例： \n\n```\nvar event = {\n    // 存放订阅事件的数组队列\n    clientList: [],\n    // 添加订阅事件的方法\n    listen: function( key, fn ) {\n        // key 是订阅事件的代号标志，比如login表示登录订阅事件，\n        // loadFail表示读取失败订阅事件\n        // fn 是要订阅事件触发时执行的函数\n        if (!this.clientList[ key ]) {\n            this.clientList[ key ] = []\n        }\n        // 把订阅消息添加到缓存列表\n        this.clientList[ key ].push( fn );\n    },\n    trigger: function() {\n        var key = Array.prototype.shift.call( arguments )\n            fns = this.clientList[ key ]\n        \n            if ( !fns || fns.length === 0 ) { // 如果没有绑定对应的消息\n                return false\n            }\n        \n            for ( var i = 0, fn; fn = fns[ i++ ];) {\n                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数\n            }\n    }\n}\n```\n\n我们来测试一下上面的代码：\n首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）\n\n```\nvar installEvent = function( obj ) {\n    for ( var i in event ) {\n        obj[ i ] = event[ i ];\n    }\n}\n```\n\n假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。\n\n```\n// 先给老师添加发布订阅功能\nvar teacher = {}\ninstallEvent( teacher )\n\n// 老师备课时先定义好将要布置的作业\nfunction doMath() {\n\tconsole.log( 'do Math homework' )\n}\n\nfunction doMathTest() {\n\tconsole.log( 'do Math test homework' )\n}\n\nfunction doEnglish() {\n\tconsole.log( 'do Englisth homework' )\n}\n\n// 在课堂上老师发布作业\nteacher.listen( 'Math', function() {\n    doMath();\n})\n\nteacher.listen( 'Math', function() {\n\tdoMathTest()\n})\n\nteacher.listen( 'English', function() {\n    do English()\n})\n\n// 做作业的时间到了，学生做老师发布的作业\n// 用if来假设条件成立，可以去掉\nif ( new Date().now === 8888 ) {\n\tteacher.trigger( 'Math' )\n\tteacher.trigger( 'English' )\n}\n\n```\n\n发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。\n\n### 中介者模式\n\n中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。\n\n中介者模式一般有两种实现方式：\n\n- 利用发布-订阅模式。\n- 中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。\n\n考虑一个现实的一个例子：\n这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。\n\n假设有这几种规格的手机：\n\n```\nvar goods = {\n\t\"red\": 3,\n\t\"blue: 6\n}\n```\n\n粗略地把上面分成以下几种情况：\n\n1. 选择红色手机，买4个，显示库存不足，购买按钮不可点\n2. 选择蓝色手机，买5个，显示库存充足，购买按钮可点\n3. 不有选择颜色或者数量的时候，购买按钮不可点\n\n以下进行编码：\n\n页面HTML代码：\n\n```\n选择颜色： \n<select name=\"\" id=\"colorSelect\">\n    <option value=\"\">请选择</option>\n    <option value=\"red\">红色</option>\n    <option value=\"blue\">蓝色</option>\n</select>\n输入购买数量：\n<input type=\"text\" id=\"numberInput\">\n您选择了颜色：\n<div id=\"colorInfo\"></div><br/>\n您输入了数量：\n<div id=\"nubmerInfo\"></div>\n您输入了容量：\n<div id=\"momeryInfo\"></div>\n```\n\n先定义商品规格：\n\n```\nvar goods = {\n    \"red|32G\": 3,\n    \"red|64G\": 0,\n    \"blue|32G\": 1,\n    \"blue|16G\": 6\n}\n```\n\n定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。\n\n```\nvar mediator = (function(){\n    var colorSelect = document.getElementById('colorSelect')\n    var memorySelect = document.getElementById('memorySelect')\n    var numberInput = document.getElementById('numberInput')\n    var colorInfo = document.getElementById('colorInfo')\n    var memoryInfo = document.getElementById('memoryInfo')\n    var numberInfo = document.getElementById('numberInfo')\n    var nextBtn = document.getElementById('nextBtn')\n\n    return {\n        changed: function(obj){\n            var color = colorSelect.value,  // 颜色\n                memory = memorySelect.value, // 内存\n                number = numberSelect.value, // 数量\n                stock = goods[ color + '|' + memory ];  // 颜色和内存对应的手机库存数量\n            \n            if ( obj === colorSelect ) {\n                colorInfo.innerHTML = color\n            } else if ( obj === memorySelect ) {\n                memoryInfo.innerHTML = memory\n            } else if ( obj === numberInput ) {\n                numberInfo.innerHTML = number\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择手机颜色'\n                return\n            }\n\n            if ( !memory ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请选择内存大小'\n                return\n            }\n\n            if ( Number.isInteger ( number - 0 ) && number > 0 ) {\n                nextBtn.disabled = true\n                nextBtn.innerHTML = '请输入正确的购买数量'\n                return\n            }\n\n            nextBtn.disabled = false\n            nextBtn.innerHTML = '放入购物车'\n        }\n    }\n})()\n```\n\n当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。\n\n```\ncolorSelect.onchange = function() {\n    mediator.changed( this )\n}\n\nmemorySelect.onchange = function() {\n    mediator.changed( this )\n}\n\nnumberInput.onchange = function() {\n    mediator.changed( this )\n}\n```\n\n","slug":"JavaScript-Design-Patterns-and-Development-Practice","published":1,"updated":"2017-11-06T16:56:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjazq6gpv0002c6ac5v67sina","content":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"一、this、call-和-apply\"><a href=\"#一、this、call-和-apply\" class=\"headerlink\" title=\"一、this、call 和 apply\"></a>一、this、call 和 apply</h3><h4 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h4><p>除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：</p>\n<ul>\n<li>作为对象的方法调用。</li>\n<li>作为普通函数调用。</li>\n<li>构造器调用。</li>\n<li>Function.prototype.call或Function.prototype.apply调用。</li>\n</ul>\n<a id=\"more\"></a>\n<ol>\n<li>作为对象的方法调用</li>\n</ol>\n<p>当函数作为对象的方法被调用时，this指向该对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">\ta: 1，</div><div class=\"line\">    getA: function() &#123;</div><div class=\"line\">    \talert( this === obj );</div><div class=\"line\">        alert( this.a );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getA();</div><div class=\"line\">// output: true</div><div class=\"line\">// output: 1</div></pre></td></tr></table></figure>\n<ol>\n<li>作为普通函数调用</li>\n</ol>\n<p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;golbalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var getName = function() &#123;</div><div class=\"line\">\treturn this.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var anotherGetName = function() &#123;</div><div class=\"line\">\tconsole.log(getName())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log( getName()) ;</div><div class=\"line\">// output: globalName</div><div class=\"line\"></div><div class=\"line\">anotherGetName();</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;globalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var myObject = &#123;</div><div class=\"line\">\tname: &apos;sven&apos;,</div><div class=\"line\">    getName: function()&#123;</div><div class=\"line\">    \treturn this.name;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getName = myObject.getName;</div><div class=\"line\">cosnole.log( getName() );</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<ol>\n<li>有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            alert( this.id ); // output: div1</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( this.id ); // output: window</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>此时有一种简单的解决方案，可以用一个变量保存div节点的引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            var that = this</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( that.id ); // output: div1</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function func() &#123;</div><div class=\"line\">\t“use strict&quot;</div><div class=\"line\">    alert( this ) // output: undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、闭包和高阶函数\"><a href=\"#二、闭包和高阶函数\" class=\"headerlink\" title=\"二、闭包和高阶函数\"></a>二、闭包和高阶函数</h3><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h3 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h3><p>订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。</p>\n<p>例： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = &#123;</div><div class=\"line\">    // 存放订阅事件的数组队列</div><div class=\"line\">    clientList: [],</div><div class=\"line\">    // 添加订阅事件的方法</div><div class=\"line\">    listen: function( key, fn ) &#123;</div><div class=\"line\">        // key 是订阅事件的代号标志，比如login表示登录订阅事件，</div><div class=\"line\">        // loadFail表示读取失败订阅事件</div><div class=\"line\">        // fn 是要订阅事件触发时执行的函数</div><div class=\"line\">        if (!this.clientList[ key ]) &#123;</div><div class=\"line\">            this.clientList[ key ] = []</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 把订阅消息添加到缓存列表</div><div class=\"line\">        this.clientList[ key ].push( fn );</div><div class=\"line\">    &#125;,</div><div class=\"line\">    trigger: function() &#123;</div><div class=\"line\">        var key = Array.prototype.shift.call( arguments )</div><div class=\"line\">            fns = this.clientList[ key ]</div><div class=\"line\">        </div><div class=\"line\">            if ( !fns || fns.length === 0 ) &#123; // 如果没有绑定对应的消息</div><div class=\"line\">                return false</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            for ( var i = 0, fn; fn = fns[ i++ ];) &#123;</div><div class=\"line\">                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来测试一下上面的代码：<br>首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var installEvent = function( obj ) &#123;</div><div class=\"line\">    for ( var i in event ) &#123;</div><div class=\"line\">        obj[ i ] = event[ i ];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 先给老师添加发布订阅功能</div><div class=\"line\">var teacher = &#123;&#125;</div><div class=\"line\">installEvent( teacher )</div><div class=\"line\"></div><div class=\"line\">// 老师备课时先定义好将要布置的作业</div><div class=\"line\">function doMath() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doMathTest() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math test homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doEnglish() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Englisth homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 在课堂上老师发布作业</div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">    doMath();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">\tdoMathTest()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;English&apos;, function() &#123;</div><div class=\"line\">    do English()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 做作业的时间到了，学生做老师发布的作业</div><div class=\"line\">// 用if来假设条件成立，可以去掉</div><div class=\"line\">if ( new Date().now === 8888 ) &#123;</div><div class=\"line\">\tteacher.trigger( &apos;Math&apos; )</div><div class=\"line\">\tteacher.trigger( &apos;English&apos; )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。</p>\n<p>中介者模式一般有两种实现方式：</p>\n<ul>\n<li>利用发布-订阅模式。</li>\n<li>中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。</li>\n</ul>\n<p>考虑一个现实的一个例子：<br>这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。</p>\n<p>假设有这几种规格的手机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">\t&quot;red&quot;: 3,</div><div class=\"line\">\t&quot;blue: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>粗略地把上面分成以下几种情况：</p>\n<ol>\n<li>选择红色手机，买4个，显示库存不足，购买按钮不可点</li>\n<li>选择蓝色手机，买5个，显示库存充足，购买按钮可点</li>\n<li>不有选择颜色或者数量的时候，购买按钮不可点</li>\n</ol>\n<p>以下进行编码：</p>\n<p>页面HTML代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">选择颜色： </div><div class=\"line\">&lt;select name=&quot;&quot; id=&quot;colorSelect&quot;&gt;</div><div class=\"line\">    &lt;option value=&quot;&quot;&gt;请选择&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;red&quot;&gt;红色&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;blue&quot;&gt;蓝色&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">输入购买数量：</div><div class=\"line\">&lt;input type=&quot;text&quot; id=&quot;numberInput&quot;&gt;</div><div class=\"line\">您选择了颜色：</div><div class=\"line\">&lt;div id=&quot;colorInfo&quot;&gt;&lt;/div&gt;&lt;br/&gt;</div><div class=\"line\">您输入了数量：</div><div class=\"line\">&lt;div id=&quot;nubmerInfo&quot;&gt;&lt;/div&gt;</div><div class=\"line\">您输入了容量：</div><div class=\"line\">&lt;div id=&quot;momeryInfo&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>先定义商品规格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">    &quot;red|32G&quot;: 3,</div><div class=\"line\">    &quot;red|64G&quot;: 0,</div><div class=\"line\">    &quot;blue|32G&quot;: 1,</div><div class=\"line\">    &quot;blue|16G&quot;: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mediator = (function()&#123;</div><div class=\"line\">    var colorSelect = document.getElementById(&apos;colorSelect&apos;)</div><div class=\"line\">    var memorySelect = document.getElementById(&apos;memorySelect&apos;)</div><div class=\"line\">    var numberInput = document.getElementById(&apos;numberInput&apos;)</div><div class=\"line\">    var colorInfo = document.getElementById(&apos;colorInfo&apos;)</div><div class=\"line\">    var memoryInfo = document.getElementById(&apos;memoryInfo&apos;)</div><div class=\"line\">    var numberInfo = document.getElementById(&apos;numberInfo&apos;)</div><div class=\"line\">    var nextBtn = document.getElementById(&apos;nextBtn&apos;)</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">        changed: function(obj)&#123;</div><div class=\"line\">            var color = colorSelect.value,  // 颜色</div><div class=\"line\">                memory = memorySelect.value, // 内存</div><div class=\"line\">                number = numberSelect.value, // 数量</div><div class=\"line\">                stock = goods[ color + &apos;|&apos; + memory ];  // 颜色和内存对应的手机库存数量</div><div class=\"line\">            </div><div class=\"line\">            if ( obj === colorSelect ) &#123;</div><div class=\"line\">                colorInfo.innerHTML = color</div><div class=\"line\">            &#125; else if ( obj === memorySelect ) &#123;</div><div class=\"line\">                memoryInfo.innerHTML = memory</div><div class=\"line\">            &#125; else if ( obj === numberInput ) &#123;</div><div class=\"line\">                numberInfo.innerHTML = number</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择手机颜色&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择内存大小&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( Number.isInteger ( number - 0 ) &amp;&amp; number &gt; 0 ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请输入正确的购买数量&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nextBtn.disabled = false</div><div class=\"line\">            nextBtn.innerHTML = &apos;放入购物车&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">colorSelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">memorySelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">numberInput.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"一、this、call-和-apply\"><a href=\"#一、this、call-和-apply\" class=\"headerlink\" title=\"一、this、call 和 apply\"></a>一、this、call 和 apply</h3><h4 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h4><p>除去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种：</p>\n<ul>\n<li>作为对象的方法调用。</li>\n<li>作为普通函数调用。</li>\n<li>构造器调用。</li>\n<li>Function.prototype.call或Function.prototype.apply调用。</li>\n</ul>","more":"<ol>\n<li>作为对象的方法调用</li>\n</ol>\n<p>当函数作为对象的方法被调用时，this指向该对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">\ta: 1，</div><div class=\"line\">    getA: function() &#123;</div><div class=\"line\">    \talert( this === obj );</div><div class=\"line\">        alert( this.a );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.getA();</div><div class=\"line\">// output: true</div><div class=\"line\">// output: 1</div></pre></td></tr></table></figure>\n<ol>\n<li>作为普通函数调用</li>\n</ol>\n<p>当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，无论它在哪里调用，此时的this总是指向全局对象。在浏览器的JavaScript里，p个全局对象 是window对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;golbalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var getName = function() &#123;</div><div class=\"line\">\treturn this.name;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var anotherGetName = function() &#123;</div><div class=\"line\">\tconsole.log(getName())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console.log( getName()) ;</div><div class=\"line\">// output: globalName</div><div class=\"line\"></div><div class=\"line\">anotherGetName();</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.name = &apos;globalName&apos;;</div><div class=\"line\"></div><div class=\"line\">var myObject = &#123;</div><div class=\"line\">\tname: &apos;sven&apos;,</div><div class=\"line\">    getName: function()&#123;</div><div class=\"line\">    \treturn this.name;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var getName = myObject.getName;</div><div class=\"line\">cosnole.log( getName() );</div><div class=\"line\">// output: globalName</div></pre></td></tr></table></figure>\n<ol>\n<li>有时候我们会遇到一些困扰，比如在div节点的事件函数内部，有一个局部的callback方法，callback被作为普通函数调用时，callback内部的this指向了window,但我们往往是想让它指向该div节点，见如下代码：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            alert( this.id ); // output: div1</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( this.id ); // output: window</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>此时有一种简单的解决方案，可以用一个变量保存div节点的引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</div><div class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;div id=&quot;div1&quot;&gt;I am a div&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;script&gt;</div><div class=\"line\">        window.id = &apos;window&apos;</div><div class=\"line\">        document.getElementById(&apos;div1&apos;).onclick =function() &#123;</div><div class=\"line\">            var that = this</div><div class=\"line\">            var callback =function() &#123;</div><div class=\"line\">                alert( that.id ); // output: div1</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>在ECMAScript5的strict模式下，这种情况下的this已经被规定为不会指向全局对象，而是undefined:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function func() &#123;</div><div class=\"line\">\t“use strict&quot;</div><div class=\"line\">    alert( this ) // output: undefined</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二、闭包和高阶函数\"><a href=\"#二、闭包和高阶函数\" class=\"headerlink\" title=\"二、闭包和高阶函数\"></a>二、闭包和高阶函数</h3><h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><h3 id=\"订阅模式\"><a href=\"#订阅模式\" class=\"headerlink\" title=\"订阅模式\"></a>订阅模式</h3><p>订阅模式的设计主要有两个结构，一个是存放订阅事件的数组，还有添加订阅事件的方法，广播执行订阅事件的方法。</p>\n<p>例： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = &#123;</div><div class=\"line\">    // 存放订阅事件的数组队列</div><div class=\"line\">    clientList: [],</div><div class=\"line\">    // 添加订阅事件的方法</div><div class=\"line\">    listen: function( key, fn ) &#123;</div><div class=\"line\">        // key 是订阅事件的代号标志，比如login表示登录订阅事件，</div><div class=\"line\">        // loadFail表示读取失败订阅事件</div><div class=\"line\">        // fn 是要订阅事件触发时执行的函数</div><div class=\"line\">        if (!this.clientList[ key ]) &#123;</div><div class=\"line\">            this.clientList[ key ] = []</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 把订阅消息添加到缓存列表</div><div class=\"line\">        this.clientList[ key ].push( fn );</div><div class=\"line\">    &#125;,</div><div class=\"line\">    trigger: function() &#123;</div><div class=\"line\">        var key = Array.prototype.shift.call( arguments )</div><div class=\"line\">            fns = this.clientList[ key ]</div><div class=\"line\">        </div><div class=\"line\">            if ( !fns || fns.length === 0 ) &#123; // 如果没有绑定对应的消息</div><div class=\"line\">                return false</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            for ( var i = 0, fn; fn = fns[ i++ ];) &#123;</div><div class=\"line\">                fn.apply( this, arguments )  // arguments 是 trigger 是带上的参数</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来测试一下上面的代码：<br>首先定义一个installEvent函数让我们可以给所有对象都动态添加发布-订阅功能（但是这个并不是必须的，不过一般都会声明一个方便调用）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var installEvent = function( obj ) &#123;</div><div class=\"line\">    for ( var i in event ) &#123;</div><div class=\"line\">        obj[ i ] = event[ i ];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假设一个场景，在课堂上老师个学生布置作业，然后等我学生到做作业的时间的时候，就开始做老师发布的作业。在这里老师是订阅者，学生是发布者。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 先给老师添加发布订阅功能</div><div class=\"line\">var teacher = &#123;&#125;</div><div class=\"line\">installEvent( teacher )</div><div class=\"line\"></div><div class=\"line\">// 老师备课时先定义好将要布置的作业</div><div class=\"line\">function doMath() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doMathTest() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Math test homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doEnglish() &#123;</div><div class=\"line\">\tconsole.log( &apos;do Englisth homework&apos; )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 在课堂上老师发布作业</div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">    doMath();</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;Math&apos;, function() &#123;</div><div class=\"line\">\tdoMathTest()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">teacher.listen( &apos;English&apos;, function() &#123;</div><div class=\"line\">    do English()</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">// 做作业的时间到了，学生做老师发布的作业</div><div class=\"line\">// 用if来假设条件成立，可以去掉</div><div class=\"line\">if ( new Date().now === 8888 ) &#123;</div><div class=\"line\">\tteacher.trigger( &apos;Math&apos; )</div><div class=\"line\">\tteacher.trigger( &apos;English&apos; )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>发布订阅模式还很适合协作开发，比如上面的例子，老师只需要负责这天需要做哪科作业（Math, English)，做哪一题(doMath, doMathTest, doEnglish)。而学生只需要负责到点就去完成作业。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者就是把许多相关联的对象进行解耦。有时候对象与对象之间的操作会互相影响，有些对象要在其他对象改变的时候做出相应的响应，这个时候就要用到中介者模式。</p>\n<p>中介者模式一般有两种实现方式：</p>\n<ul>\n<li>利用发布-订阅模式。</li>\n<li>中介者开放一些接口给其它对象调用，而具体实现的逻辑在中介者中实现，然后中介者把执行后的结果发送给其它对象。</li>\n</ul>\n<p>考虑一个现实的一个例子：<br>这手机购买的过程中，可以选择手机的颜色和数量，同时在页面会有相应手机库存的显示，然后页面底下的购习按钮会根据库存等情况作出不同的展示。</p>\n<p>假设有这几种规格的手机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">\t&quot;red&quot;: 3,</div><div class=\"line\">\t&quot;blue: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>粗略地把上面分成以下几种情况：</p>\n<ol>\n<li>选择红色手机，买4个，显示库存不足，购买按钮不可点</li>\n<li>选择蓝色手机，买5个，显示库存充足，购买按钮可点</li>\n<li>不有选择颜色或者数量的时候，购买按钮不可点</li>\n</ol>\n<p>以下进行编码：</p>\n<p>页面HTML代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">选择颜色： </div><div class=\"line\">&lt;select name=&quot;&quot; id=&quot;colorSelect&quot;&gt;</div><div class=\"line\">    &lt;option value=&quot;&quot;&gt;请选择&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;red&quot;&gt;红色&lt;/option&gt;</div><div class=\"line\">    &lt;option value=&quot;blue&quot;&gt;蓝色&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div><div class=\"line\">输入购买数量：</div><div class=\"line\">&lt;input type=&quot;text&quot; id=&quot;numberInput&quot;&gt;</div><div class=\"line\">您选择了颜色：</div><div class=\"line\">&lt;div id=&quot;colorInfo&quot;&gt;&lt;/div&gt;&lt;br/&gt;</div><div class=\"line\">您输入了数量：</div><div class=\"line\">&lt;div id=&quot;nubmerInfo&quot;&gt;&lt;/div&gt;</div><div class=\"line\">您输入了容量：</div><div class=\"line\">&lt;div id=&quot;momeryInfo&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>先定义商品规格：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var goods = &#123;</div><div class=\"line\">    &quot;red|32G&quot;: 3,</div><div class=\"line\">    &quot;red|64G&quot;: 0,</div><div class=\"line\">    &quot;blue|32G&quot;: 1,</div><div class=\"line\">    &quot;blue|16G&quot;: 6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>定义中介者来作处理其中判断的逻辑，返回一个事件让其它关联对象调用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mediator = (function()&#123;</div><div class=\"line\">    var colorSelect = document.getElementById(&apos;colorSelect&apos;)</div><div class=\"line\">    var memorySelect = document.getElementById(&apos;memorySelect&apos;)</div><div class=\"line\">    var numberInput = document.getElementById(&apos;numberInput&apos;)</div><div class=\"line\">    var colorInfo = document.getElementById(&apos;colorInfo&apos;)</div><div class=\"line\">    var memoryInfo = document.getElementById(&apos;memoryInfo&apos;)</div><div class=\"line\">    var numberInfo = document.getElementById(&apos;numberInfo&apos;)</div><div class=\"line\">    var nextBtn = document.getElementById(&apos;nextBtn&apos;)</div><div class=\"line\"></div><div class=\"line\">    return &#123;</div><div class=\"line\">        changed: function(obj)&#123;</div><div class=\"line\">            var color = colorSelect.value,  // 颜色</div><div class=\"line\">                memory = memorySelect.value, // 内存</div><div class=\"line\">                number = numberSelect.value, // 数量</div><div class=\"line\">                stock = goods[ color + &apos;|&apos; + memory ];  // 颜色和内存对应的手机库存数量</div><div class=\"line\">            </div><div class=\"line\">            if ( obj === colorSelect ) &#123;</div><div class=\"line\">                colorInfo.innerHTML = color</div><div class=\"line\">            &#125; else if ( obj === memorySelect ) &#123;</div><div class=\"line\">                memoryInfo.innerHTML = memory</div><div class=\"line\">            &#125; else if ( obj === numberInput ) &#123;</div><div class=\"line\">                numberInfo.innerHTML = number</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择手机颜色&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( !memory ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请选择内存大小&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            if ( Number.isInteger ( number - 0 ) &amp;&amp; number &gt; 0 ) &#123;</div><div class=\"line\">                nextBtn.disabled = true</div><div class=\"line\">                nextBtn.innerHTML = &apos;请输入正确的购买数量&apos;</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            nextBtn.disabled = false</div><div class=\"line\">            nextBtn.innerHTML = &apos;放入购物车&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure>\n<p>当相对应的对象改变的时候，中介者就能通过响应作出正确的处理，而不用把所有的判断逻辑放在各个事件监听所触发的函数里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">colorSelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">memorySelect.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">numberInput.onchange = function() &#123;</div><div class=\"line\">    mediator.changed( this )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Javascript 数据类型","date":"2017-06-25T04:55:30.000Z","_content":"\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n---\n\n<!-- more -->\n\n##### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n**注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数**\n\n---\n\n##### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n**注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱**\n\n---\n\n##### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n**如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值**\n\n---\n\n##### Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n###### 2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n###### 3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n**注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：**\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n###### 4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n###### 5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同","source":"_posts/Javascript-data-structure.md","raw":"---\ntitle: Javascript 数据类型\ndate: 2017-06-25 12:55:30\ntags: 读书笔记\n---\n\n&emsp;&emsp;*本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!*\n&emsp;&emsp;*微信号: kuntang9080*\n&emsp;&emsp;*邮箱：kuntang@163.com*\n___\n\nECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。\n\n---\n\n<!-- more -->\n\n##### typeof 操作符\n\n对一个值使用typeof操作符可能返回下列某个字符串\n\n| 返回值 | 说明 |\n|--------|--------|\n| undefined |  这个值没有定义    |\n| boolean   |  这个值是布尔值|\n|string|这个值是字符串|\n|number|这个值是数值|\n|object|这个值是对象或者null|\n|function|这个值是函数|\n\n**注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数**\n\n---\n\n##### Undefined类型\n\nUndefined类型只有一个值，即undefined\n\n任何使用var声明但未对其加以初始化的变量都会赋以undefined值。\n\n```Javascript\nvar message = undefined;\nalert(message == undefined);\n// true\n```\n\n对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。\n\n```Javascript\n// 只声明了message，没有声明age\nvar message;\n\nalert(typeof message);\n// undefined\nalert(typeof age);\n// undefined\n```\n\n**注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱**\n\n---\n\n##### Null 类型\n\nNull类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回\"object\"的原因\n\n实际上undefined值是派生自null值的，因此\n\n```Javascript\nalert(null == undefined)\n// true\n```\n\n**如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值**\n\n---\n\n##### Number类型\n\n###### 1. 进制\n\n&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x\n```Javascript\nvar octalNum = 070\n// 八进制的56\nvar hexNum = 0xA\n// 十六进制的10\n```\n\n###### 2. 其它进制转换为十进制\n\n&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。\n\nparseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：\n```Javascript\nvar hexTo = parseInt(\"0xAF\", 16)\n// 175\nvar num1 = parseInt(\"10\", 2)\n// 2\nvar num2 = parseInt(\"10\", 8)\n// 8\nvar num3 = parseInt(\"10\", 16)\n// 16\n```\n\n###### 3. 浮点数值\n\n对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。\n```Javascript\nvar floatNum = 3.125e7\n// 31250000\n```\n\n**注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：**\n```Javascript\nalert(0.1 + 0.2)\n// 0.30000000000000004\nif (a + b == 0.3) {\t// 不要做这样的判断\n\talert(\"you got the 0.3\")\n}\n```\n\n如果要一定要做这样的判断，在此提供了一个解决方法\n```Javascript\nvar temp = (a * 10 + b * 10) / 10 \t//先将浮点数转化为整数作加法，然后再转为浮点数\nif (temp == 0.3) {\n\talert(\"you got the 0.3\")\n}\n```\n\n###### 4. NaN (Not a Number)\n\n- 任何涉及NaN的操作或运算都会返回NaN\n- NaN与任何值都不相等\n\n```Javascript\nalert(NaN / 10)\n// NaN\n\nalert(NaN == NaN)\n// false\n```\n\nisNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。\n```Javascript\nalert(isNaN(NaN))\n// true\nalert(isNaN(10))\n// false\nalert(isNaN(\"10\"))\n// false（转为数字10）\nalert(isNaN(\"blue\"))\n// true（不能转为数值）\nalert(isNaN(true))\n// false(true转为1)\n```\n在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个**返回值**再调用toString()方法，再测试返回值。\n\n###### 5. 数值转换\n\n- Number()函数\n\n- parseInt()函数\n\n&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(\"a123\")返回NaN，第一个字符\"a\"不是数字字符或者负号；parseInt(\"12.3\")返回12，\".\"不是数字字符或者负号。\n\n- parseFloat()函数\n\n&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。\n\n---\n\n##### 6. String类型\n\n数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。\n在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。\n\n```Javascript\nvar num = 10;\nalert(num.toString())\t// 10\nalert(num.toString(2))\t// 1010\nalert(num.toString(8))\t// 12\nalert(num.toString(10))\t// 10\nalert(num.toString(16))\t// a\n```\n\n在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：\n\n- 如果有toString()方法，则调用该方法（没有参数）并返回相应的结果\n\n- 如果是null，则返回\"null\"\n\n- 如果是undefined，则返回\"undefined\"\n\n---\n\n##### 7. Object类型\n\nObject的每个实例都具有下列属性和方法。\n\n- constructor： 保存着用于创建当前对象的函数\n\n- hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(\"name\")）\n\n- isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举\n\n- toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应\n\n- toString()：返回对象的字符串表示\n\n- valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同","slug":"Javascript-data-structure","published":1,"updated":"2017-12-09T19:12:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjazq6gq30005c6acn0ikrion","content":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<hr>\n<a id=\"more\"></a>\n<h5 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h5><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数</strong></p>\n<hr>\n<h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p><strong>注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱</strong></p>\n<hr>\n<h5 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h5><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p><strong>如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值</strong></p>\n<hr>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"2-其它进制转换为十进制\"><a href=\"#2-其它进制转换为十进制\" class=\"headerlink\" title=\"2. 其它进制转换为十进制\"></a>2. 其它进制转换为十进制</h6><p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"3-浮点数值\"><a href=\"#3-浮点数值\" class=\"headerlink\" title=\"3. 浮点数值\"></a>3. 浮点数值</h6><p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"4-NaN-Not-a-Number\"><a href=\"#4-NaN-Not-a-Number\" class=\"headerlink\" title=\"4. NaN (Not a Number)\"></a>4. NaN (Not a Number)</h6><ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<h6 id=\"5-数值转换\"><a href=\"#5-数值转换\" class=\"headerlink\" title=\"5. 数值转换\"></a>5. 数值转换</h6><ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;<em>本文摘录于Javascript高级程序设计（Professional JavaScript for Web Developers）并加上了自己的一些理解，如发现本文有什么错误之处，请麻烦通过以下方式联系我作修正，谢谢!</em><br>&emsp;&emsp;<em>微信号: kuntang9080</em><br>&emsp;&emsp;<em>邮箱：kuntang@163.com</em></p>\n<hr>\n<p>ECMAScript中有5种简单数据类型（也称基本数据类型）：Undefined、Null、Boolean、Number、String。还有一种复杂数据类型：Object。</p>\n<hr>","more":"<h5 id=\"typeof-操作符\"><a href=\"#typeof-操作符\" class=\"headerlink\" title=\"typeof 操作符\"></a>typeof 操作符</h5><p>对一个值使用typeof操作符可能返回下列某个字符串</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>undefined</td>\n<td>这个值没有定义</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>这个值是布尔值</td>\n</tr>\n<tr>\n<td>string</td>\n<td>这个值是字符串</td>\n</tr>\n<tr>\n<td>number</td>\n<td>这个值是数值</td>\n</tr>\n<tr>\n<td>object</td>\n<td>这个值是对象或者null</td>\n</tr>\n<tr>\n<td>function</td>\n<td>这个值是函数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：当typeof返回是object的时候对应着两个值，因此不能用typeof来区分object类型和null类型，此时应该用instanceof()函数</strong></p>\n<hr>\n<h5 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h5><p>Undefined类型只有一个值，即undefined</p>\n<p>任何使用var声明但未对其加以初始化的变量都会赋以undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"literal\">undefined</span>;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p>对未初始化的变量和未声明的变量使用typeof操作符都会返回undefined值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只声明了message，没有声明age</span></div><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> message);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> age);</div><div class=\"line\"><span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p><strong>注意：因此我们应该保持对变量初始化时就赋值的好习惯，这样当我们做类型检测的时候就不会造成不必要的混乱</strong></p>\n<hr>\n<h5 id=\"Null-类型\"><a href=\"#Null-类型\" class=\"headerlink\" title=\"Null 类型\"></a>Null 类型</h5><p>Null类型只有一个值，即null。从逻辑角度上看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null会返回”object”的原因</p>\n<p>实际上undefined值是派生自null值的，因此</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<p><strong>如果一个声明了一个将来才会使用到的变量，那么我们应该显式地将它赋值null而不是其它值</strong></p>\n<hr>\n<h5 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h5><h6 id=\"1-进制\"><a href=\"#1-进制\" class=\"headerlink\" title=\"1. 进制\"></a>1. 进制</h6><p>&emsp;&emsp;八进制字面值第一位必须为0，十六进制前两位必须为0x<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> octalNum = <span class=\"number\">070</span></div><div class=\"line\"><span class=\"comment\">// 八进制的56</span></div><div class=\"line\"><span class=\"keyword\">var</span> hexNum = <span class=\"number\">0xA</span></div><div class=\"line\"><span class=\"comment\">// 十六进制的10</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"2-其它进制转换为十进制\"><a href=\"#2-其它进制转换为十进制\" class=\"headerlink\" title=\"2. 其它进制转换为十进制\"></a>2. 其它进制转换为十进制</h6><p>&emsp;&emsp;其它进制转换为十进制我们可以用Number()或者parseInt()函数。因为Number()函数分的情况比较混乱，所以在很多情况下我们会用parseInt()来做进制转换。</p>\n<p>parseInt()函数提供第二个参数：转换时使用的基数（即多少进制）。例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hexTo = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"0xAF\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 175</span></div><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">8</span>)</div><div class=\"line\"><span class=\"comment\">// 8</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>, <span class=\"number\">16</span>)</div><div class=\"line\"><span class=\"comment\">// 16</span></div></pre></td></tr></table></figure></p>\n<h6 id=\"3-浮点数值\"><a href=\"#3-浮点数值\" class=\"headerlink\" title=\"3. 浮点数值\"></a>3. 浮点数值</h6><p>对于那些极大或者极小的数值，可以用e表示法（科学计数法）来表示。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> floatNum = <span class=\"number\">3.125e7</span></div><div class=\"line\"><span class=\"comment\">// 31250000</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：浮点数值的最高精度是17位小数，但在进行算术时其精度远远不如整数。比如0.1加0.2不等于0.3：</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>)</div><div class=\"line\"><span class=\"comment\">// 0.30000000000000004</span></div><div class=\"line\"><span class=\"keyword\">if</span> (a + b == <span class=\"number\">0.3</span>) &#123;\t<span class=\"comment\">// 不要做这样的判断</span></div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果要一定要做这样的判断，在此提供了一个解决方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = (a * <span class=\"number\">10</span> + b * <span class=\"number\">10</span>) / <span class=\"number\">10</span> \t<span class=\"comment\">//先将浮点数转化为整数作加法，然后再转为浮点数</span></div><div class=\"line\"><span class=\"keyword\">if</span> (temp == <span class=\"number\">0.3</span>) &#123;</div><div class=\"line\">\talert(<span class=\"string\">\"you got the 0.3\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"4-NaN-Not-a-Number\"><a href=\"#4-NaN-Not-a-Number\" class=\"headerlink\" title=\"4. NaN (Not a Number)\"></a>4. NaN (Not a Number)</h6><ul>\n<li>任何涉及NaN的操作或运算都会返回NaN</li>\n<li>NaN与任何值都不相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> / <span class=\"number\">10</span>)</div><div class=\"line\"><span class=\"comment\">// NaN</span></div><div class=\"line\"></div><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>)</div><div class=\"line\"><span class=\"comment\">// false</span></div></pre></td></tr></table></figure>\n<p>isNaN()函数用来判断这个参数是否为NaN，当isNaN()接收到一个参数之后，会尝试将这个值转换为数值，任何不能被转换为数值的值都会导致这个函数返回true。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>))</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"10\"</span>))</div><div class=\"line\"><span class=\"comment\">// false（转为数字10）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"string\">\"blue\"</span>))</div><div class=\"line\"><span class=\"comment\">// true（不能转为数值）</span></div><div class=\"line\">alert(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">true</span>))</div><div class=\"line\"><span class=\"comment\">// false(true转为1)</span></div></pre></td></tr></table></figure></p>\n<p>在基于对象调用isNaN()函数时，会先调用对象的valueOf()方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个<strong>返回值</strong>再调用toString()方法，再测试返回值。</p>\n<h6 id=\"5-数值转换\"><a href=\"#5-数值转换\" class=\"headerlink\" title=\"5. 数值转换\"></a>5. 数值转换</h6><ul>\n<li><p>Number()函数</p>\n</li>\n<li><p>parseInt()函数</p>\n</li>\n</ul>\n<p>&emsp;&emsp;parseInt()函数在转换字符串时，会忽略字符串前面的空格，直至找到第一个非空格的字符。如果第一个字符就不是数字字符或者负号，就直接返回NaN。也就是说parseInt(“a123”)返回NaN，第一个字符”a”不是数字字符或者负号；parseInt(“12.3”)返回12，”.”不是数字字符或者负号。</p>\n<ul>\n<li>parseFloat()函数</li>\n</ul>\n<p>&emsp;&emsp;parseFloat()函数始终都会忽略前导的零。对十六进制格式的字符串始终返回0。</p>\n<hr>\n<h5 id=\"6-String类型\"><a href=\"#6-String类型\" class=\"headerlink\" title=\"6. String类型\"></a>6. String类型</h5><p>数值、布尔值、对象和字符串都有toString()方法，但是null和undefined值没有这个方法。<br>在调用数值的toString()方法时，可以传递一个参数：输出的基数。通过这个基数可以使toString()方法输出以二进制、八进制、十六进制，乃至其他做生意有效进制格式表示的字符串值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">alert(num.toString())\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">2</span>))\t<span class=\"comment\">// 1010</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">8</span>))\t<span class=\"comment\">// 12</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">10</span>))\t<span class=\"comment\">// 10</span></div><div class=\"line\">alert(num.toString(<span class=\"number\">16</span>))\t<span class=\"comment\">// a</span></div></pre></td></tr></table></figure>\n<p>在不知道要转换的值是不是null或undefined的情况下，可以使用转型函数String()，这个函数能够将任何类型的值转换的为字符串。String()函数遵循下列规则：</p>\n<ul>\n<li><p>如果有toString()方法，则调用该方法（没有参数）并返回相应的结果</p>\n</li>\n<li><p>如果是null，则返回”null”</p>\n</li>\n<li><p>如果是undefined，则返回”undefined”</p>\n</li>\n</ul>\n<hr>\n<h5 id=\"7-Object类型\"><a href=\"#7-Object类型\" class=\"headerlink\" title=\"7. Object类型\"></a>7. Object类型</h5><p>Object的每个实例都具有下列属性和方法。</p>\n<ul>\n<li><p>constructor： 保存着用于创建当前对象的函数</p>\n</li>\n<li><p>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定（例：o.hasOwnproperty(“name”)）</p>\n</li>\n<li><p>isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举</p>\n</li>\n<li><p>toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应</p>\n</li>\n<li><p>toString()：返回对象的字符串表示</p>\n</li>\n<li><p>valueOf()：返回对象的字符串、数值或者布尔值表示。通常与toString()方法的返回值相同</p>\n</li>\n</ul>"},{"title":"软件测试","year":2017,"month":4,"day":1,"_content":"### 行业内的主要知识点\n#### 软件危机\n#### 软件测试的分类\n- 按测试阶段划分\n\n软件测试 = 程序 + 文档 + 数据\n程序主流方向 B/S架构和手机app\n\n<!-- more -->\n\n#### 软件项目流程\n- 可行性分析\n- 立项\n- 需求\n- 原型设计\n- 概要设计\n- 详细设计\n- 开发\n- 验收\n- 维护\n#### 接口测试\n- 后台和前台的数据\n- 后台和前台可以交互\n### 文档\n- 需求文档\n- 设计文档\n- 开发文档\n- 测试文档\n- 验收文档\n- 用户文档\n### 软件测试\n- 测试计划\n- 测试用例\n- 测试方案\n- 测试报告\n- 测试方案\n- 测试报告（总结）\n\n### 软件测试就是保证\n### 软件测试的分类\n- 通用软件产品\n- 电信行业\n- 金融证券行业\n- 游戏测试\n- 嵌入式软件测试\n- 电子商务软件测试\n\n### 岗位分类\n- 软件测试工程师\n- 硬件测试工程师\n- 自动化工程师\n- 性能测试工程师\n- 安全测试工程师\n\n### 软件测试人员的职责\n- 了解项目需求内容\n- 编写合理的测试计划\n- \n\n作业：\n1. 你对目前软件测试行业现状怎么看？\n2. 你觉得现在的测试人员能力水平如何？\n3. 你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？\n\n### 软件缺陷管理\n\n#### 软件缺陷的定义\n- IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：\n&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。\n- 因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。\n\n#### 软件缺陷的表现\n- 功能、我没有实现或部分实现。\n- 设计不合理，功能我和明确，逻辑不清楚或存在矛盾。\n- 产品实际结果和所期望的结果不一样。\n- 没有达到需求规格说明书所规定的性能指标等。\n- 运行出错，包括运行中断、系统崩溃、界面混乱等。\n- 数据不正确、精度不够、不完整或格式不统一。\n- 用户不能接受的其他问题，如存取时间过长、界面不美观。\n- 硬件或系统软件上存在的其他问题。\n\n#### 软件缺陷示例\n- 计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。\n&emsp;&emsp;软件未达到软件需求规格说明书表明的功能\n- 若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。\n&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围\n- 若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。\n&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标\n- 假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。\n&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误\n- 测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。\n&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好\n\n#### 软件缺陷产生的原因\n&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：\n- 需求解释或者记录错误\n- 用户需求定义错误 \n- 设计说明存在错误 \n- 编码说明、程序代码有误\n- 硬件或者软件系统上存在错误\n- 其他，如文档错误、内容不正确\n\n#### 软件缺陷的根源\n- 交流不充分\n&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等\n- 软件的复杂性\n&emsp;&emsp;功能复杂、开发复杂、测试复杂\n- 开发人员的错误\n&emsp;&emsp;对需求的理解、开发压力、功能与经验\n- 需求的变化\n&emsp;&emsp;需求说明书、设计文档、程序的变更\n- 进度压力\n&emsp;&emsp;项目周期比较紧\n\n#### 缺陷发现的手段\n&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：\n- 评审\n- QA\n- 客户\n\n#### 软件缺陷修的费用\n\n需求规格说明书、设计、编码、测试、发布，费用越来越高\n\n#### 软件缺陷的信息\n\n- 缺陷ID\n- 缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况\n- 缺陷标题*\n- 缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低\n- 缺陷的优先级*\n- 缺陷所属模块*\n- 缺陷记录者\n- 缺陷提交时间\n- 缺陷处理人\n- 处理结果描述\n- 缺陷处理时间\n- 缺陷验证人\n- 缺陷结果描述\n- 缺陷详细描述*\n- 缺陷环境说明\n- 必要的附件\n\n作业：\n1。 \nBUG标题： 一句话描述BUG\nBUG的等级： 致命错误、严重错误、一般、较小、\n测试建议\n提交时间\n软件版本\n软件环境：win7/Android7\n产生概率： 100%\n产生模块\n处理人\n产生步骤： 1。。。2。。。3。。。\n期待结果\n\n#### 软件缺陷分类————BUG类型\n\n- 系统缺陷\n1.由于程序所引起的死机，异常退出\n2.程序死循环\n3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足\n- 数据缺陷\n1.数据计算错误\n2.数据约束错误\n3.数据输入、输出错误\n- 数据库缺陷\n1. 数据库发生死锁\n2. 数据库的表、缺省值未加约束条件\n3. 数据库连接错误\n4. 数据库中的表有过多的空字段\n- 接口缺陷\n1.数据通信错误\n2.程序接口错误\n- 功能缺陷\n1.功能无法实现\n2.功能实现错误\n- 安全性缺陷\n1.用户权限无法实现\n2.超时限制错误\n3.访问控制错误\n4.加密错误\n- 兼容性缺陷\n1.与需求文档配置兼容性不符合\n- 性能缺陷\n1.未达到预期的性能目标\n2.性能测试中出错，导致无法继续进行测试\n- 界面缺陷\n1.操作界面错误\n2.打印内容、格式错误\n3.删除操作未给出提示\n4.长时间操作未给出提示\n5.界面不规范\n- 建议\n1.功能建议\n2.操作建议","source":"_posts/SoftwareTesting.md","raw":"---\ntitle: 软件测试\nyear: 2017\nmonth: 4\nday: 1\ntags: 课本摘抄\n---\n### 行业内的主要知识点\n#### 软件危机\n#### 软件测试的分类\n- 按测试阶段划分\n\n软件测试 = 程序 + 文档 + 数据\n程序主流方向 B/S架构和手机app\n\n<!-- more -->\n\n#### 软件项目流程\n- 可行性分析\n- 立项\n- 需求\n- 原型设计\n- 概要设计\n- 详细设计\n- 开发\n- 验收\n- 维护\n#### 接口测试\n- 后台和前台的数据\n- 后台和前台可以交互\n### 文档\n- 需求文档\n- 设计文档\n- 开发文档\n- 测试文档\n- 验收文档\n- 用户文档\n### 软件测试\n- 测试计划\n- 测试用例\n- 测试方案\n- 测试报告\n- 测试方案\n- 测试报告（总结）\n\n### 软件测试就是保证\n### 软件测试的分类\n- 通用软件产品\n- 电信行业\n- 金融证券行业\n- 游戏测试\n- 嵌入式软件测试\n- 电子商务软件测试\n\n### 岗位分类\n- 软件测试工程师\n- 硬件测试工程师\n- 自动化工程师\n- 性能测试工程师\n- 安全测试工程师\n\n### 软件测试人员的职责\n- 了解项目需求内容\n- 编写合理的测试计划\n- \n\n作业：\n1. 你对目前软件测试行业现状怎么看？\n2. 你觉得现在的测试人员能力水平如何？\n3. 你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？\n\n### 软件缺陷管理\n\n#### 软件缺陷的定义\n- IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：\n&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。\n- 因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。\n\n#### 软件缺陷的表现\n- 功能、我没有实现或部分实现。\n- 设计不合理，功能我和明确，逻辑不清楚或存在矛盾。\n- 产品实际结果和所期望的结果不一样。\n- 没有达到需求规格说明书所规定的性能指标等。\n- 运行出错，包括运行中断、系统崩溃、界面混乱等。\n- 数据不正确、精度不够、不完整或格式不统一。\n- 用户不能接受的其他问题，如存取时间过长、界面不美观。\n- 硬件或系统软件上存在的其他问题。\n\n#### 软件缺陷示例\n- 计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。\n&emsp;&emsp;软件未达到软件需求规格说明书表明的功能\n- 若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。\n&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围\n- 若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。\n&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标\n- 假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。\n&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误\n- 测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。\n&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好\n\n#### 软件缺陷产生的原因\n&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：\n- 需求解释或者记录错误\n- 用户需求定义错误 \n- 设计说明存在错误 \n- 编码说明、程序代码有误\n- 硬件或者软件系统上存在错误\n- 其他，如文档错误、内容不正确\n\n#### 软件缺陷的根源\n- 交流不充分\n&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等\n- 软件的复杂性\n&emsp;&emsp;功能复杂、开发复杂、测试复杂\n- 开发人员的错误\n&emsp;&emsp;对需求的理解、开发压力、功能与经验\n- 需求的变化\n&emsp;&emsp;需求说明书、设计文档、程序的变更\n- 进度压力\n&emsp;&emsp;项目周期比较紧\n\n#### 缺陷发现的手段\n&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：\n- 评审\n- QA\n- 客户\n\n#### 软件缺陷修的费用\n\n需求规格说明书、设计、编码、测试、发布，费用越来越高\n\n#### 软件缺陷的信息\n\n- 缺陷ID\n- 缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况\n- 缺陷标题*\n- 缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低\n- 缺陷的优先级*\n- 缺陷所属模块*\n- 缺陷记录者\n- 缺陷提交时间\n- 缺陷处理人\n- 处理结果描述\n- 缺陷处理时间\n- 缺陷验证人\n- 缺陷结果描述\n- 缺陷详细描述*\n- 缺陷环境说明\n- 必要的附件\n\n作业：\n1。 \nBUG标题： 一句话描述BUG\nBUG的等级： 致命错误、严重错误、一般、较小、\n测试建议\n提交时间\n软件版本\n软件环境：win7/Android7\n产生概率： 100%\n产生模块\n处理人\n产生步骤： 1。。。2。。。3。。。\n期待结果\n\n#### 软件缺陷分类————BUG类型\n\n- 系统缺陷\n1.由于程序所引起的死机，异常退出\n2.程序死循环\n3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足\n- 数据缺陷\n1.数据计算错误\n2.数据约束错误\n3.数据输入、输出错误\n- 数据库缺陷\n1. 数据库发生死锁\n2. 数据库的表、缺省值未加约束条件\n3. 数据库连接错误\n4. 数据库中的表有过多的空字段\n- 接口缺陷\n1.数据通信错误\n2.程序接口错误\n- 功能缺陷\n1.功能无法实现\n2.功能实现错误\n- 安全性缺陷\n1.用户权限无法实现\n2.超时限制错误\n3.访问控制错误\n4.加密错误\n- 兼容性缺陷\n1.与需求文档配置兼容性不符合\n- 性能缺陷\n1.未达到预期的性能目标\n2.性能测试中出错，导致无法继续进行测试\n- 界面缺陷\n1.操作界面错误\n2.打印内容、格式错误\n3.删除操作未给出提示\n4.长时间操作未给出提示\n5.界面不规范\n- 建议\n1.功能建议\n2.操作建议","slug":"SoftwareTesting","published":1,"date":"2017-08-06T15:10:10.000Z","updated":"2017-12-09T19:13:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjazq6gqa0007c6acbopnvppj","content":"<h3 id=\"行业内的主要知识点\"><a href=\"#行业内的主要知识点\" class=\"headerlink\" title=\"行业内的主要知识点\"></a>行业内的主要知识点</h3><h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h4 id=\"软件测试的分类\"><a href=\"#软件测试的分类\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h4><ul>\n<li>按测试阶段划分</li>\n</ul>\n<p>软件测试 = 程序 + 文档 + 数据<br>程序主流方向 B/S架构和手机app</p>\n<a id=\"more\"></a>\n<h4 id=\"软件项目流程\"><a href=\"#软件项目流程\" class=\"headerlink\" title=\"软件项目流程\"></a>软件项目流程</h4><ul>\n<li>可行性分析</li>\n<li>立项</li>\n<li>需求</li>\n<li>原型设计</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>开发</li>\n<li>验收</li>\n<li>维护<h4 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h4></li>\n<li>后台和前台的数据</li>\n<li>后台和前台可以交互<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3></li>\n<li>需求文档</li>\n<li>设计文档</li>\n<li>开发文档</li>\n<li>测试文档</li>\n<li>验收文档</li>\n<li>用户文档<h3 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h3></li>\n<li>测试计划</li>\n<li>测试用例</li>\n<li>测试方案</li>\n<li>测试报告</li>\n<li>测试方案</li>\n<li>测试报告（总结）</li>\n</ul>\n<h3 id=\"软件测试就是保证\"><a href=\"#软件测试就是保证\" class=\"headerlink\" title=\"软件测试就是保证\"></a>软件测试就是保证</h3><h3 id=\"软件测试的分类-1\"><a href=\"#软件测试的分类-1\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h3><ul>\n<li>通用软件产品</li>\n<li>电信行业</li>\n<li>金融证券行业</li>\n<li>游戏测试</li>\n<li>嵌入式软件测试</li>\n<li>电子商务软件测试</li>\n</ul>\n<h3 id=\"岗位分类\"><a href=\"#岗位分类\" class=\"headerlink\" title=\"岗位分类\"></a>岗位分类</h3><ul>\n<li>软件测试工程师</li>\n<li>硬件测试工程师</li>\n<li>自动化工程师</li>\n<li>性能测试工程师</li>\n<li>安全测试工程师</li>\n</ul>\n<h3 id=\"软件测试人员的职责\"><a href=\"#软件测试人员的职责\" class=\"headerlink\" title=\"软件测试人员的职责\"></a>软件测试人员的职责</h3><ul>\n<li>了解项目需求内容</li>\n<li>编写合理的测试计划</li>\n<li></li>\n</ul>\n<p>作业：</p>\n<ol>\n<li>你对目前软件测试行业现状怎么看？</li>\n<li>你觉得现在的测试人员能力水平如何？</li>\n<li>你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？</li>\n</ol>\n<h3 id=\"软件缺陷管理\"><a href=\"#软件缺陷管理\" class=\"headerlink\" title=\"软件缺陷管理\"></a>软件缺陷管理</h3><h4 id=\"软件缺陷的定义\"><a href=\"#软件缺陷的定义\" class=\"headerlink\" title=\"软件缺陷的定义\"></a>软件缺陷的定义</h4><ul>\n<li>IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：<br>&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。</li>\n<li>因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。</li>\n</ul>\n<h4 id=\"软件缺陷的表现\"><a href=\"#软件缺陷的表现\" class=\"headerlink\" title=\"软件缺陷的表现\"></a>软件缺陷的表现</h4><ul>\n<li>功能、我没有实现或部分实现。</li>\n<li>设计不合理，功能我和明确，逻辑不清楚或存在矛盾。</li>\n<li>产品实际结果和所期望的结果不一样。</li>\n<li>没有达到需求规格说明书所规定的性能指标等。</li>\n<li>运行出错，包括运行中断、系统崩溃、界面混乱等。</li>\n<li>数据不正确、精度不够、不完整或格式不统一。</li>\n<li>用户不能接受的其他问题，如存取时间过长、界面不美观。</li>\n<li>硬件或系统软件上存在的其他问题。</li>\n</ul>\n<h4 id=\"软件缺陷示例\"><a href=\"#软件缺陷示例\" class=\"headerlink\" title=\"软件缺陷示例\"></a>软件缺陷示例</h4><ul>\n<li>计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。<br>&emsp;&emsp;软件未达到软件需求规格说明书表明的功能</li>\n<li>若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。<br>&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围</li>\n<li>若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。<br>&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标</li>\n<li>假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。<br>&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误</li>\n<li>测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。<br>&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好</li>\n</ul>\n<h4 id=\"软件缺陷产生的原因\"><a href=\"#软件缺陷产生的原因\" class=\"headerlink\" title=\"软件缺陷产生的原因\"></a>软件缺陷产生的原因</h4><p>&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：</p>\n<ul>\n<li>需求解释或者记录错误</li>\n<li>用户需求定义错误 </li>\n<li>设计说明存在错误 </li>\n<li>编码说明、程序代码有误</li>\n<li>硬件或者软件系统上存在错误</li>\n<li>其他，如文档错误、内容不正确</li>\n</ul>\n<h4 id=\"软件缺陷的根源\"><a href=\"#软件缺陷的根源\" class=\"headerlink\" title=\"软件缺陷的根源\"></a>软件缺陷的根源</h4><ul>\n<li>交流不充分<br>&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等</li>\n<li>软件的复杂性<br>&emsp;&emsp;功能复杂、开发复杂、测试复杂</li>\n<li>开发人员的错误<br>&emsp;&emsp;对需求的理解、开发压力、功能与经验</li>\n<li>需求的变化<br>&emsp;&emsp;需求说明书、设计文档、程序的变更</li>\n<li>进度压力<br>&emsp;&emsp;项目周期比较紧</li>\n</ul>\n<h4 id=\"缺陷发现的手段\"><a href=\"#缺陷发现的手段\" class=\"headerlink\" title=\"缺陷发现的手段\"></a>缺陷发现的手段</h4><p>&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：</p>\n<ul>\n<li>评审</li>\n<li>QA</li>\n<li>客户</li>\n</ul>\n<h4 id=\"软件缺陷修的费用\"><a href=\"#软件缺陷修的费用\" class=\"headerlink\" title=\"软件缺陷修的费用\"></a>软件缺陷修的费用</h4><p>需求规格说明书、设计、编码、测试、发布，费用越来越高</p>\n<h4 id=\"软件缺陷的信息\"><a href=\"#软件缺陷的信息\" class=\"headerlink\" title=\"软件缺陷的信息\"></a>软件缺陷的信息</h4><ul>\n<li>缺陷ID</li>\n<li>缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况</li>\n<li>缺陷标题*</li>\n<li>缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低</li>\n<li>缺陷的优先级*</li>\n<li>缺陷所属模块*</li>\n<li>缺陷记录者</li>\n<li>缺陷提交时间</li>\n<li>缺陷处理人</li>\n<li>处理结果描述</li>\n<li>缺陷处理时间</li>\n<li>缺陷验证人</li>\n<li>缺陷结果描述</li>\n<li>缺陷详细描述*</li>\n<li>缺陷环境说明</li>\n<li>必要的附件</li>\n</ul>\n<p>作业：<br>1。<br>BUG标题： 一句话描述BUG<br>BUG的等级： 致命错误、严重错误、一般、较小、<br>测试建议<br>提交时间<br>软件版本<br>软件环境：win7/Android7<br>产生概率： 100%<br>产生模块<br>处理人<br>产生步骤： 1。。。2。。。3。。。<br>期待结果</p>\n<h4 id=\"软件缺陷分类————BUG类型\"><a href=\"#软件缺陷分类————BUG类型\" class=\"headerlink\" title=\"软件缺陷分类————BUG类型\"></a>软件缺陷分类————BUG类型</h4><ul>\n<li>系统缺陷<br>1.由于程序所引起的死机，异常退出<br>2.程序死循环<br>3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足</li>\n<li>数据缺陷<br>1.数据计算错误<br>2.数据约束错误<br>3.数据输入、输出错误</li>\n<li>数据库缺陷</li>\n</ul>\n<ol>\n<li>数据库发生死锁</li>\n<li>数据库的表、缺省值未加约束条件</li>\n<li>数据库连接错误</li>\n<li>数据库中的表有过多的空字段</li>\n</ol>\n<ul>\n<li>接口缺陷<br>1.数据通信错误<br>2.程序接口错误</li>\n<li>功能缺陷<br>1.功能无法实现<br>2.功能实现错误</li>\n<li>安全性缺陷<br>1.用户权限无法实现<br>2.超时限制错误<br>3.访问控制错误<br>4.加密错误</li>\n<li>兼容性缺陷<br>1.与需求文档配置兼容性不符合</li>\n<li>性能缺陷<br>1.未达到预期的性能目标<br>2.性能测试中出错，导致无法继续进行测试</li>\n<li>界面缺陷<br>1.操作界面错误<br>2.打印内容、格式错误<br>3.删除操作未给出提示<br>4.长时间操作未给出提示<br>5.界面不规范</li>\n<li>建议<br>1.功能建议<br>2.操作建议</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"行业内的主要知识点\"><a href=\"#行业内的主要知识点\" class=\"headerlink\" title=\"行业内的主要知识点\"></a>行业内的主要知识点</h3><h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><h4 id=\"软件测试的分类\"><a href=\"#软件测试的分类\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h4><ul>\n<li>按测试阶段划分</li>\n</ul>\n<p>软件测试 = 程序 + 文档 + 数据<br>程序主流方向 B/S架构和手机app</p>","more":"<h4 id=\"软件项目流程\"><a href=\"#软件项目流程\" class=\"headerlink\" title=\"软件项目流程\"></a>软件项目流程</h4><ul>\n<li>可行性分析</li>\n<li>立项</li>\n<li>需求</li>\n<li>原型设计</li>\n<li>概要设计</li>\n<li>详细设计</li>\n<li>开发</li>\n<li>验收</li>\n<li>维护<h4 id=\"接口测试\"><a href=\"#接口测试\" class=\"headerlink\" title=\"接口测试\"></a>接口测试</h4></li>\n<li>后台和前台的数据</li>\n<li>后台和前台可以交互<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3></li>\n<li>需求文档</li>\n<li>设计文档</li>\n<li>开发文档</li>\n<li>测试文档</li>\n<li>验收文档</li>\n<li>用户文档<h3 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h3></li>\n<li>测试计划</li>\n<li>测试用例</li>\n<li>测试方案</li>\n<li>测试报告</li>\n<li>测试方案</li>\n<li>测试报告（总结）</li>\n</ul>\n<h3 id=\"软件测试就是保证\"><a href=\"#软件测试就是保证\" class=\"headerlink\" title=\"软件测试就是保证\"></a>软件测试就是保证</h3><h3 id=\"软件测试的分类-1\"><a href=\"#软件测试的分类-1\" class=\"headerlink\" title=\"软件测试的分类\"></a>软件测试的分类</h3><ul>\n<li>通用软件产品</li>\n<li>电信行业</li>\n<li>金融证券行业</li>\n<li>游戏测试</li>\n<li>嵌入式软件测试</li>\n<li>电子商务软件测试</li>\n</ul>\n<h3 id=\"岗位分类\"><a href=\"#岗位分类\" class=\"headerlink\" title=\"岗位分类\"></a>岗位分类</h3><ul>\n<li>软件测试工程师</li>\n<li>硬件测试工程师</li>\n<li>自动化工程师</li>\n<li>性能测试工程师</li>\n<li>安全测试工程师</li>\n</ul>\n<h3 id=\"软件测试人员的职责\"><a href=\"#软件测试人员的职责\" class=\"headerlink\" title=\"软件测试人员的职责\"></a>软件测试人员的职责</h3><ul>\n<li>了解项目需求内容</li>\n<li>编写合理的测试计划</li>\n<li></li>\n</ul>\n<p>作业：</p>\n<ol>\n<li>你对目前软件测试行业现状怎么看？</li>\n<li>你觉得现在的测试人员能力水平如何？</li>\n<li>你觉得作为测试人员有哪些素质和能力要求，你为什么会选择这个行业？</li>\n</ol>\n<h3 id=\"软件缺陷管理\"><a href=\"#软件缺陷管理\" class=\"headerlink\" title=\"软件缺陷管理\"></a>软件缺陷管理</h3><h4 id=\"软件缺陷的定义\"><a href=\"#软件缺陷的定义\" class=\"headerlink\" title=\"软件缺陷的定义\"></a>软件缺陷的定义</h4><ul>\n<li>IEEE 1983 of IEEE Standard 729中对软件缺陷作了一个标准的定义：<br>&emsp;&emsp; 从产品内部看，软件缺陷软件产品开发或维护过程中所存在的错误、毛病等各种总是从外部看，软件缺陷是系统所需要实现的某种功能的失效或违背。</li>\n<li>因此软件缺陷就是软件产品中所存在的问题，最终表现为用户需要的功能没有完全实现，没有满足用户的需求。</li>\n</ul>\n<h4 id=\"软件缺陷的表现\"><a href=\"#软件缺陷的表现\" class=\"headerlink\" title=\"软件缺陷的表现\"></a>软件缺陷的表现</h4><ul>\n<li>功能、我没有实现或部分实现。</li>\n<li>设计不合理，功能我和明确，逻辑不清楚或存在矛盾。</li>\n<li>产品实际结果和所期望的结果不一样。</li>\n<li>没有达到需求规格说明书所规定的性能指标等。</li>\n<li>运行出错，包括运行中断、系统崩溃、界面混乱等。</li>\n<li>数据不正确、精度不够、不完整或格式不统一。</li>\n<li>用户不能接受的其他问题，如存取时间过长、界面不美观。</li>\n<li>硬件或系统软件上存在的其他问题。</li>\n</ul>\n<h4 id=\"软件缺陷示例\"><a href=\"#软件缺陷示例\" class=\"headerlink\" title=\"软件缺陷示例\"></a>软件缺陷示例</h4><ul>\n<li>计算器说明书一般声称该计算器将准确无误地进行加、减、乘、除运算。如果测试人员或用户选定了两个数值后，随意按下了“+”号键，结果没有任何反应。<br>&emsp;&emsp;软件未达到软件需求规格说明书表明的功能</li>\n<li>若在进行测试时，发现除了规定的加、减、乘、除功能之外，还能够进行求平方根的埃，而这一功能并没有在说明书的功能中规定。<br>&emsp;&emsp;软件的功能超出了软件需求规格说明书指明的范围</li>\n<li>若在测试过程中发现，因为电池没电而导致了计算不正确，但软件需求规格说明书未能指出在此情况下应如何进行处理。<br>&emsp;&emsp;软件未达到软件需求规格说明书未指明而应达到的目标</li>\n<li>假如计算器说明书指明计算kkdi付出现崩溃、死锁或者停止反应，而在用户随意按、敲击键盘后，计算器停止接受输入或没有反应。<br>&emsp;&emsp;软件出现了软件需求规格说明书指明不会出现的错误</li>\n<li>测试人员或最终用户发现计算器某些地方不好用，比如，按键太小、显示屏在亮光下无法看清等。<br>&emsp;&emsp;软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好</li>\n</ul>\n<h4 id=\"软件缺陷产生的原因\"><a href=\"#软件缺陷产生的原因\" class=\"headerlink\" title=\"软件缺陷产生的原因\"></a>软件缺陷产生的原因</h4><p>&emsp;软件缺陷产生是不可避免的，造成软件缺陷产生的原因主要归纳如下：</p>\n<ul>\n<li>需求解释或者记录错误</li>\n<li>用户需求定义错误 </li>\n<li>设计说明存在错误 </li>\n<li>编码说明、程序代码有误</li>\n<li>硬件或者软件系统上存在错误</li>\n<li>其他，如文档错误、内容不正确</li>\n</ul>\n<h4 id=\"软件缺陷的根源\"><a href=\"#软件缺陷的根源\" class=\"headerlink\" title=\"软件缺陷的根源\"></a>软件缺陷的根源</h4><ul>\n<li>交流不充分<br>&emsp;&emsp;客户与开发人员、开发人员与测试人员等 等</li>\n<li>软件的复杂性<br>&emsp;&emsp;功能复杂、开发复杂、测试复杂</li>\n<li>开发人员的错误<br>&emsp;&emsp;对需求的理解、开发压力、功能与经验</li>\n<li>需求的变化<br>&emsp;&emsp;需求说明书、设计文档、程序的变更</li>\n<li>进度压力<br>&emsp;&emsp;项目周期比较紧</li>\n</ul>\n<h4 id=\"缺陷发现的手段\"><a href=\"#缺陷发现的手段\" class=\"headerlink\" title=\"缺陷发现的手段\"></a>缺陷发现的手段</h4><p>&emsp;一提到缺陷发现的手段，大家首先且基本能想到的就是测试。测试是一项重要的缺陷发现手段，但不是唯一的缺陷发现手段。缺陷发现的手段有如下：</p>\n<ul>\n<li>评审</li>\n<li>QA</li>\n<li>客户</li>\n</ul>\n<h4 id=\"软件缺陷修的费用\"><a href=\"#软件缺陷修的费用\" class=\"headerlink\" title=\"软件缺陷修的费用\"></a>软件缺陷修的费用</h4><p>需求规格说明书、设计、编码、测试、发布，费用越来越高</p>\n<h4 id=\"软件缺陷的信息\"><a href=\"#软件缺陷的信息\" class=\"headerlink\" title=\"软件缺陷的信息\"></a>软件缺陷的信息</h4><ul>\n<li>缺陷ID</li>\n<li>缺陷状态* ———— 缺陷状态指缺陷通过一个跟踪修复过程的进展情况</li>\n<li>缺陷标题*</li>\n<li>缺陷的严重程度* ———— 程度分为致命、较严重、严重、一般、低</li>\n<li>缺陷的优先级*</li>\n<li>缺陷所属模块*</li>\n<li>缺陷记录者</li>\n<li>缺陷提交时间</li>\n<li>缺陷处理人</li>\n<li>处理结果描述</li>\n<li>缺陷处理时间</li>\n<li>缺陷验证人</li>\n<li>缺陷结果描述</li>\n<li>缺陷详细描述*</li>\n<li>缺陷环境说明</li>\n<li>必要的附件</li>\n</ul>\n<p>作业：<br>1。<br>BUG标题： 一句话描述BUG<br>BUG的等级： 致命错误、严重错误、一般、较小、<br>测试建议<br>提交时间<br>软件版本<br>软件环境：win7/Android7<br>产生概率： 100%<br>产生模块<br>处理人<br>产生步骤： 1。。。2。。。3。。。<br>期待结果</p>\n<h4 id=\"软件缺陷分类————BUG类型\"><a href=\"#软件缺陷分类————BUG类型\" class=\"headerlink\" title=\"软件缺陷分类————BUG类型\"></a>软件缺陷分类————BUG类型</h4><ul>\n<li>系统缺陷<br>1.由于程序所引起的死机，异常退出<br>2.程序死循环<br>3.程序错误，不能执行正常工作或重要功能，使系统崩溃或资源不足</li>\n<li>数据缺陷<br>1.数据计算错误<br>2.数据约束错误<br>3.数据输入、输出错误</li>\n<li>数据库缺陷</li>\n</ul>\n<ol>\n<li>数据库发生死锁</li>\n<li>数据库的表、缺省值未加约束条件</li>\n<li>数据库连接错误</li>\n<li>数据库中的表有过多的空字段</li>\n</ol>\n<ul>\n<li>接口缺陷<br>1.数据通信错误<br>2.程序接口错误</li>\n<li>功能缺陷<br>1.功能无法实现<br>2.功能实现错误</li>\n<li>安全性缺陷<br>1.用户权限无法实现<br>2.超时限制错误<br>3.访问控制错误<br>4.加密错误</li>\n<li>兼容性缺陷<br>1.与需求文档配置兼容性不符合</li>\n<li>性能缺陷<br>1.未达到预期的性能目标<br>2.性能测试中出错，导致无法继续进行测试</li>\n<li>界面缺陷<br>1.操作界面错误<br>2.打印内容、格式错误<br>3.删除操作未给出提示<br>4.长时间操作未给出提示<br>5.界面不规范</li>\n<li>建议<br>1.功能建议<br>2.操作建议</li>\n</ul>"},{"title":"关于移动端像素的显示问题","date":"2017-12-09T15:01:33.000Z","_content":"\n在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。\n\n### 像素密度（PPI）\n\n**PPI(Pixel Per Inch)，即表示每英寸有多少像素**，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。\n\n![几种PPI表示](pic1.png)\n\n以iphone6为例，一般像素密度的计算公式为： \n`Math.sqrt(1366*1366 + 640*640)`\n\n但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。\n\n### 设备像素（DP）&& 设备像素比（DPR）\n\n**设备像素（Device pixel），也称物理像素（Physical pixel）**，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。\n\n由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：\n\n![一个像素在不同PPI屏幕上的显示](pic2.png)\n\n越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。\n\n反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。\n\n因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。**这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)**，一般DPR对应着下面这个表：\n\n    | ldpi | mdpi | hdpi | xhdpi\n----|------|------|------|------\nppi | 120  | 160  | 240  | 320\ndpr | 0.75 | 1.0  | 1.5  | 2.0\n\n因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。\n\n### CSS像素\n\n讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。\n\n我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，**CSS中所指的像素px我们一般称为CSS像素**。也就是说CSS像素是一个虚拟的、相对的单位。\n\n![不改变CSS使得元素在屏幕上更大地显示](pic4.png)\n![不改变CSS使得元素在屏幕上更大地显示](pic5.png)\n\n例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与*系统分辨率*下的像素大小相等，**即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。**\n\n![一个CSS像素在不同PPI屏幕上的显示](pic3.png)\n\n举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的*系统分辨率*都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与**系统分辨率与设备像素的比值（即DPR）**进行换算，最终计算出显示在屏幕上的实际设备像素。\n\n上面所指出的dp这种抽象单位称为**设备无关像素（device independent pixel）**。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。\n\n### 视口（Viewport）\n\n正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，**然后再自动地设置一个比例来缩放页面**，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。\n\n![viewport缩放](pic6.jpg)\n\n我们可以通过在`content`中添加`inital-scale`属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。\n\n`<meta name=\"viewport\" content=\"initial-scale=1\">`\n\n我们也可以定义`device-width`属性来控制`viewport`的宽度\n\n`<meta name=\"viewport\" content=\"width=device-width\">`\n\n一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1\n\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no\">`\n\n### 总结（Summary）\n\n通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把`meta`里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。\n\n> 参与资料：\n> \n> [1.深入了解viewport和px](http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml)\n> \n> [2.高性能响应式Web开发实战](https://item.jd.com/11933227.html)","source":"_posts/The-problem-of-mobile-web-developing.md","raw":"---\ntitle: 关于移动端像素的显示问题\ndate: 2017-12-09 23:01:33\ntags: 个人总结\n---\n\n在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。\n\n### 像素密度（PPI）\n\n**PPI(Pixel Per Inch)，即表示每英寸有多少像素**，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。\n\n![几种PPI表示](pic1.png)\n\n以iphone6为例，一般像素密度的计算公式为： \n`Math.sqrt(1366*1366 + 640*640)`\n\n但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。\n\n### 设备像素（DP）&& 设备像素比（DPR）\n\n**设备像素（Device pixel），也称物理像素（Physical pixel）**，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。\n\n由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：\n\n![一个像素在不同PPI屏幕上的显示](pic2.png)\n\n越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。\n\n反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。\n\n因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。**这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)**，一般DPR对应着下面这个表：\n\n    | ldpi | mdpi | hdpi | xhdpi\n----|------|------|------|------\nppi | 120  | 160  | 240  | 320\ndpr | 0.75 | 1.0  | 1.5  | 2.0\n\n因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。\n\n### CSS像素\n\n讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。\n\n我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，**CSS中所指的像素px我们一般称为CSS像素**。也就是说CSS像素是一个虚拟的、相对的单位。\n\n![不改变CSS使得元素在屏幕上更大地显示](pic4.png)\n![不改变CSS使得元素在屏幕上更大地显示](pic5.png)\n\n例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与*系统分辨率*下的像素大小相等，**即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。**\n\n![一个CSS像素在不同PPI屏幕上的显示](pic3.png)\n\n举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的*系统分辨率*都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与**系统分辨率与设备像素的比值（即DPR）**进行换算，最终计算出显示在屏幕上的实际设备像素。\n\n上面所指出的dp这种抽象单位称为**设备无关像素（device independent pixel）**。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。\n\n### 视口（Viewport）\n\n正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，**然后再自动地设置一个比例来缩放页面**，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。\n\n![viewport缩放](pic6.jpg)\n\n我们可以通过在`content`中添加`inital-scale`属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。\n\n`<meta name=\"viewport\" content=\"initial-scale=1\">`\n\n我们也可以定义`device-width`属性来控制`viewport`的宽度\n\n`<meta name=\"viewport\" content=\"width=device-width\">`\n\n一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1\n\n`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no\">`\n\n### 总结（Summary）\n\n通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把`meta`里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。\n\n> 参与资料：\n> \n> [1.深入了解viewport和px](http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml)\n> \n> [2.高性能响应式Web开发实战](https://item.jd.com/11933227.html)","slug":"The-problem-of-mobile-web-developing","published":1,"updated":"2017-12-09T19:19:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjazq6gqf0008c6acc7scrhtf","content":"<p>在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。</p>\n<h3 id=\"像素密度（PPI）\"><a href=\"#像素密度（PPI）\" class=\"headerlink\" title=\"像素密度（PPI）\"></a>像素密度（PPI）</h3><p><strong>PPI(Pixel Per Inch)，即表示每英寸有多少像素</strong>，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic1.png\" alt=\"几种PPI表示\"></p>\n<p>以iphone6为例，一般像素密度的计算公式为：<br><code>Math.sqrt(1366*1366 + 640*640)</code></p>\n<p>但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。</p>\n<h3 id=\"设备像素（DP）-amp-amp-设备像素比（DPR）\"><a href=\"#设备像素（DP）-amp-amp-设备像素比（DPR）\" class=\"headerlink\" title=\"设备像素（DP）&amp;&amp; 设备像素比（DPR）\"></a>设备像素（DP）&amp;&amp; 设备像素比（DPR）</h3><p><strong>设备像素（Device pixel），也称物理像素（Physical pixel）</strong>，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。</p>\n<p>由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic2.png\" alt=\"一个像素在不同PPI屏幕上的显示\"></p>\n<p>越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。</p>\n<p>反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。</p>\n<p>因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。<strong>这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)</strong>，一般DPR对应着下面这个表：</p>\n<pre><code>| ldpi | mdpi | hdpi | xhdpi\n</code></pre><p>—-|——|——|——|——<br>ppi | 120  | 160  | 240  | 320<br>dpr | 0.75 | 1.0  | 1.5  | 2.0</p>\n<p>因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。</p>\n<h3 id=\"CSS像素\"><a href=\"#CSS像素\" class=\"headerlink\" title=\"CSS像素\"></a>CSS像素</h3><p>讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。</p>\n<p>我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，<strong>CSS中所指的像素px我们一般称为CSS像素</strong>。也就是说CSS像素是一个虚拟的、相对的单位。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic4.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"><br><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic5.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"></p>\n<p>例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与<em>系统分辨率</em>下的像素大小相等，<strong>即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。</strong></p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic3.png\" alt=\"一个CSS像素在不同PPI屏幕上的显示\"></p>\n<p>举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的<em>系统分辨率</em>都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与<strong>系统分辨率与设备像素的比值（即DPR）</strong>进行换算，最终计算出显示在屏幕上的实际设备像素。</p>\n<p>上面所指出的dp这种抽象单位称为<strong>设备无关像素（device independent pixel）</strong>。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。</p>\n<h3 id=\"视口（Viewport）\"><a href=\"#视口（Viewport）\" class=\"headerlink\" title=\"视口（Viewport）\"></a>视口（Viewport）</h3><p>正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，<strong>然后再自动地设置一个比例来缩放页面</strong>，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic6.jpg\" alt=\"viewport缩放\"></p>\n<p>我们可以通过在<code>content</code>中添加<code>inital-scale</code>属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;</code></p>\n<p>我们也可以定义<code>device-width</code>属性来控制<code>viewport</code>的宽度</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></p>\n<p>一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;</code></p>\n<h3 id=\"总结（Summary）\"><a href=\"#总结（Summary）\" class=\"headerlink\" title=\"总结（Summary）\"></a>总结（Summary）</h3><p>通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把<code>meta</code>里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。</p>\n<blockquote>\n<p>参与资料：</p>\n<p><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml\" target=\"_blank\" rel=\"external\">1.深入了解viewport和px</a></p>\n<p><a href=\"https://item.jd.com/11933227.html\" target=\"_blank\" rel=\"external\">2.高性能响应式Web开发实战</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在移动端开发的过程中大家都会发现，移动端的显示一般与桌面端的不一样。比如在iphone6上显示一个1334x750像素大小块状元素，虽然在苹果官网上iphone6标称的屏幕像素密度是1334x750规格，但是我们却发现这个1334x750像素大小的块状元素却不能铺满整个屏幕。那到底是为什么呢？下面从几个方面来作探讨。</p>\n<h3 id=\"像素密度（PPI）\"><a href=\"#像素密度（PPI）\" class=\"headerlink\" title=\"像素密度（PPI）\"></a>像素密度（PPI）</h3><p><strong>PPI(Pixel Per Inch)，即表示每英寸有多少像素</strong>，类似于人口密度和建筑密度，如下图举例了几种PPI的表示。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic1.png\" alt=\"几种PPI表示\"></p>\n<p>以iphone6为例，一般像素密度的计算公式为：<br><code>Math.sqrt(1366*1366 + 640*640)</code></p>\n<p>但是要计算这个PPI，那么我们先要知道设备的屏幕上到底有多少个像素，也就是Pixel Per Inch 中的第一个Pixel。</p>\n<h3 id=\"设备像素（DP）-amp-amp-设备像素比（DPR）\"><a href=\"#设备像素（DP）-amp-amp-设备像素比（DPR）\" class=\"headerlink\" title=\"设备像素（DP）&amp;&amp; 设备像素比（DPR）\"></a>设备像素（DP）&amp;&amp; 设备像素比（DPR）</h3><p><strong>设备像素（Device pixel），也称物理像素（Physical pixel）</strong>，也就是本文一开始提到iphone6的屏幕规格。像素密度中所指的像素就是设备像素，对于一般的显示设备来说，一个像素对应着屏幕上的一个发光点，因此PPI也称为DPI（dots per inch），但是这仅在显示设备上才等价，比如在打印机上就不一样了。</p>\n<p>由于市面上每一台手机的屏幕规格不一样，有的是720P，有的是1080P，甚者是2K等等，这些设备的屏幕有些像素多，有些像素少，如果同样显示一个像素的话，则会出现像以下的情况：</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic2.png\" alt=\"一个像素在不同PPI屏幕上的显示\"></p>\n<p>越高PPI的屏幕，显示一个像素点的面积就越小，一张由4x4个像素点组成的图显示在PPI为64的屏幕上，那么换到256PPI的屏幕上显示则会缩小为原来大小的一半。</p>\n<p>反过来，如果要在PPI为256的屏幕上显示效果与PPI为64的屏幕一样，那么得要把图片放大2倍。</p>\n<p>因此配有高清屏幕的手机，厂商为了其设备的可用性，即图标和文字可以被正确识别和准确点击，就必须保证各类素材在其设备上的显示与标清设备一样，而这个解决方法就是把所有尺寸都放大若干倍。<strong>这个放大比例就叫作设备像素比(Device Pixel Ratio, DPR)</strong>，一般DPR对应着下面这个表：</p>\n<pre><code>| ldpi | mdpi | hdpi | xhdpi\n</code></pre><p>—-|——|——|——|——<br>ppi | 120  | 160  | 240  | 320<br>dpr | 0.75 | 1.0  | 1.5  | 2.0</p>\n<p>因此高清设备上应该配有高清图片显示，不然图片在高清设备上放大后没有足够的像素显示其细节，那么这张图片就会变得看起来很模糊。</p>\n<h3 id=\"CSS像素\"><a href=\"#CSS像素\" class=\"headerlink\" title=\"CSS像素\"></a>CSS像素</h3><p>讲了这么多概念，仿佛还是没有很好地解释文章开头的问题。下面讨论完CSS像素后估计大家会有一个比较清晰的概念。</p>\n<p>我们通宵在写CSS的时候会用到像素单位px，但是这个像素单位并不一直是与设备像素一一对应，也就是说在CSS中1px（像素）不是对应着设备屏幕中的一个像素点。为了与设备像素区别，<strong>CSS中所指的像素px我们一般称为CSS像素</strong>。也就是说CSS像素是一个虚拟的、相对的单位。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic4.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"><br><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic5.png\" alt=\"不改变CSS使得元素在屏幕上更大地显示\"></p>\n<p>例如在页面上画一个300px宽的块元素，在一般的显示器下它只会占屏幕的一部分，但如果我们手动地去放大页面，很快这个块状元素也会充满整个页面。由此说明，一般情况下CSS像素与<em>系统分辨率</em>下的像素大小相等，<strong>即在标清设备中，一个CSS像素应该是与一个设备像素大小相等的。但是是高清设备或者用户缩放的过程中，一个CSS像素也有可能等于多个设备像素。</strong></p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic3.png\" alt=\"一个CSS像素在不同PPI屏幕上的显示\"></p>\n<p>举另外一个例子，在移动原生应用开发中，如果必须以一个设备像素为单位进行开发，那将会是一件非常痛苦的事，因为不是每一台移动设备的<em>系统分辨率</em>都是对应着一个设备像素，有的是1:2，有的是1:2.46，正是因为有这种差异，在安卓开发中会有例如dp,dt这种单位（在iOS中会有pt单位），当我们给一个元素定义大小时，只需要给定一个dp值，系统将会根据这个值再与<strong>系统分辨率与设备像素的比值（即DPR）</strong>进行换算，最终计算出显示在屏幕上的实际设备像素。</p>\n<p>上面所指出的dp这种抽象单位称为<strong>设备无关像素（device independent pixel）</strong>。当然CSS像素也属于设备无关像素，我们在写CSS像素的时候，不用关心一个CSS像素对应着多少个设备像素，系统会自动地根据DPR来帮我们换算好。我们要关心的只是如何保证网页元素因为系统换算而导致被放大的时候下，还能清晰地展示在设备上。</p>\n<h3 id=\"视口（Viewport）\"><a href=\"#视口（Viewport）\" class=\"headerlink\" title=\"视口（Viewport）\"></a>视口（Viewport）</h3><p>正常来说，在移动端打开一个页面，如果浏览器先会以正常的比例来渲染页面，<strong>然后再自动地设置一个比例来缩放页面</strong>，目的是为了让内容更好地展示出来，即页面内容刚好铺满整个手机屏幕，当然如果页面没有禁止掉用户缩放的话，你也可以用两个手指把页面缩放回原始的比例。这整个过程就是通过视口（viewport）来实现的，原始页面渲染好后通过视口缩放使得与系统宽度一样，从而可以完整地展示页面。</p>\n<p><img src=\"/2017/12/09/The-problem-of-mobile-web-developing/pic6.jpg\" alt=\"viewport缩放\"></p>\n<p>我们可以通过在<code>content</code>中添加<code>inital-scale</code>属性来控制渲染时视窗的缩放比例，把它设置为1则无缩放。</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1&quot;&gt;</code></p>\n<p>我们也可以定义<code>device-width</code>属性来控制<code>viewport</code>的宽度</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></p>\n<p>一般在移动开发中我们会设置不允许用户缩放，并把最大、最小缩放比设为1</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;</code></p>\n<h3 id=\"总结（Summary）\"><a href=\"#总结（Summary）\" class=\"headerlink\" title=\"总结（Summary）\"></a>总结（Summary）</h3><p>通过连续几天的翻阅资料与探索，终于完整地对移动开发最入门的地方有了准确的理解，之前也只是一直把<code>meta</code>里的代码直接复制过来用就是了，一直没去弄清楚，这次趁着有空并且手上刚好有相关的资料，一并整体地走一遍，最后记录成此文档，希望对日后甚至会对大家有帮助。</p>\n<blockquote>\n<p>参与资料：</p>\n<p><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/7104/7106/m5723/201509/376281.shtml\" target=\"_blank\" rel=\"external\">1.深入了解viewport和px</a></p>\n<p><a href=\"https://item.jd.com/11933227.html\" target=\"_blank\" rel=\"external\">2.高性能响应式Web开发实战</a></p>\n</blockquote>\n"},{"title":"双栏布局（一）","date":"2017-04-26T16:07:09.000Z","_content":"\n今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。\n\n### 需求说明：\n\n这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：\n\n<!-- more -->\n\n```HTML\n<!-- demo1 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        width: 200px;\n        height: 100px;\n        float: left;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        height: 130px;\n        background-color: #19bd8e;\n        margin-left: 220px;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"right-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n然后做成的事例大概就是这个样子：\n\n![demo1](demo1.gif)\n\n上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。\n\n**注意：左卡片要浮动，右卡片不要设置宽度！！**\n\n不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？\n\n粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：\n\n```html\n<!-- demo2.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        height: 100px;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        width: 200px;\n        float: right;\n        height: 130px;\n        background-color: #19bd8e;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：\n\n```html\n<!-- demo3.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .container{\n        position: relative;\n    }\n    .left-panel{\n        height: 130px;\n        background: #d20e67;\n        margin-right: 200px;\n    }\n    .right-panel{\n        width: 200px;\n        height: 110px;\n        background-color: #19bd8e;\n        position: absolute;\n        right: 0;\n        top: 0;\n        padding-top: 20px;\n        text-align: center;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n    </div>\n</body>\n</html>\n```\n\n效果如下图：\n\n![demo3](demo3.gif)\n\n*[此案例在线demo地址：](http://lenkuntang.cn/blogDemo/interestingCSS/index.html)*","source":"_posts/interestingCSS.md","raw":"---\ntitle: 双栏布局（一）\ndate: 2017-04-27 00:07:09\ntags: 每周一练\n---\n\n今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。\n\n### 需求说明：\n\n这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：\n\n<!-- more -->\n\n```HTML\n<!-- demo1 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        width: 200px;\n        height: 100px;\n        float: left;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        height: 130px;\n        background-color: #19bd8e;\n        margin-left: 220px;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"right-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n然后做成的事例大概就是这个样子：\n\n![demo1](demo1.gif)\n\n上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。\n\n**注意：左卡片要浮动，右卡片不要设置宽度！！**\n\n不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？\n\n粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：\n\n```html\n<!-- demo2.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .contaner{\n        width: 600px;\n        height: 800px;\n    }\n    .left-panel{\n        height: 100px;\n        background: #d20e67;\n        text-align: center;\n        padding-top: 30px;\n    }\n    .right-panel{\n        width: 200px;\n        float: right;\n        height: 130px;\n        background-color: #19bd8e;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n    </div>\n</body>\n</html>\n```\n\n当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：\n\n```html\n<!-- demo3.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>insteresting CSS</title>\n</head>\n<style>\n    .container{\n        position: relative;\n    }\n    .left-panel{\n        height: 130px;\n        background: #d20e67;\n        margin-right: 200px;\n    }\n    .right-panel{\n        width: 200px;\n        height: 110px;\n        background-color: #19bd8e;\n        position: absolute;\n        right: 0;\n        top: 0;\n        padding-top: 20px;\n        text-align: center;\n    }\n    .box{\n        width: 50px;\n        height: 50px;\n        float: left;\n        background-color: red;\n        margin: 10px 10px 0 10px;\n    }\n</style>\n<body>\n    <div class=\"container\">\n        <div class=\"left-panel\">\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n            <div class=\"box\"></div>\n        </div>\n        <div class=\"right-panel\">\n            <img src=\"logo.png\" alt=\"\">\n        </div>\n    </div>\n</body>\n</html>\n```\n\n效果如下图：\n\n![demo3](demo3.gif)\n\n*[此案例在线demo地址：](http://lenkuntang.cn/blogDemo/interestingCSS/index.html)*","slug":"interestingCSS","published":1,"updated":"2017-12-09T19:08:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjazq6gqo000bc6acpdko52x2","content":"<p>今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。</p>\n<h3 id=\"需求说明：\"><a href=\"#需求说明：\" class=\"headerlink\" title=\"需求说明：\"></a>需求说明：</h3><p>这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo1 --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        margin-left: 220px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后做成的事例大概就是这个样子：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo1.gif\" alt=\"demo1\"></p>\n<p>上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。</p>\n<p><strong>注意：左卡片要浮动，右卡片不要设置宽度！！</strong></p>\n<p>不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？</p>\n<p>粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo2.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        float: right;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo3.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .container&#123;</span></div><div class=\"line\"><span class=\"undefined\">        position: relative;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        margin-right: 200px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 110px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        position: absolute;</span></div><div class=\"line\"><span class=\"undefined\">        right: 0;</span></div><div class=\"line\"><span class=\"undefined\">        top: 0;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 20px;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo3.gif\" alt=\"demo3\"></p>\n<p><em><a href=\"http://lenkuntang.cn/blogDemo/interestingCSS/index.html\" target=\"_blank\" rel=\"external\">此案例在线demo地址：</a></em></p>\n","site":{"data":{}},"excerpt":"<p>今天写代码的时候遇到了一个需求，想想也是觉得这个需求挺常见的，所以就写下来记一下。</p>\n<h3 id=\"需求说明：\"><a href=\"#需求说明：\" class=\"headerlink\" title=\"需求说明：\"></a>需求说明：</h3><p>这个需求其实很简单，就是在页面中，希望左边的一个卡片固定宽度，右边卡片自适应地撑开。这个需求其实是非常常见的，网上一搜出来的结果也很多，而我更倾向于左边卡片用浮动，右边卡片用一个左边距来撑开这种方法；具体代码如下：</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo1 --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        margin-left: 220px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后做成的事例大概就是这个样子：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo1.gif\" alt=\"demo1\"></p>\n<p>上面的例子是利用了文档流默认是左对齐的原理，然后用flaot属性让左边的卡片脱离文档流，然后右卡片便会自适应地向左排过去，左卡片由于浮动会盖住右卡片的部分，所以右卡片用左margin来撑开使它完整地显示出来。</p>\n<p><strong>注意：左卡片要浮动，右卡片不要设置宽度！！</strong></p>\n<p>不过问题来了，如果是想要右边固定，左边自适应的话，那又应该怎么做了呢？</p>\n<p>粗略想了一下，同样地可以利用元素脱离文档流的方法来实现这个功能，如果继续使用float属性，那得改变Html的Dom顺序，代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo2.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .contaner&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 600px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 800px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 100px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 30px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        float: right;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当然，作为一个有代码洁癖的前段切图仔，虽然没有什么伟大的理想，但是对是代码质量的追求还是有的。所以对于为了页面布局而改变html代码结构顺序这种事情是不能容忍的（起码不能给自己留Bug）。所以除了用float属性外，还可以用绝对定位来使元素脱离文档流。详细代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- demo3.html --&gt;</span></div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>insteresting CSS<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"undefined\">    .container&#123;</span></div><div class=\"line\"><span class=\"undefined\">        position: relative;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .left-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        height: 130px;</span></div><div class=\"line\"><span class=\"undefined\">        background: #d20e67;</span></div><div class=\"line\"><span class=\"undefined\">        margin-right: 200px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .right-panel&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 200px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 110px;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: #19bd8e;</span></div><div class=\"line\"><span class=\"undefined\">        position: absolute;</span></div><div class=\"line\"><span class=\"undefined\">        right: 0;</span></div><div class=\"line\"><span class=\"undefined\">        top: 0;</span></div><div class=\"line\"><span class=\"undefined\">        padding-top: 20px;</span></div><div class=\"line\"><span class=\"undefined\">        text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">    .box&#123;</span></div><div class=\"line\"><span class=\"undefined\">        width: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 50px;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        background-color: red;</span></div><div class=\"line\"><span class=\"undefined\">        margin: 10px 10px 0 10px;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right-panel\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>效果如下图：</p>\n<p><img src=\"/2017/04/27/interestingCSS/demo3.gif\" alt=\"demo3\"></p>\n<p><em><a href=\"http://lenkuntang.cn/blogDemo/interestingCSS/index.html\" target=\"_blank\" rel=\"external\">此案例在线demo地址：</a></em></p>"},{"layout":"[post]","title":"MongoDB Shell命令","date":"2017-11-30T08:39:03.000Z","_content":"\n#### 开启MongoDB数据库服务\n\n&emsp;&emsp;mongo根目录`/bin/mongod -f` 配置文件目录/配置文件名\n例：`./bin/mongod -f conf/mongod.conf`\n\n<!-- more -->\n\n#### 强行关闭MongoDB\n\n&emsp;&emsp;先用命令 `ps -ef | grep mongod `查出mongod 的进程pid\n然后`kill pid `即可\n\n#### 数据库\n\n##### 连接MongoDB数据库\n\n&emsp;&emsp;mongo根目录`/bin/mongo` 数据库地址:端口号/库名称\n例： `./bin/mongo 127.0.0.1:12345/test`\n\n##### 关闭MongoDB数据库\n\n&emsp;&emsp;`db.shutdownServer()`\n\n##### 新建和切换数据库\n\n&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用`use 数据库名` 就可以了。\n\n##### 删除数据库\n\n&emsp;&emsp;先用`db.use`切换到要删除的数据库，然后使用`db.dropDatabase()`来删除数据库\n\n#### 数据操作\n\n##### 插入一条数据\n\n`db.collection.insert({key: value})`\n\n其中集名称可以自己起\n\n##### 插入多条数据\n\n&emsp;&emsp;可以使用for循环插入： `for(i＝3;i<100;i++)db.collection.insert({key: value})`\n\n##### 查询所有数据\n\n`db.collection.find()`\n\n##### 查询单条数据\n\n`db.collection.find({key: value})`\n\n##### 查询后有条件地进行处理\n\n`db.collection.find({key: value}).skip(3).limit(5).sort({key: value})`\n\n上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)\n\n##### 显示库中的所有集名称\n\n`show collections`\n\n##### 删除数据库中的集合\n\n`db.collection.drop()`\n\n#### 索引\n\n##### 查看索引\n\n`db.imooc_2.getIndexes()`\n\n##### _id索引\n\n- _id索引是绝大多数集合默认建立的索引。\n- 对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。\n\n##### 创建一个单键索引\n\n- 单键索引是最普通的索引\n- 单键索引不会自动创建\n\n&emsp;&emsp;例如： 一条记录为`{x: 1, y: 2, z: 3}`，如果我们在x上建立了索引，就可以使用x为条件进行查寻。\n\n`db.collection.ensureIndex({index: order})`\n\n- index: 索引\n- order: 1表示升序， -1表示降序\n\n##### 创建一个多键索引\n\n多键索引与单键索引创建形式相同，区别在于字段的值。 \n\n- 单键索引：值为一个单一的值，如字符串，数字或日期。 \n- 多键索引：值具有多个记录，如数组。\n\n`db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据`\n\n`db.collection.insert({x:new Date()}) //插入一条数组数据`\n\n##### 创建一个复合索引\n\n&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引\n\n&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引`db.collection.ensureIndex({x:1, y:1})`，然后就可以使用`{x: 1, y:1}`作为条件进行查询\n\n`db.collection.ensureIndex({x:1, y:1})`\n\n##### 创建一个过期索引\n\n- 在一段时间后会过期的索引 \n- 在索引过期后，相应的数据会被删除 \n- 适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。\n\n`db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})` 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒\n\n&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。\n\n&emsp;&emsp;过期索引的限制： \n\n1. 存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。 \n例如 >db.imooc_2.insert({time:1})，这种是不能被自动删除的 \n2. 如果指定了ISODate数组，则按照最小的时间进行删除。 \n3. 过期索引不能是复合索引。因为不能指定两个过期时间。 \n4. 删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差\n\n","source":"_posts/mongodb-command.md","raw":"---\nlayout: '[post]'\ntitle: MongoDB Shell命令\ndate: 2017-11-30 16:39:03\ntags: 读书笔记\n---\n\n#### 开启MongoDB数据库服务\n\n&emsp;&emsp;mongo根目录`/bin/mongod -f` 配置文件目录/配置文件名\n例：`./bin/mongod -f conf/mongod.conf`\n\n<!-- more -->\n\n#### 强行关闭MongoDB\n\n&emsp;&emsp;先用命令 `ps -ef | grep mongod `查出mongod 的进程pid\n然后`kill pid `即可\n\n#### 数据库\n\n##### 连接MongoDB数据库\n\n&emsp;&emsp;mongo根目录`/bin/mongo` 数据库地址:端口号/库名称\n例： `./bin/mongo 127.0.0.1:12345/test`\n\n##### 关闭MongoDB数据库\n\n&emsp;&emsp;`db.shutdownServer()`\n\n##### 新建和切换数据库\n\n&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用`use 数据库名` 就可以了。\n\n##### 删除数据库\n\n&emsp;&emsp;先用`db.use`切换到要删除的数据库，然后使用`db.dropDatabase()`来删除数据库\n\n#### 数据操作\n\n##### 插入一条数据\n\n`db.collection.insert({key: value})`\n\n其中集名称可以自己起\n\n##### 插入多条数据\n\n&emsp;&emsp;可以使用for循环插入： `for(i＝3;i<100;i++)db.collection.insert({key: value})`\n\n##### 查询所有数据\n\n`db.collection.find()`\n\n##### 查询单条数据\n\n`db.collection.find({key: value})`\n\n##### 查询后有条件地进行处理\n\n`db.collection.find({key: value}).skip(3).limit(5).sort({key: value})`\n\n上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)\n\n##### 显示库中的所有集名称\n\n`show collections`\n\n##### 删除数据库中的集合\n\n`db.collection.drop()`\n\n#### 索引\n\n##### 查看索引\n\n`db.imooc_2.getIndexes()`\n\n##### _id索引\n\n- _id索引是绝大多数集合默认建立的索引。\n- 对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。\n\n##### 创建一个单键索引\n\n- 单键索引是最普通的索引\n- 单键索引不会自动创建\n\n&emsp;&emsp;例如： 一条记录为`{x: 1, y: 2, z: 3}`，如果我们在x上建立了索引，就可以使用x为条件进行查寻。\n\n`db.collection.ensureIndex({index: order})`\n\n- index: 索引\n- order: 1表示升序， -1表示降序\n\n##### 创建一个多键索引\n\n多键索引与单键索引创建形式相同，区别在于字段的值。 \n\n- 单键索引：值为一个单一的值，如字符串，数字或日期。 \n- 多键索引：值具有多个记录，如数组。\n\n`db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据`\n\n`db.collection.insert({x:new Date()}) //插入一条数组数据`\n\n##### 创建一个复合索引\n\n&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引\n\n&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引`db.collection.ensureIndex({x:1, y:1})`，然后就可以使用`{x: 1, y:1}`作为条件进行查询\n\n`db.collection.ensureIndex({x:1, y:1})`\n\n##### 创建一个过期索引\n\n- 在一段时间后会过期的索引 \n- 在索引过期后，相应的数据会被删除 \n- 适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。\n\n`db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})` 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒\n\n&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。\n\n&emsp;&emsp;过期索引的限制： \n\n1. 存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。 \n例如 >db.imooc_2.insert({time:1})，这种是不能被自动删除的 \n2. 如果指定了ISODate数组，则按照最小的时间进行删除。 \n3. 过期索引不能是复合索引。因为不能指定两个过期时间。 \n4. 删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差\n\n","slug":"mongodb-command","published":1,"updated":"2017-12-09T19:04:55.000Z","comments":1,"photos":[],"link":"","_id":"cjazq6gqv000cc6aci7k9jmd4","content":"<h4 id=\"开启MongoDB数据库服务\"><a href=\"#开启MongoDB数据库服务\" class=\"headerlink\" title=\"开启MongoDB数据库服务\"></a>开启MongoDB数据库服务</h4><p>&emsp;&emsp;mongo根目录<code>/bin/mongod -f</code> 配置文件目录/配置文件名<br>例：<code>./bin/mongod -f conf/mongod.conf</code></p>\n<a id=\"more\"></a>\n<h4 id=\"强行关闭MongoDB\"><a href=\"#强行关闭MongoDB\" class=\"headerlink\" title=\"强行关闭MongoDB\"></a>强行关闭MongoDB</h4><p>&emsp;&emsp;先用命令 <code>ps -ef | grep mongod</code>查出mongod 的进程pid<br>然后<code>kill pid</code>即可</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h5 id=\"连接MongoDB数据库\"><a href=\"#连接MongoDB数据库\" class=\"headerlink\" title=\"连接MongoDB数据库\"></a>连接MongoDB数据库</h5><p>&emsp;&emsp;mongo根目录<code>/bin/mongo</code> 数据库地址:端口号/库名称<br>例： <code>./bin/mongo 127.0.0.1:12345/test</code></p>\n<h5 id=\"关闭MongoDB数据库\"><a href=\"#关闭MongoDB数据库\" class=\"headerlink\" title=\"关闭MongoDB数据库\"></a>关闭MongoDB数据库</h5><p>&emsp;&emsp;<code>db.shutdownServer()</code></p>\n<h5 id=\"新建和切换数据库\"><a href=\"#新建和切换数据库\" class=\"headerlink\" title=\"新建和切换数据库\"></a>新建和切换数据库</h5><p>&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用<code>use 数据库名</code> 就可以了。</p>\n<h5 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h5><p>&emsp;&emsp;先用<code>db.use</code>切换到要删除的数据库，然后使用<code>db.dropDatabase()</code>来删除数据库</p>\n<h4 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h4><h5 id=\"插入一条数据\"><a href=\"#插入一条数据\" class=\"headerlink\" title=\"插入一条数据\"></a>插入一条数据</h5><p><code>db.collection.insert({key: value})</code></p>\n<p>其中集名称可以自己起</p>\n<h5 id=\"插入多条数据\"><a href=\"#插入多条数据\" class=\"headerlink\" title=\"插入多条数据\"></a>插入多条数据</h5><p>&emsp;&emsp;可以使用for循环插入： <code>for(i＝3;i&lt;100;i++)db.collection.insert({key: value})</code></p>\n<h5 id=\"查询所有数据\"><a href=\"#查询所有数据\" class=\"headerlink\" title=\"查询所有数据\"></a>查询所有数据</h5><p><code>db.collection.find()</code></p>\n<h5 id=\"查询单条数据\"><a href=\"#查询单条数据\" class=\"headerlink\" title=\"查询单条数据\"></a>查询单条数据</h5><p><code>db.collection.find({key: value})</code></p>\n<h5 id=\"查询后有条件地进行处理\"><a href=\"#查询后有条件地进行处理\" class=\"headerlink\" title=\"查询后有条件地进行处理\"></a>查询后有条件地进行处理</h5><p><code>db.collection.find({key: value}).skip(3).limit(5).sort({key: value})</code></p>\n<p>上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)</p>\n<h5 id=\"显示库中的所有集名称\"><a href=\"#显示库中的所有集名称\" class=\"headerlink\" title=\"显示库中的所有集名称\"></a>显示库中的所有集名称</h5><p><code>show collections</code></p>\n<h5 id=\"删除数据库中的集合\"><a href=\"#删除数据库中的集合\" class=\"headerlink\" title=\"删除数据库中的集合\"></a>删除数据库中的集合</h5><p><code>db.collection.drop()</code></p>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><h5 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h5><p><code>db.imooc_2.getIndexes()</code></p>\n<h5 id=\"id索引\"><a href=\"#id索引\" class=\"headerlink\" title=\"_id索引\"></a>_id索引</h5><ul>\n<li>_id索引是绝大多数集合默认建立的索引。</li>\n<li>对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。</li>\n</ul>\n<h5 id=\"创建一个单键索引\"><a href=\"#创建一个单键索引\" class=\"headerlink\" title=\"创建一个单键索引\"></a>创建一个单键索引</h5><ul>\n<li>单键索引是最普通的索引</li>\n<li>单键索引不会自动创建</li>\n</ul>\n<p>&emsp;&emsp;例如： 一条记录为<code>{x: 1, y: 2, z: 3}</code>，如果我们在x上建立了索引，就可以使用x为条件进行查寻。</p>\n<p><code>db.collection.ensureIndex({index: order})</code></p>\n<ul>\n<li>index: 索引</li>\n<li>order: 1表示升序， -1表示降序</li>\n</ul>\n<h5 id=\"创建一个多键索引\"><a href=\"#创建一个多键索引\" class=\"headerlink\" title=\"创建一个多键索引\"></a>创建一个多键索引</h5><p>多键索引与单键索引创建形式相同，区别在于字段的值。 </p>\n<ul>\n<li>单键索引：值为一个单一的值，如字符串，数字或日期。 </li>\n<li>多键索引：值具有多个记录，如数组。</li>\n</ul>\n<p><code>db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据</code></p>\n<p><code>db.collection.insert({x:new Date()}) //插入一条数组数据</code></p>\n<h5 id=\"创建一个复合索引\"><a href=\"#创建一个复合索引\" class=\"headerlink\" title=\"创建一个复合索引\"></a>创建一个复合索引</h5><p>&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引</p>\n<p>&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引<code>db.collection.ensureIndex({x:1, y:1})</code>，然后就可以使用<code>{x: 1, y:1}</code>作为条件进行查询</p>\n<p><code>db.collection.ensureIndex({x:1, y:1})</code></p>\n<h5 id=\"创建一个过期索引\"><a href=\"#创建一个过期索引\" class=\"headerlink\" title=\"创建一个过期索引\"></a>创建一个过期索引</h5><ul>\n<li>在一段时间后会过期的索引 </li>\n<li>在索引过期后，相应的数据会被删除 </li>\n<li>适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。</li>\n</ul>\n<p><code>db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})</code> 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒</p>\n<p>&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。</p>\n<p>&emsp;&emsp;过期索引的限制： </p>\n<ol>\n<li>存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。<br>例如 &gt;db.imooc_2.insert({time:1})，这种是不能被自动删除的 </li>\n<li>如果指定了ISODate数组，则按照最小的时间进行删除。 </li>\n<li>过期索引不能是复合索引。因为不能指定两个过期时间。 </li>\n<li>删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"开启MongoDB数据库服务\"><a href=\"#开启MongoDB数据库服务\" class=\"headerlink\" title=\"开启MongoDB数据库服务\"></a>开启MongoDB数据库服务</h4><p>&emsp;&emsp;mongo根目录<code>/bin/mongod -f</code> 配置文件目录/配置文件名<br>例：<code>./bin/mongod -f conf/mongod.conf</code></p>","more":"<h4 id=\"强行关闭MongoDB\"><a href=\"#强行关闭MongoDB\" class=\"headerlink\" title=\"强行关闭MongoDB\"></a>强行关闭MongoDB</h4><p>&emsp;&emsp;先用命令 <code>ps -ef | grep mongod</code>查出mongod 的进程pid<br>然后<code>kill pid</code>即可</p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h5 id=\"连接MongoDB数据库\"><a href=\"#连接MongoDB数据库\" class=\"headerlink\" title=\"连接MongoDB数据库\"></a>连接MongoDB数据库</h5><p>&emsp;&emsp;mongo根目录<code>/bin/mongo</code> 数据库地址:端口号/库名称<br>例： <code>./bin/mongo 127.0.0.1:12345/test</code></p>\n<h5 id=\"关闭MongoDB数据库\"><a href=\"#关闭MongoDB数据库\" class=\"headerlink\" title=\"关闭MongoDB数据库\"></a>关闭MongoDB数据库</h5><p>&emsp;&emsp;<code>db.shutdownServer()</code></p>\n<h5 id=\"新建和切换数据库\"><a href=\"#新建和切换数据库\" class=\"headerlink\" title=\"新建和切换数据库\"></a>新建和切换数据库</h5><p>&emsp;&emsp;MongoDB不用特别地去声明新建一个数据库，直接用<code>use 数据库名</code> 就可以了。</p>\n<h5 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h5><p>&emsp;&emsp;先用<code>db.use</code>切换到要删除的数据库，然后使用<code>db.dropDatabase()</code>来删除数据库</p>\n<h4 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h4><h5 id=\"插入一条数据\"><a href=\"#插入一条数据\" class=\"headerlink\" title=\"插入一条数据\"></a>插入一条数据</h5><p><code>db.collection.insert({key: value})</code></p>\n<p>其中集名称可以自己起</p>\n<h5 id=\"插入多条数据\"><a href=\"#插入多条数据\" class=\"headerlink\" title=\"插入多条数据\"></a>插入多条数据</h5><p>&emsp;&emsp;可以使用for循环插入： <code>for(i＝3;i&lt;100;i++)db.collection.insert({key: value})</code></p>\n<h5 id=\"查询所有数据\"><a href=\"#查询所有数据\" class=\"headerlink\" title=\"查询所有数据\"></a>查询所有数据</h5><p><code>db.collection.find()</code></p>\n<h5 id=\"查询单条数据\"><a href=\"#查询单条数据\" class=\"headerlink\" title=\"查询单条数据\"></a>查询单条数据</h5><p><code>db.collection.find({key: value})</code></p>\n<h5 id=\"查询后有条件地进行处理\"><a href=\"#查询后有条件地进行处理\" class=\"headerlink\" title=\"查询后有条件地进行处理\"></a>查询后有条件地进行处理</h5><p><code>db.collection.find({key: value}).skip(3).limit(5).sort({key: value})</code></p>\n<p>上面查询语句后的限制分别是skip（跳过多少条数据）、limit（限制查多少条数据）、sort(将查询出来的结果集排序)</p>\n<h5 id=\"显示库中的所有集名称\"><a href=\"#显示库中的所有集名称\" class=\"headerlink\" title=\"显示库中的所有集名称\"></a>显示库中的所有集名称</h5><p><code>show collections</code></p>\n<h5 id=\"删除数据库中的集合\"><a href=\"#删除数据库中的集合\" class=\"headerlink\" title=\"删除数据库中的集合\"></a>删除数据库中的集合</h5><p><code>db.collection.drop()</code></p>\n<h4 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h4><h5 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h5><p><code>db.imooc_2.getIndexes()</code></p>\n<h5 id=\"id索引\"><a href=\"#id索引\" class=\"headerlink\" title=\"_id索引\"></a>_id索引</h5><ul>\n<li>_id索引是绝大多数集合默认建立的索引。</li>\n<li>对于每个插入的数据，MongoDB都会自动生成一条唯一的_id字段。</li>\n</ul>\n<h5 id=\"创建一个单键索引\"><a href=\"#创建一个单键索引\" class=\"headerlink\" title=\"创建一个单键索引\"></a>创建一个单键索引</h5><ul>\n<li>单键索引是最普通的索引</li>\n<li>单键索引不会自动创建</li>\n</ul>\n<p>&emsp;&emsp;例如： 一条记录为<code>{x: 1, y: 2, z: 3}</code>，如果我们在x上建立了索引，就可以使用x为条件进行查寻。</p>\n<p><code>db.collection.ensureIndex({index: order})</code></p>\n<ul>\n<li>index: 索引</li>\n<li>order: 1表示升序， -1表示降序</li>\n</ul>\n<h5 id=\"创建一个多键索引\"><a href=\"#创建一个多键索引\" class=\"headerlink\" title=\"创建一个多键索引\"></a>创建一个多键索引</h5><p>多键索引与单键索引创建形式相同，区别在于字段的值。 </p>\n<ul>\n<li>单键索引：值为一个单一的值，如字符串，数字或日期。 </li>\n<li>多键索引：值具有多个记录，如数组。</li>\n</ul>\n<p><code>db.collection.insert({x:[1,2,3,4,5]}) //插入一条数组数据</code></p>\n<p><code>db.collection.insert({x:new Date()}) //插入一条数组数据</code></p>\n<h5 id=\"创建一个复合索引\"><a href=\"#创建一个复合索引\" class=\"headerlink\" title=\"创建一个复合索引\"></a>创建一个复合索引</h5><p>&emsp;&emsp;当我们的查询条件不止一个的时候，就需要建立复合索引</p>\n<p>&emsp;&emsp;例如{x:1,y:2,z:3}这样一条数据，要按照x与y的值进行查询，就需要创建复合索引<code>db.collection.ensureIndex({x:1, y:1})</code>，然后就可以使用<code>{x: 1, y:1}</code>作为条件进行查询</p>\n<p><code>db.collection.ensureIndex({x:1, y:1})</code></p>\n<h5 id=\"创建一个过期索引\"><a href=\"#创建一个过期索引\" class=\"headerlink\" title=\"创建一个过期索引\"></a>创建一个过期索引</h5><ul>\n<li>在一段时间后会过期的索引 </li>\n<li>在索引过期后，相应的数据会被删除 </li>\n<li>适合存储在一段时间之后会失效的数据，比如用户的登录信息、存储的日志等。</li>\n</ul>\n<p><code>db.imooc_2.ensureIndex({time:1},{expireAfterSeconds: seconds})</code> 创建过期索引，time-字段，expireAfterSeconds在多少秒后过期，单位：秒</p>\n<p>&emsp;&emsp;过30秒后再find，刚才的数据就已经不存在了。</p>\n<p>&emsp;&emsp;过期索引的限制： </p>\n<ol>\n<li>存储在过期索引字段的值必须是指定的时间类型，必须是ISODate或者ISODate数组，不能使用时间戳，否则不能自动删除。<br>例如 &gt;db.imooc_2.insert({time:1})，这种是不能被自动删除的 </li>\n<li>如果指定了ISODate数组，则按照最小的时间进行删除。 </li>\n<li>过期索引不能是复合索引。因为不能指定两个过期时间。 </li>\n<li>删除时间是不精确的。删除过程是由MongoDB的后台进程每60s跑一次的，而且删除也需要一定时间，所以存在误差</li>\n</ol>"},{"layout":"[post]","title":"渐进式图片加载效果","date":"2017-09-11T01:01:25.000Z","_content":"\n前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：\n\n### 图床\n\n就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。\n\n<!-- more -->\n\n### 地址替换\n\n思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。\n\n本文介绍的是方法二用地址替换的方式来实现：\n\n### 案例效果\n\n![案例效果](processing_image.gif)\n\n### 案例代码\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Processing Image Effect Demo</title>\n    <link rel=\"stylesheet\" href=\"./css/index.css\">\n</head>\n<body>\n    <div class=\"img-con\" id=\"imgCon\">\n        <img src=\"./img/1_small.jpg\" data-src=\"./img/1_big.jpeg\" alt=\"图片1\" id=\"img\">\n        <img src=\"./img/2_small.jpg\" data-src=\"./img/2_big.jpg\" alt=\"图片2\" id=\"img\">\n        <img src=\"./img/3_small.jpg\" data-src=\"./img/3_big.jpg\" alt=\"图片3\" id=\"img\">\n        <img src=\"./img/4_small.jpg\" data-src=\"./img/4_big.jpg\" alt=\"图片4\" id=\"img\">\n        <img src=\"./img/5_small.jpg\" data-src=\"./img/5_big.jpg\" alt=\"图片5\" id=\"img\">\n    </div>\n    <script>\n        window.onload = function() {\n            var imgCon = document.getElementById('imgCon')\n            var imgs = imgCon.getElementsByTagName('img')\n            for (var i = 0; i < imgs.length; i++) {\n                \n                (function(curImg) {\n                    var tempImg = null;\n                    tempImg = document.createElement('img')\n                    console.log(curImg)\n                    tempImg.src = curImg.dataset.src;\n                    tempImg.onload = function(e) {\n                        curImg.src = tempImg.src\n                        curImg.style.filter = 'blur(0px)'\n                    }\n                })(imgs[i])\n            }\n        }\n    </script>\n</body>\n</html>\n```\n\n```CSS\n.img-con img {\n    width: 100%;\n    height: 400px;\n    -webkit-transition: filter .3s ease-out 0s;\n    -moz-transition: filter .3s ease-out 0s;\n    transition: filter .3s ease-out 0s;\n    filter: blur(10px);\n    -ms-filter: blur(10px);\n    -webkit-filter: blur(10px);\n}\n```\n\n### 关键知识点\n\n- JS Image对象\n- CSS3 filter blur 属性\n\n*注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题*\n","source":"_posts/processing-medium-effect.md","raw":"---\nlayout: '[post]'\ntitle: 渐进式图片加载效果\ndate: 2017-09-11 09:01:25\ntags: 每周一练\n---\n\n前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：\n\n### 图床\n\n就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。\n\n<!-- more -->\n\n### 地址替换\n\n思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。\n\n本文介绍的是方法二用地址替换的方式来实现：\n\n### 案例效果\n\n![案例效果](processing_image.gif)\n\n### 案例代码\n\n```HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Processing Image Effect Demo</title>\n    <link rel=\"stylesheet\" href=\"./css/index.css\">\n</head>\n<body>\n    <div class=\"img-con\" id=\"imgCon\">\n        <img src=\"./img/1_small.jpg\" data-src=\"./img/1_big.jpeg\" alt=\"图片1\" id=\"img\">\n        <img src=\"./img/2_small.jpg\" data-src=\"./img/2_big.jpg\" alt=\"图片2\" id=\"img\">\n        <img src=\"./img/3_small.jpg\" data-src=\"./img/3_big.jpg\" alt=\"图片3\" id=\"img\">\n        <img src=\"./img/4_small.jpg\" data-src=\"./img/4_big.jpg\" alt=\"图片4\" id=\"img\">\n        <img src=\"./img/5_small.jpg\" data-src=\"./img/5_big.jpg\" alt=\"图片5\" id=\"img\">\n    </div>\n    <script>\n        window.onload = function() {\n            var imgCon = document.getElementById('imgCon')\n            var imgs = imgCon.getElementsByTagName('img')\n            for (var i = 0; i < imgs.length; i++) {\n                \n                (function(curImg) {\n                    var tempImg = null;\n                    tempImg = document.createElement('img')\n                    console.log(curImg)\n                    tempImg.src = curImg.dataset.src;\n                    tempImg.onload = function(e) {\n                        curImg.src = tempImg.src\n                        curImg.style.filter = 'blur(0px)'\n                    }\n                })(imgs[i])\n            }\n        }\n    </script>\n</body>\n</html>\n```\n\n```CSS\n.img-con img {\n    width: 100%;\n    height: 400px;\n    -webkit-transition: filter .3s ease-out 0s;\n    -moz-transition: filter .3s ease-out 0s;\n    transition: filter .3s ease-out 0s;\n    filter: blur(10px);\n    -ms-filter: blur(10px);\n    -webkit-filter: blur(10px);\n}\n```\n\n### 关键知识点\n\n- JS Image对象\n- CSS3 filter blur 属性\n\n*注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题*\n","slug":"processing-medium-effect","published":1,"updated":"2017-12-09T18:58:53.000Z","comments":1,"photos":[],"link":"","_id":"cjazq6gqx000fc6acz4zsugxx","content":"<p>前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：</p>\n<h3 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h3><p>就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。</p>\n<a id=\"more\"></a>\n<h3 id=\"地址替换\"><a href=\"#地址替换\" class=\"headerlink\" title=\"地址替换\"></a>地址替换</h3><p>思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。</p>\n<p>本文介绍的是方法二用地址替换的方式来实现：</p>\n<h3 id=\"案例效果\"><a href=\"#案例效果\" class=\"headerlink\" title=\"案例效果\"></a>案例效果</h3><p><img src=\"/2017/09/11/processing-medium-effect/processing_image.gif\" alt=\"案例效果\"></p>\n<h3 id=\"案例代码\"><a href=\"#案例代码\" class=\"headerlink\" title=\"案例代码\"></a>案例代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Processing Image Effect Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./css/index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-con\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgCon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/1_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/1_big.jpeg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/2_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/2_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片2\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/3_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/3_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片3\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/4_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/4_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片4\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/5_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/5_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片5\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgCon = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'imgCon'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgs = imgCon.getElementsByTagName(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgs.length; i++) &#123;</span></div><div class=\"line\"><span class=\"undefined\">                </span></div><div class=\"line\"><span class=\"javascript\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">curImg</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> tempImg = <span class=\"literal\">null</span>;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(curImg)</span></div><div class=\"line\"><span class=\"undefined\">                    tempImg.src = curImg.dataset.src;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">                        curImg.src = tempImg.src</span></div><div class=\"line\"><span class=\"javascript\">                        curImg.style.filter = <span class=\"string\">'blur(0px)'</span></span></div><div class=\"line\"><span class=\"undefined\">                    &#125;</span></div><div class=\"line\"><span class=\"undefined\">                &#125;)(imgs[i])</span></div><div class=\"line\"><span class=\"undefined\">            &#125;</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.img-con</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">-moz-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-ms-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键知识点\"><a href=\"#关键知识点\" class=\"headerlink\" title=\"关键知识点\"></a>关键知识点</h3><ul>\n<li>JS Image对象</li>\n<li>CSS3 filter blur 属性</li>\n</ul>\n<p><em>注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题</em></p>\n","site":{"data":{}},"excerpt":"<p>前些日子在逛知乎，发现有个效果挺不错的，就是当一开始页面上的图片是模糊的，过一会图片变清晰。突然感觉这种效果比传统的占位图效果要好的多，于是在好奇心的驱使下百度了一下效果，得出的实现常用可以分为图床和图片地址替换。下面简单叙述一下两个方案的实现思路：</p>\n<h3 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h3><p>就是在图片原来的地方放一个标签用来放模糊的照片，盖在原来清晰大图片的上方，当大图加载成功后，原来盖在上面的图片隐藏掉。图床可以是一个Div或者是Canvas等。</p>","more":"<h3 id=\"地址替换\"><a href=\"#地址替换\" class=\"headerlink\" title=\"地址替换\"></a>地址替换</h3><p>思路和上面差不多，一开始的时候先加载一张低清的图，把高清图片的地址存在某个属性里，等页面加载完成后，用JS取到高请图片的地址，然后用image对象加载，等加载完成后再把图片地址替换成高清的地址。</p>\n<p>本文介绍的是方法二用地址替换的方式来实现：</p>\n<h3 id=\"案例效果\"><a href=\"#案例效果\" class=\"headerlink\" title=\"案例效果\"></a>案例效果</h3><p><img src=\"/2017/09/11/processing-medium-effect/processing_image.gif\" alt=\"案例效果\"></p>\n<h3 id=\"案例代码\"><a href=\"#案例代码\" class=\"headerlink\" title=\"案例代码\"></a>案例代码</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Processing Image Effect Demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./css/index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-con\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imgCon\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/1_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/1_big.jpeg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片1\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/2_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/2_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片2\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/3_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/3_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片3\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/4_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/4_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片4\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img/5_small.jpg\"</span> <span class=\"attr\">data-src</span>=<span class=\"string\">\"./img/5_big.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"图片5\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"img\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgCon = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'imgCon'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> imgs = imgCon.getElementsByTagName(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgs.length; i++) &#123;</span></div><div class=\"line\"><span class=\"undefined\">                </span></div><div class=\"line\"><span class=\"javascript\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">curImg</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"keyword\">var</span> tempImg = <span class=\"literal\">null</span>;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>)</span></div><div class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">console</span>.log(curImg)</span></div><div class=\"line\"><span class=\"undefined\">                    tempImg.src = curImg.dataset.src;</span></div><div class=\"line\"><span class=\"javascript\">                    tempImg.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">                        curImg.src = tempImg.src</span></div><div class=\"line\"><span class=\"javascript\">                        curImg.style.filter = <span class=\"string\">'blur(0px)'</span></span></div><div class=\"line\"><span class=\"undefined\">                    &#125;</span></div><div class=\"line\"><span class=\"undefined\">                &#125;)(imgs[i])</span></div><div class=\"line\"><span class=\"undefined\">            &#125;</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.img-con</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</div><div class=\"line\">    <span class=\"attribute\">-webkit-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">-moz-transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">transition</span>: filter .<span class=\"number\">3s</span> ease-out <span class=\"number\">0s</span>;</div><div class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-ms-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">    <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">blur</span>(10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关键知识点\"><a href=\"#关键知识点\" class=\"headerlink\" title=\"关键知识点\"></a>关键知识点</h3><ul>\n<li>JS Image对象</li>\n<li>CSS3 filter blur 属性</li>\n</ul>\n<p><em>注意： Image对象读取图片的过程是异步的，需要弄清楚代码执行的时序问题</em></p>"}],"PostAsset":[{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic5.png","slug":"pic5.png","post":"cjazq6gqf0008c6acc7scrhtf","modified":0,"renderable":0},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic6.jpg","slug":"pic6.jpg","post":"cjazq6gqf0008c6acc7scrhtf","modified":0,"renderable":0},{"_id":"source/_posts/processing-medium-effect/processing_image.gif","slug":"processing_image.gif","post":"cjazq6gqx000fc6acz4zsugxx","modified":0,"renderable":0},{"_id":"source/_posts/interestingCSS/demo1.gif","slug":"demo1.gif","post":"cjazq6gqo000bc6acpdko52x2","modified":0,"renderable":0},{"_id":"source/_posts/interestingCSS/demo3.gif","slug":"demo3.gif","post":"cjazq6gqo000bc6acpdko52x2","modified":0,"renderable":0},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic1.png","slug":"pic1.png","post":"cjazq6gqf0008c6acc7scrhtf","modified":0,"renderable":0},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic2.png","slug":"pic2.png","post":"cjazq6gqf0008c6acc7scrhtf","modified":0,"renderable":0},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic3.png","slug":"pic3.png","post":"cjazq6gqf0008c6acc7scrhtf","modified":0,"renderable":0},{"_id":"source/_posts/The-problem-of-mobile-web-developing/pic4.png","slug":"pic4.png","post":"cjazq6gqf0008c6acc7scrhtf","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjazq6gpj0000c6acjtbtkevi","tag_id":"cjazq6gpy0004c6aczefwd20n","_id":"cjazq6gql000ac6acuvg58jqt"},{"post_id":"cjazq6gpv0002c6ac5v67sina","tag_id":"cjazq6gpy0004c6aczefwd20n","_id":"cjazq6gqw000ec6ackzjitjzj"},{"post_id":"cjazq6gqv000cc6aci7k9jmd4","tag_id":"cjazq6gpy0004c6aczefwd20n","_id":"cjazq6gqz000gc6acky4f8w0h"},{"post_id":"cjazq6gq30005c6acn0ikrion","tag_id":"cjazq6gpy0004c6aczefwd20n","_id":"cjazq6gqz000ic6ac9p491kbi"},{"post_id":"cjazq6gqa0007c6acbopnvppj","tag_id":"cjazq6gqz000hc6ac76ul36jr","_id":"cjazq6gr0000kc6acmb0mu2w8"},{"post_id":"cjazq6gqf0008c6acc7scrhtf","tag_id":"cjazq6gr0000jc6ac425v9f0d","_id":"cjazq6gr1000mc6acydv7zv26"},{"post_id":"cjazq6gqo000bc6acpdko52x2","tag_id":"cjazq6gr0000lc6acb7yy343c","_id":"cjazq6gr2000oc6achsu62jpr"},{"post_id":"cjazq6gqx000fc6acz4zsugxx","tag_id":"cjazq6gr0000lc6acb7yy343c","_id":"cjazq6gr2000pc6acoctx44ae"}],"Tag":[{"name":"读书笔记","_id":"cjazq6gpy0004c6aczefwd20n"},{"name":"课本摘抄","_id":"cjazq6gqz000hc6ac76ul36jr"},{"name":"个人总结","_id":"cjazq6gr0000jc6ac425v9f0d"},{"name":"每周一练","_id":"cjazq6gr0000lc6acb7yy343c"}]}}